
lora_nhan_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006450  08006450  00016450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006864  08006864  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800686c  0800686c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001d8  08006a48  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08006a48  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a21e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4a  00000000  00000000  0002a45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a1  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c5e  00000000  00000000  0002d461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cae3  00000000  00000000  000460bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008664e  00000000  00000000  00052ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003944  00000000  00000000  000d91f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000dcb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006438 	.word	0x08006438

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006438 	.word	0x08006438

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b972 	b.w	8000d84 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14c      	bne.n	8000b62 <__udivmoddi4+0xaa>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d967      	bls.n	8000b9e <__udivmoddi4+0xe6>
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	b153      	cbz	r3, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad8:	f1c3 0220 	rsb	r2, r3, #32
 8000adc:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ae0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae4:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fbbe f1f7 	udiv	r1, lr, r7
 8000af2:	fa1f f58c 	uxth.w	r5, ip
 8000af6:	fb07 ee11 	mls	lr, r7, r1, lr
 8000afa:	fb01 f005 	mul.w	r0, r1, r5
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000b10:	f080 8119 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8116 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b24:	fb07 2210 	mls	r2, r7, r0, r2
 8000b28:	fb00 f505 	mul.w	r5, r0, r5
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8104 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8101 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	2100      	movs	r1, #0
 8000b52:	1b64      	subs	r4, r4, r5
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa6>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xc0>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ea 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d148      	bne.n	8000c12 <__udivmoddi4+0x15a>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xd2>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2c2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4696      	mov	lr, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa6>
 8000b98:	e9c6 4e00 	strd	r4, lr, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xea>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 808e 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000bac:	1a88      	subs	r0, r1, r2
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0c17      	lsrs	r7, r2, #16
 8000bb2:	fa1f fe82 	uxth.w	lr, r2
 8000bb6:	fbb0 f5f7 	udiv	r5, r0, r7
 8000bba:	fb07 0015 	mls	r0, r7, r5, r0
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc4:	fb0e f005 	mul.w	r0, lr, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f200 80cc 	bhi.w	8000d74 <__udivmoddi4+0x2bc>
 8000bdc:	4645      	mov	r5, r8
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be4:	fb07 2210 	mls	r2, r7, r0, r2
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x150>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14e>
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	f200 80b4 	bhi.w	8000d6e <__udivmoddi4+0x2b6>
 8000c06:	4610      	mov	r0, r2
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c10:	e7a0      	b.n	8000b54 <__udivmoddi4+0x9c>
 8000c12:	f1c1 0720 	rsb	r7, r1, #32
 8000c16:	408b      	lsls	r3, r1
 8000c18:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c20:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c28:	fbba f8f9 	udiv	r8, sl, r9
 8000c2c:	408d      	lsls	r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	fa00 f501 	lsl.w	r5, r0, r1
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	0c1c      	lsrs	r4, r3, #16
 8000c46:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c4a:	42a0      	cmp	r0, r4
 8000c4c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c50:	d90b      	bls.n	8000c6a <__udivmoddi4+0x1b2>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5a:	f080 8086 	bcs.w	8000d6a <__udivmoddi4+0x2b2>
 8000c5e:	42a0      	cmp	r0, r4
 8000c60:	f240 8083 	bls.w	8000d6a <__udivmoddi4+0x2b2>
 8000c64:	f1a8 0802 	sub.w	r8, r8, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1a24      	subs	r4, r4, r0
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c72:	fb09 4413 	mls	r4, r9, r3, r4
 8000c76:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c7a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8a:	d26a      	bcs.n	8000d62 <__udivmoddi4+0x2aa>
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d968      	bls.n	8000d62 <__udivmoddi4+0x2aa>
 8000c90:	3b02      	subs	r3, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c98:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	46c8      	mov	r8, r9
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d067      	beq.n	8000d7e <__udivmoddi4+0x2c6>
 8000cae:	ebb5 0308 	subs.w	r3, r5, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	40cb      	lsrs	r3, r1
 8000cb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbc:	431f      	orrs	r7, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	f1c3 0020 	rsb	r0, r3, #32
 8000cd0:	40c1      	lsrs	r1, r0
 8000cd2:	409d      	lsls	r5, r3
 8000cd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	4328      	orrs	r0, r5
 8000cde:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce2:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	0c02      	lsrs	r2, r0, #16
 8000cec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf0:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf4:	4291      	cmp	r1, r2
 8000cf6:	fa04 f403 	lsl.w	r4, r4, r3
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x256>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d22f      	bcs.n	8000d66 <__udivmoddi4+0x2ae>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d92d      	bls.n	8000d66 <__udivmoddi4+0x2ae>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	fbb2 f1f7 	udiv	r1, r2, r7
 8000d14:	fb07 2211 	mls	r2, r7, r1, r2
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d1e:	fb01 f20e 	mul.w	r2, r1, lr
 8000d22:	4282      	cmp	r2, r0
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x280>
 8000d26:	eb1c 0000 	adds.w	r0, ip, r0
 8000d2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d2e:	d216      	bcs.n	8000d5e <__udivmoddi4+0x2a6>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	d914      	bls.n	8000d5e <__udivmoddi4+0x2a6>
 8000d34:	3902      	subs	r1, #2
 8000d36:	4460      	add	r0, ip
 8000d38:	1a80      	subs	r0, r0, r2
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4631      	mov	r1, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d46:	4671      	mov	r1, lr
 8000d48:	e6e9      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	e6fe      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d4e:	454d      	cmp	r5, r9
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb9 0802 	subs.w	r8, r9, r2
 8000d56:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a5      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	e7ea      	b.n	8000d38 <__udivmoddi4+0x280>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e796      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d66:	4645      	mov	r5, r8
 8000d68:	e7d1      	b.n	8000d0e <__udivmoddi4+0x256>
 8000d6a:	46d0      	mov	r8, sl
 8000d6c:	e77d      	b.n	8000c6a <__udivmoddi4+0x1b2>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e749      	b.n	8000c08 <__udivmoddi4+0x150>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e731      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xdc>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	e6ed      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <SX1278_hw_SetNSS>:


#include "gpio.h"


__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6958      	ldr	r0, [r3, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	b299      	uxth	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	f001 fab6 	bl	800231a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <SX1278_hw_init>:

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ffe1 	bl	8000d88 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6858      	ldr	r0, [r3, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f001 faa1 	bl	800231a <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <SX1278_hw_DelayMs>:
__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 fff3 	bl	8001dd4 <HAL_Delay>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <SX1278_hw_Reset>:


__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000dfe:	2101      	movs	r1, #1
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffc1 	bl	8000d88 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6858      	ldr	r0, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	f001 fa81 	bl	800231a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff ffe1 	bl	8000de0 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6858      	ldr	r0, [r3, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f001 fa75 	bl	800231a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f7ff ffd5 	bl	8000de0 <SX1278_hw_DelayMs>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <SX1278_hw_SPICommand>:


__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff9b 	bl	8000d88 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6998      	ldr	r0, [r3, #24]
 8000e56:	1cf9      	adds	r1, r7, #3
 8000e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f001 ff09 	bl	8002c74 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
 8000e62:	bf00      	nop
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 f9f6 	bl	800325a <HAL_SPI_GetState>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d1f7      	bne.n	8000e64 <SX1278_hw_SPICommand+0x26>
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af02      	add	r7, sp, #8
 8000e84:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff79 	bl	8000d88 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6998      	ldr	r0, [r3, #24]
 8000e9a:	f107 020e 	add.w	r2, r7, #14
 8000e9e:	f107 010f 	add.w	r1, r7, #15
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f002 f826 	bl	8002efa <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
 8000eae:	bf00      	nop
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 f9d0 	bl	800325a <HAL_SPI_GetState>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d1f7      	bne.n	8000eb0 <SX1278_hw_SPIReadByte+0x32>
	return rxByte;
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f001 fa04 	bl	80022ec <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a34      	ldr	r2, [pc, #208]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a2e      	ldr	r2, [pc, #184]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <MX_GPIO_Init+0xec>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]



	/*cau hinh nut nhan chan so pc13*/
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MODE_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0xf0>)
 8000f6a:	f001 f83b 	bl	8001fe4 <HAL_GPIO_Init>

	/*cau hinh chan cs va chan led la output*/

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 8000f6e:	2330      	movs	r3, #48	; 0x30
 8000f70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	4819      	ldr	r0, [pc, #100]	; (8000fec <MX_GPIO_Init+0xf4>)
 8000f86:	f001 f82d 	bl	8001fe4 <HAL_GPIO_Init>


	/*cau hinh chan D0 la chan input*/

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <MX_GPIO_Init+0xf8>)
 8000f9e:	f001 f821 	bl	8001fe4 <HAL_GPIO_Init>


	/*cau hinh chan reset la chan output*/

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <MX_GPIO_Init+0xf8>)
 8000fba:	f001 f813 	bl	8001fe4 <HAL_GPIO_Init>


	/*dat chan cs cua stm32 len muc cao*/
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <MX_GPIO_Init+0xf4>)
 8000fc4:	f001 f9a9 	bl	800231a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_GPIO_Init+0xf4>)
 8000fce:	f001 f9a4 	bl	800231a <HAL_GPIO_WritePin>


	/*dat chan reset len muc cao*/
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_GPIO_Init+0xf8>)
 8000fd8:	f001 f99f 	bl	800231a <HAL_GPIO_WritePin>



}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0a0      	sub	sp, #128	; 0x80
 8000ffc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fe87 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f89b 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f7ff ff77 	bl	8000ef8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800100a:	f000 f8dd 	bl	80011c8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800100e:	f000 f911 	bl	8001234 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initUART1();
 8001012:	f000 f93f 	bl	8001294 <initUART1>
  char buf[100];
  HAL_Delay(5000);
 8001016:	f241 3088 	movw	r0, #5000	; 0x1388
 800101a:	f000 fedb 	bl	8001dd4 <HAL_Delay>
  //SendKyTu(buf, "Mode slave");



  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <main+0x118>)
 8001020:	4a3c      	ldr	r2, [pc, #240]	; (8001114 <main+0x11c>)
 8001022:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <main+0x118>)
 8001026:	2201      	movs	r2, #1
 8001028:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <main+0x118>)
 800102c:	4a3a      	ldr	r2, [pc, #232]	; (8001118 <main+0x120>)
 800102e:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001030:	4b37      	ldr	r3, [pc, #220]	; (8001110 <main+0x118>)
 8001032:	2210      	movs	r2, #16
 8001034:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <main+0x118>)
 8001038:	4a36      	ldr	r2, [pc, #216]	; (8001114 <main+0x11c>)
 800103a:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <main+0x118>)
 800103e:	2202      	movs	r2, #2
 8001040:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi2;
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <main+0x118>)
 8001044:	4a35      	ldr	r2, [pc, #212]	; (800111c <main+0x124>)
 8001046:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <main+0x128>)
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <main+0x118>)
 800104c:	601a      	str	r2, [r3, #0]


  SendKyTu(buf, "configuring lora module");
 800104e:	463b      	mov	r3, r7
 8001050:	4934      	ldr	r1, [pc, #208]	; (8001124 <main+0x12c>)
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f962 	bl	800131c <SendKyTu>
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8001058:	230a      	movs	r3, #10
 800105a:	9305      	str	r3, [sp, #20]
 800105c:	2300      	movs	r3, #0
 800105e:	9304      	str	r3, [sp, #16]
 8001060:	2300      	movs	r3, #0
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	2307      	movs	r3, #7
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	a325      	add	r3, pc, #148	; (adr r3, 8001108 <main+0x110>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	482a      	ldr	r0, [pc, #168]	; (8001120 <main+0x128>)
 8001078:	f000 fd0b 	bl	8001a92 <SX1278_init>
  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

  HAL_Delay(3000);
 800107c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001080:	f000 fea8 	bl	8001dd4 <HAL_Delay>

  SendKyTu(buf, "done configure lora");
 8001084:	463b      	mov	r3, r7
 8001086:	4928      	ldr	r1, [pc, #160]	; (8001128 <main+0x130>)
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f947 	bl	800131c <SendKyTu>

  recv.ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 800108e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001092:	2110      	movs	r1, #16
 8001094:	4822      	ldr	r0, [pc, #136]	; (8001120 <main+0x128>)
 8001096:	f000 fc53 	bl	8001940 <SX1278_LoRaEntryRx>
 800109a:	4603      	mov	r3, r0
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <main+0x134>)
 800109e:	6053      	str	r3, [r2, #4]

  const char p='p';
 80010a0:	2370      	movs	r3, #112	; 0x70
 80010a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  const char y='y';
 80010a6:	2379      	movs	r3, #121	; 0x79
 80010a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  const char r='r';
 80010ac:	2372      	movs	r3, #114	; 0x72
 80010ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //SendKyTu(buf, "Slaveing....");
	  HAL_Delay(800);
 80010b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80010b6:	f000 fe8d 	bl	8001dd4 <HAL_Delay>
	  //SendKyTu(buf, "receving package...");
	  recv.ret = SX1278_LoRaRxPacket(&SX1278);
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <main+0x128>)
 80010bc:	f000 fca5 	bl	8001a0a <SX1278_LoRaRxPacket>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <main+0x134>)
 80010c6:	605a      	str	r2, [r3, #4]

	  //sendNumberAndChu(buf, "received: ", recv.ret);

	  if(recv.ret>0)
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <main+0x134>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	ddf0      	ble.n	80010b2 <main+0xba>
	  {
		  SX1278_read(&SX1278, (uint8_t*) recv.buffer, recv.ret);
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <main+0x134>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	4915      	ldr	r1, [pc, #84]	; (8001130 <main+0x138>)
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <main+0x128>)
 80010dc:	f000 fd06 	bl	8001aec <SX1278_read>
		  sprintf(buf,"%s\n",recv.buffer);
 80010e0:	463b      	mov	r3, r7
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <main+0x138>)
 80010e4:	4913      	ldr	r1, [pc, #76]	; (8001134 <main+0x13c>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 f85a 	bl	80041a0 <siprintf>
		  HAL_UART_Transmit(&huart1, buf, strlen(buf), HAL_MAX_DELAY);
 80010ec:	463b      	mov	r3, r7
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f82e 	bl	8000150 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4639      	mov	r1, r7
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <main+0x140>)
 8001100:	f002 f9ae 	bl	8003460 <HAL_UART_Transmit>
	  HAL_Delay(800);
 8001104:	e7d5      	b.n	80010b2 <main+0xba>
 8001106:	bf00      	nop
 8001108:	19de5080 	.word	0x19de5080
 800110c:	00000000 	.word	0x00000000
 8001110:	20000294 	.word	0x20000294
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40010800 	.word	0x40010800
 800111c:	200001f4 	.word	0x200001f4
 8001120:	200002b0 	.word	0x200002b0
 8001124:	08006450 	.word	0x08006450
 8001128:	08006468 	.word	0x08006468
 800112c:	200003c8 	.word	0x200003c8
 8001130:	200003e8 	.word	0x200003e8
 8001134:	0800647c 	.word	0x0800647c
 8001138:	2000024c 	.word	0x2000024c

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b090      	sub	sp, #64	; 0x40
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	2228      	movs	r2, #40	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f88b 	bl	8004266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001166:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800117a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f001 f8e1 	bl	800234c <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001190:	f000 f87a 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fb4e 	bl	8002850 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011ba:	f000 f865 	bl	8001288 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3740      	adds	r7, #64	; 0x40
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_SPI2_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_SPI2_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI2_Init+0x64>)
 80011d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI2_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_SPI2_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI2_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI2_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI2_Init+0x64>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI2_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_SPI2_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI2_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_SPI2_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI2_Init+0x64>)
 8001214:	220a      	movs	r2, #10
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_SPI2_Init+0x64>)
 800121a:	f001 fca7 	bl	8002b6c <HAL_SPI_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001224:	f000 f830 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001f4 	.word	0x200001f4
 8001230:	40003800 	.word	0x40003800

08001234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART1_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800126c:	f002 f8a8 	bl	80033c0 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f000 f807 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000024c 	.word	0x2000024c
 8001284:	40013800 	.word	0x40013800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <initUART1>:
#include "send.h"

void initUART1(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <initUART1+0x44>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <initUART1+0x44>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a2:	f043 0305 	orr.w	r3, r3, #5
 80012a6:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_ALT9|GPIO_CRH_INPUT10;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <initUART1+0x48>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <initUART1+0x48>)
 80012ae:	f443 630b 	orr.w	r3, r3, #2224	; 0x8b0
 80012b2:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR10;  //pull-up PA10
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <initUART1+0x48>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <initUART1+0x48>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	60d3      	str	r3, [r2, #12]
	USART1->CR1 = USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <initUART1+0x4c>)
 80012c2:	f242 020c 	movw	r2, #8204	; 0x200c
 80012c6:	60da      	str	r2, [r3, #12]
	USART1->BRR = 625;	 // 72MHz/9600bps = 7500
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <initUART1+0x4c>)
 80012ca:	f240 2271 	movw	r2, #625	; 0x271
 80012ce:	609a      	str	r2, [r3, #8]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40013800 	.word	0x40013800

080012e4 <usart1_sendByte>:
	// khong anh xa lai ma pin CHO TIM2 
	AFIO->MAPR |= AFIO_MAPR_TIM2_REMAP_NOREMAP;
	
}
void usart1_sendByte(unsigned char c)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	USART1->DR = c;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <usart1_sendByte+0x34>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	6053      	str	r3, [r2, #4]
	
	while((USART1->SR&(1<<6)) == 0);  //wait until the TC flag is set 
 80012f4:	bf00      	nop
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <usart1_sendByte+0x34>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f9      	beq.n	80012f6 <usart1_sendByte+0x12>
	USART1->SR &= ~(1<<6);
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <usart1_sendByte+0x34>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <usart1_sendByte+0x34>)
 8001308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800130c:	6013      	str	r3, [r2, #0]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40013800 	.word	0x40013800

0800131c <SendKyTu>:

void SendKyTu(const char str[100],char str2[])
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	sprintf(str,"%s ",str2);
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <SendKyTu+0x48>)
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f002 ff38 	bl	80041a0 <siprintf>
	int j=0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
	while(str[j] != '\0')
 8001334:	e009      	b.n	800134a <SendKyTu+0x2e>
	{
		usart1_sendByte(str[j]);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ffd0 	bl	80012e4 <usart1_sendByte>
		j++;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
	while(str[j] != '\0')
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ef      	bne.n	8001336 <SendKyTu+0x1a>
	}
	usart1_sendByte('\n');
 8001356:	200a      	movs	r0, #10
 8001358:	f7ff ffc4 	bl	80012e4 <usart1_sendByte>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	08006480 	.word	0x08006480

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_MspInit+0x5c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_MspInit+0x5c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_MspInit+0x60>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_MspInit+0x60>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000

080013cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_SPI_MspInit+0x8c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d131      	bne.n	8001450 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_SPI_MspInit+0x90>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <HAL_SPI_MspInit+0x90>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_SPI_MspInit+0x90>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_SPI_MspInit+0x90>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_SPI_MspInit+0x90>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_SPI_MspInit+0x90>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800141c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <HAL_SPI_MspInit+0x94>)
 8001432:	f000 fdd7 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001436:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_SPI_MspInit+0x94>)
 800144c:	f000 fdca 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40003800 	.word	0x40003800
 800145c:	40021000 	.word	0x40021000
 8001460:	40010c00 	.word	0x40010c00

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <HAL_UART_MspInit+0x8c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d131      	bne.n	80014e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_UART_MspInit+0x90>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_UART_MspInit+0x90>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_UART_MspInit+0x90>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_UART_MspInit+0x90>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_UART_MspInit+0x90>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_UART_MspInit+0x90>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <HAL_UART_MspInit+0x94>)
 80014ca:	f000 fd8b 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_MspInit+0x94>)
 80014e4:	f000 fd7e 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010800 	.word	0x40010800

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 fc2b 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include "sx1278.h"
#include <string.h>
uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc6d 	bl	8000e3e <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fc88 	bl	8000e7e <SX1278_hw_SPIReadByte>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2101      	movs	r1, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc05 	bl	8000d88 <SX1278_hw_SetNSS>
	return tmp;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <SX1278_SPIWrite>:


void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
 8001594:	4613      	mov	r3, r2
 8001596:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fbf2 	bl	8000d88 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7ff fc43 	bl	8000e3e <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	78ba      	ldrb	r2, [r7, #2]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc3c 	bl	8000e3e <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbdb 	bl	8000d88 <SX1278_hw_SetNSS>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <SX1278_SPIBurstRead>:


void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80015da:	b590      	push	{r4, r7, lr}
 80015dc:	b087      	sub	sp, #28
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	72fb      	strb	r3, [r7, #11]
 80015ea:	4613      	mov	r3, r2
 80015ec:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80015ee:	7abb      	ldrb	r3, [r7, #10]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d927      	bls.n	8001644 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbc4 	bl	8000d88 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	7afa      	ldrb	r2, [r7, #11]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc18 	bl	8000e3e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
 8001612:	e00c      	b.n	800162e <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	18d4      	adds	r4, r2, r3
 800161e:	4608      	mov	r0, r1
 8001620:	f7ff fc2d 	bl	8000e7e <SX1278_hw_SPIReadByte>
 8001624:	4603      	mov	r3, r0
 8001626:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	3301      	adds	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
 800162e:	7dfa      	ldrb	r2, [r7, #23]
 8001630:	7abb      	ldrb	r3, [r7, #10]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3ee      	bcc.n	8001614 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fba3 	bl	8000d88 <SX1278_hw_SetNSS>
 8001642:	e000      	b.n	8001646 <SX1278_SPIBurstRead+0x6c>
		return;
 8001644:	bf00      	nop
	}
}
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}

0800164c <SX1278_SPIBurstWrite>:


void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	460b      	mov	r3, r1
 800165a:	72fb      	strb	r3, [r7, #11]
 800165c:	4613      	mov	r3, r2
 800165e:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001660:	7abb      	ldrb	r3, [r7, #10]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d929      	bls.n	80016ba <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb8b 	bl	8000d88 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	7afb      	ldrb	r3, [r7, #11]
 8001678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4619      	mov	r1, r3
 8001680:	4610      	mov	r0, r2
 8001682:	f7ff fbdc 	bl	8000e3e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
 800168a:	e00b      	b.n	80016a4 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff fbd0 	bl	8000e3e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	3301      	adds	r3, #1
 80016a2:	75fb      	strb	r3, [r7, #23]
 80016a4:	7dfa      	ldrb	r2, [r7, #23]
 80016a6:	7abb      	ldrb	r3, [r7, #10]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3ef      	bcc.n	800168c <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb68 	bl	8000d88 <SX1278_hw_SetNSS>
 80016b8:	e000      	b.n	80016bc <SX1278_SPIBurstWrite+0x70>
		return;
 80016ba:	bf00      	nop
	}
}
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <SX1278_config>:


void SX1278_config(SX1278_t *module) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f90d 	bl	80018ec <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f7ff fb84 	bl	8000de0 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f917 	bl	800190c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	04d9      	lsls	r1, r3, #19
 80016ee:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80016f2:	04d0      	lsls	r0, r2, #19
 80016f4:	4a6f      	ldr	r2, [pc, #444]	; (80018b4 <SX1278_config+0x1f0>)
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	f7ff f9c5 	bl	8000a88 <__aeabi_uldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8001706:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	0c02      	lsrs	r2, r0, #16
 8001714:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001718:	0c0b      	lsrs	r3, r1, #16
 800171a:	b2d3      	uxtb	r3, r2
 800171c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800171e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	0a02      	lsrs	r2, r0, #8
 800172c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001730:	0a0b      	lsrs	r3, r1, #8
 8001732:	b2d3      	uxtb	r3, r2
 8001734:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8001736:	7c3b      	ldrb	r3, [r7, #16]
 8001738:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800173a:	f107 020c 	add.w	r2, r7, #12
 800173e:	2303      	movs	r3, #3
 8001740:	2106      	movs	r1, #6
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff82 	bl	800164c <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001748:	2234      	movs	r2, #52	; 0x34
 800174a:	2139      	movs	r1, #57	; 0x39
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff1b 	bl	8001588 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7c1b      	ldrb	r3, [r3, #16]
 8001756:	461a      	mov	r2, r3
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <SX1278_config+0x1f4>)
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	461a      	mov	r2, r3
 800175e:	2109      	movs	r1, #9
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff11 	bl	8001588 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001766:	220b      	movs	r2, #11
 8001768:	210b      	movs	r1, #11
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff0c 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001770:	2223      	movs	r2, #35	; 0x23
 8001772:	210c      	movs	r1, #12
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff07 	bl	8001588 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7c5b      	ldrb	r3, [r3, #17]
 800177e:	461a      	mov	r2, r3
 8001780:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <SX1278_config+0x1f8>)
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	2b06      	cmp	r3, #6
 8001786:	d147      	bne.n	8001818 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7c9b      	ldrb	r3, [r3, #18]
 800178c:	461a      	mov	r2, r3
 800178e:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <SX1278_config+0x1fc>)
 8001790:	5c9b      	ldrb	r3, [r3, r2]
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7cdb      	ldrb	r3, [r3, #19]
 800179a:	4619      	mov	r1, r3
 800179c:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <SX1278_config+0x200>)
 800179e:	5c5b      	ldrb	r3, [r3, r1]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	211d      	movs	r1, #29
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fee9 	bl	8001588 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7c5b      	ldrb	r3, [r3, #17]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <SX1278_config+0x1f8>)
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7d1b      	ldrb	r3, [r3, #20]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <SX1278_config+0x204>)
 80017cc:	5c5b      	ldrb	r3, [r3, r1]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80017d6:	3303      	adds	r3, #3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	211e      	movs	r1, #30
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fed2 	bl	8001588 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80017e4:	2131      	movs	r1, #49	; 0x31
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff feaf 	bl	800154a <SX1278_SPIRead>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f043 0305 	orr.w	r3, r3, #5
 80017fe:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	461a      	mov	r2, r3
 8001804:	2131      	movs	r1, #49	; 0x31
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff febe 	bl	8001588 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800180c:	220c      	movs	r2, #12
 800180e:	2137      	movs	r1, #55	; 0x37
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff feb9 	bl	8001588 <SX1278_SPIWrite>
 8001816:	e029      	b.n	800186c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7c9b      	ldrb	r3, [r3, #18]
 800181c:	461a      	mov	r2, r3
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <SX1278_config+0x1fc>)
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7cdb      	ldrb	r3, [r3, #19]
 800182a:	4619      	mov	r1, r3
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <SX1278_config+0x200>)
 800182e:	5c5b      	ldrb	r3, [r3, r1]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001834:	4413      	add	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	211d      	movs	r1, #29
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fea3 	bl	8001588 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7c5b      	ldrb	r3, [r3, #17]
 8001846:	461a      	mov	r2, r3
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <SX1278_config+0x1f8>)
 800184a:	5c9b      	ldrb	r3, [r3, r2]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7d1b      	ldrb	r3, [r3, #20]
 8001854:	4619      	mov	r1, r3
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <SX1278_config+0x204>)
 8001858:	5c5b      	ldrb	r3, [r3, r1]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	211e      	movs	r1, #30
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fe8e 	bl	8001588 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800186c:	2204      	movs	r2, #4
 800186e:	2126      	movs	r1, #38	; 0x26
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fe89 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001876:	2208      	movs	r2, #8
 8001878:	211f      	movs	r1, #31
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fe84 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001880:	2200      	movs	r2, #0
 8001882:	2120      	movs	r1, #32
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fe7f 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800188a:	2208      	movs	r2, #8
 800188c:	2121      	movs	r1, #33	; 0x21
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fe7a 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001894:	2201      	movs	r2, #1
 8001896:	2141      	movs	r1, #65	; 0x41
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fe75 	bl	8001588 <SX1278_SPIWrite>
	module->readBytes = 0;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f810 	bl	80018cc <SX1278_standby>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	01e84800 	.word	0x01e84800
 80018b8:	080064a8 	.word	0x080064a8
 80018bc:	080064ac 	.word	0x080064ac
 80018c0:	080064b4 	.word	0x080064b4
 80018c4:	080064c0 	.word	0x080064c0
 80018c8:	080064c4 	.word	0x080064c4

080018cc <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80018d4:	2209      	movs	r2, #9
 80018d6:	2101      	movs	r1, #1
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fe55 	bl	8001588 <SX1278_SPIWrite>
	module->status = STANDBY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	759a      	strb	r2, [r3, #22]
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80018f4:	2208      	movs	r2, #8
 80018f6:	2101      	movs	r1, #1
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fe45 	bl	8001588 <SX1278_SPIWrite>
	module->status = SLEEP;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	759a      	strb	r2, [r3, #22]
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001914:	2288      	movs	r2, #136	; 0x88
 8001916:	2101      	movs	r1, #1
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fe35 	bl	8001588 <SX1278_SPIWrite>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	2112      	movs	r1, #18
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fe28 	bl	8001588 <SX1278_SPIWrite>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <SX1278_LoRaEntryRx>:


int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	460b      	mov	r3, r1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	7afa      	ldrb	r2, [r7, #11]
 8001952:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff feb5 	bl	80016c4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800195a:	2284      	movs	r2, #132	; 0x84
 800195c:	214d      	movs	r1, #77	; 0x4d
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff fe12 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001964:	22ff      	movs	r2, #255	; 0xff
 8001966:	2124      	movs	r1, #36	; 0x24
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fe0d 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800196e:	2201      	movs	r2, #1
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f7ff fe08 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	2111      	movs	r1, #17
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fe03 	bl	8001588 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff ffcf 	bl	8001926 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	461a      	mov	r2, r3
 800198c:	2122      	movs	r1, #34	; 0x22
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff fdfa 	bl	8001588 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001994:	210f      	movs	r1, #15
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff fdd7 	bl	800154a <SX1278_SPIRead>
 800199c:	4603      	mov	r3, r0
 800199e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	461a      	mov	r2, r3
 80019a4:	210d      	movs	r1, #13
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff fdee 	bl	8001588 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80019ac:	228d      	movs	r2, #141	; 0x8d
 80019ae:	2101      	movs	r1, #1
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fde9 	bl	8001588 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80019be:	2118      	movs	r1, #24
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fdc2 	bl	800154a <SX1278_SPIRead>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d104      	bne.n	80019da <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2203      	movs	r2, #3
 80019d4:	759a      	strb	r2, [r3, #22]
			return 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e013      	b.n	8001a02 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3b01      	subs	r3, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fa03 	bl	8000df6 <SX1278_hw_Reset>
			SX1278_config(module);
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff fe67 	bl	80016c4 <SX1278_config>
			return 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e003      	b.n	8001a02 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff f9f0 	bl	8000de0 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001a00:	e7dd      	b.n	80019be <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fa57 	bl	8000eca <SX1278_hw_GetDIO0>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d030      	beq.n	8001a84 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3317      	adds	r3, #23
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fc1a 	bl	8004266 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8001a32:	2110      	movs	r1, #16
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fd88 	bl	800154a <SX1278_SPIRead>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	461a      	mov	r2, r3
 8001a42:	210d      	movs	r1, #13
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fd9f 	bl	8001588 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7c5b      	ldrb	r3, [r3, #17]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7d5b      	ldrb	r3, [r3, #21]
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e005      	b.n	8001a66 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001a5a:	2113      	movs	r1, #19
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fd74 	bl	800154a <SX1278_SPIRead>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f103 0217 	add.w	r2, r3, #23
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fdb2 	bl	80015da <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff51 	bl	8001926 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <SX1278_init>:
}


void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f987 	bl	8000db6 <SX1278_hw_init>
	module->frequency = frequency;
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aae:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	7e3a      	ldrb	r2, [r7, #24]
 8001ab6:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	7f3a      	ldrb	r2, [r7, #28]
 8001abc:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ac4:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001acc:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ad4:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001adc:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff fdf0 	bl	80016c4 <SX1278_config>
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <SX1278_read>:
uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}


uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d003      	beq.n	8001b0e <SX1278_read+0x22>
		length = module->readBytes;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001b0c:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3317      	adds	r3, #23
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	f002 fc33 	bl	8004382 <memcpy>
	rxBuf[length] = '\0';
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <_kill>:

int _kill(int pid, int sig)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b50:	f002 fbdc 	bl	800430c <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2216      	movs	r2, #22
 8001b58:	601a      	str	r2, [r3, #0]
  return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_exit>:

void _exit (int status)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffe7 	bl	8001b46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b78:	e7fe      	b.n	8001b78 <_exit+0x12>

08001b7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e00a      	b.n	8001ba2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8c:	f3af 8000 	nop.w
 8001b90:	4601      	mov	r1, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	60ba      	str	r2, [r7, #8]
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf0      	blt.n	8001b8c <_read+0x12>
  }

  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e009      	b.n	8001bda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbf1      	blt.n	8001bc6 <_write+0x12>
  }
  return len;
 8001be2:	687b      	ldr	r3, [r7, #4]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_close>:

int _close(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <_isatty>:

int _isatty(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f002 fb46 	bl	800430c <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20005000 	.word	0x20005000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200005e8 	.word	0x200005e8
 8001cb4:	20000740 	.word	0x20000740

08001cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc4:	f7ff fff8 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cca:	490c      	ldr	r1, [pc, #48]	; (8001cfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ce0:	4c09      	ldr	r4, [pc, #36]	; (8001d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cee:	f002 fb13 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf2:	f7ff f981 	bl	8000ff8 <main>
  bx lr
 8001cf6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d00:	08006874 	.word	0x08006874
  ldr r2, =_sbss
 8001d04:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d08:	2000073c 	.word	0x2000073c

08001d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_2_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x28>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f92b 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fb1c 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f935 	bl	8001fca <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 f90b 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000004 	.word	0x20000004

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_IncTick+0x20>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_IncTick+0x20>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	200005ec 	.word	0x200005ec

08001dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_GetTick+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	200005ec 	.word	0x200005ec

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffe0 	bl	8001dc0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff90 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff49 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff5e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb0 	bl	8001f38 <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	e169      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8158 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a9a      	ldr	r2, [pc, #616]	; (8002284 <HAL_GPIO_Init+0x2a0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d05e      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002020:	4a98      	ldr	r2, [pc, #608]	; (8002284 <HAL_GPIO_Init+0x2a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d875      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002026:	4a98      	ldr	r2, [pc, #608]	; (8002288 <HAL_GPIO_Init+0x2a4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d058      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 800202c:	4a96      	ldr	r2, [pc, #600]	; (8002288 <HAL_GPIO_Init+0x2a4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d86f      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002032:	4a96      	ldr	r2, [pc, #600]	; (800228c <HAL_GPIO_Init+0x2a8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d052      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002038:	4a94      	ldr	r2, [pc, #592]	; (800228c <HAL_GPIO_Init+0x2a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d869      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800203e:	4a94      	ldr	r2, [pc, #592]	; (8002290 <HAL_GPIO_Init+0x2ac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04c      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002044:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_GPIO_Init+0x2ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d863      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800204a:	4a92      	ldr	r2, [pc, #584]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d046      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002050:	4a90      	ldr	r2, [pc, #576]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d85d      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002056:	2b12      	cmp	r3, #18
 8002058:	d82a      	bhi.n	80020b0 <HAL_GPIO_Init+0xcc>
 800205a:	2b12      	cmp	r3, #18
 800205c:	d859      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <HAL_GPIO_Init+0x80>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	080020df 	.word	0x080020df
 8002068:	080020b9 	.word	0x080020b9
 800206c:	080020cb 	.word	0x080020cb
 8002070:	0800210d 	.word	0x0800210d
 8002074:	08002113 	.word	0x08002113
 8002078:	08002113 	.word	0x08002113
 800207c:	08002113 	.word	0x08002113
 8002080:	08002113 	.word	0x08002113
 8002084:	08002113 	.word	0x08002113
 8002088:	08002113 	.word	0x08002113
 800208c:	08002113 	.word	0x08002113
 8002090:	08002113 	.word	0x08002113
 8002094:	08002113 	.word	0x08002113
 8002098:	08002113 	.word	0x08002113
 800209c:	08002113 	.word	0x08002113
 80020a0:	08002113 	.word	0x08002113
 80020a4:	08002113 	.word	0x08002113
 80020a8:	080020c1 	.word	0x080020c1
 80020ac:	080020d5 	.word	0x080020d5
 80020b0:	4a79      	ldr	r2, [pc, #484]	; (8002298 <HAL_GPIO_Init+0x2b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020b6:	e02c      	b.n	8002112 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e029      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	3304      	adds	r3, #4
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e024      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	3308      	adds	r3, #8
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e01f      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	330c      	adds	r3, #12
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e01a      	b.n	8002114 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020e6:	2304      	movs	r3, #4
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e013      	b.n	8002114 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f4:	2308      	movs	r3, #8
 80020f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	611a      	str	r2, [r3, #16]
          break;
 80020fe:	e009      	b.n	8002114 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	615a      	str	r2, [r3, #20]
          break;
 800210a:	e003      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x130>
          break;
 8002112:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2bff      	cmp	r3, #255	; 0xff
 8002118:	d801      	bhi.n	800211e <HAL_GPIO_Init+0x13a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_Init+0x13e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	d802      	bhi.n	8002130 <HAL_GPIO_Init+0x14c>
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x152>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	3b08      	subs	r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	210f      	movs	r1, #15
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	431a      	orrs	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80b1 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002164:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_GPIO_Init+0x2b8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800217c:	4a48      	ldr	r2, [pc, #288]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <HAL_GPIO_Init+0x2c0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_GPIO_Init+0x1ec>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_GPIO_Init+0x2c4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00d      	beq.n	80021cc <HAL_GPIO_Init+0x1e8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3e      	ldr	r2, [pc, #248]	; (80022ac <HAL_GPIO_Init+0x2c8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0x1e4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <HAL_GPIO_Init+0x2cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_GPIO_Init+0x1e0>
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021d0:	2300      	movs	r3, #0
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021e2:	492f      	ldr	r1, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	492c      	ldr	r1, [pc, #176]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002214:	4013      	ands	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4922      	ldr	r1, [pc, #136]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	491e      	ldr	r1, [pc, #120]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800223c:	4013      	ands	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4918      	ldr	r1, [pc, #96]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4914      	ldr	r1, [pc, #80]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d021      	beq.n	80022b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e021      	b.n	80022c6 <HAL_GPIO_Init+0x2e2>
 8002282:	bf00      	nop
 8002284:	10320000 	.word	0x10320000
 8002288:	10310000 	.word	0x10310000
 800228c:	10220000 	.word	0x10220000
 8002290:	10210000 	.word	0x10210000
 8002294:	10120000 	.word	0x10120000
 8002298:	10110000 	.word	0x10110000
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	3301      	adds	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f ae8e 	bne.w	8001ff8 <HAL_GPIO_Init+0x14>
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	372c      	adds	r7, #44	; 0x2c
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e001      	b.n	800230e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]
 8002326:	4613      	mov	r3, r2
 8002328:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800232a:	787b      	ldrb	r3, [r7, #1]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002336:	e003      	b.n	8002340 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
	...

0800234c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e272      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00c      	beq.n	8002392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002378:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d112      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
 8002384:	4b8c      	ldr	r3, [pc, #560]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d10b      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06c      	beq.n	8002478 <HAL_RCC_OscConfig+0x12c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d168      	bne.n	8002478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e24c      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x76>
 80023b4:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a7f      	ldr	r2, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x98>
 80023ca:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7a      	ldr	r2, [pc, #488]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b78      	ldr	r3, [pc, #480]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a77      	ldr	r2, [pc, #476]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xbc>
 80023ee:	4b72      	ldr	r3, [pc, #456]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a71      	ldr	r2, [pc, #452]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 8002408:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6a      	ldr	r2, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fcca 	bl	8001dc0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff fcc6 	bl	8001dc0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e200      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe4>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fcb6 	bl	8001dc0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fcb2 	bl	8001dc0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1ec      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x10c>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d063      	beq.n	800254e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002492:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x18c>
 800249e:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x176>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1c0      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4939      	ldr	r1, [pc, #228]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e03a      	b.n	800254e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff fc6b 	bl	8001dc0 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7ff fc67 	bl	8001dc0 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1a1      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4927      	ldr	r1, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e015      	b.n	800254e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fc4a 	bl	8001dc0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff fc46 	bl	8001dc0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e180      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03a      	beq.n	80025d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d019      	beq.n	8002596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7ff fc2a 	bl	8001dc0 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7ff fc26 	bl	8001dc0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e160      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f000 face 	bl	8002b30 <RCC_Delay>
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fc10 	bl	8001dc0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a2:	e00f      	b.n	80025c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fc0c 	bl	8001dc0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d908      	bls.n	80025c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e146      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	42420000 	.word	0x42420000
 80025c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b92      	ldr	r3, [pc, #584]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e9      	bne.n	80025a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a6 	beq.w	800272a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a87      	ldr	r2, [pc, #540]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b82      	ldr	r3, [pc, #520]	; (8002814 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b7f      	ldr	r3, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0x4c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a7e      	ldr	r2, [pc, #504]	; (8002814 <HAL_RCC_OscConfig+0x4c8>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7ff fbcd 	bl	8001dc0 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7ff fbc9 	bl	8001dc0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	; 0x64
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e103      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	4b75      	ldr	r3, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x4c8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x312>
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e02d      	b.n	80026ba <HAL_RCC_OscConfig+0x36e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x334>
 8002666:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	e01c      	b.n	80026ba <HAL_RCC_OscConfig+0x36e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x356>
 8002688:	4b61      	ldr	r3, [pc, #388]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a60      	ldr	r2, [pc, #384]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a5d      	ldr	r2, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x36e>
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4a57      	ldr	r2, [pc, #348]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d015      	beq.n	80026ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7ff fb7d 	bl	8001dc0 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff fb79 	bl	8001dc0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0b1      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ee      	beq.n	80026ca <HAL_RCC_OscConfig+0x37e>
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7ff fb67 	bl	8001dc0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7ff fb63 	bl	8001dc0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e09b      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a3b      	ldr	r2, [pc, #236]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8087 	beq.w	8002842 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d061      	beq.n	8002804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d146      	bne.n	80027d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <HAL_RCC_OscConfig+0x4cc>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7ff fb37 	bl	8001dc0 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff fb33 	bl	8001dc0 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e06d      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d108      	bne.n	8002790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4921      	ldr	r1, [pc, #132]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a19      	ldr	r1, [r3, #32]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	430b      	orrs	r3, r1
 80027a2:	491b      	ldr	r1, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fb07 	bl	8001dc0 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff fb03 	bl	8001dc0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e03d      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x46a>
 80027d4:	e035      	b.n	8002842 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_RCC_OscConfig+0x4cc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff faf0 	bl	8001dc0 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7ff faec 	bl	8001dc0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e026      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x498>
 8002802:	e01e      	b.n	8002842 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e019      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
 8002818:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x500>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	429a      	cmp	r2, r3
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0d0      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d910      	bls.n	8002894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4965      	ldr	r1, [pc, #404]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d040      	beq.n	8002970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d115      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e073      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06b      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4936      	ldr	r1, [pc, #216]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7ff fa3e 	bl	8001dc0 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7ff fa3a 	bl	8001dc0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e053      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d210      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4922      	ldr	r1, [pc, #136]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1cc>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1d0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f99c 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	080064c8 	.word	0x080064c8
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x36>
 8002a52:	e027      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e027      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0c9b      	lsrs	r3, r3, #18
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0c5b      	lsrs	r3, r3, #17
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a86:	fb03 f202 	mul.w	r2, r3, r2
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e004      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	613b      	str	r3, [r7, #16]
      break;
 8002aa2:	e002      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa6:	613b      	str	r3, [r7, #16]
      break;
 8002aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aaa:	693b      	ldr	r3, [r7, #16]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	080064e0 	.word	0x080064e0
 8002ac4:	080064f0 	.word	0x080064f0
 8002ac8:	003d0900 	.word	0x003d0900

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff2 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	080064d8 	.word	0x080064d8

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	f7ff ffde 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0adb      	lsrs	r3, r3, #11
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	080064d8 	.word	0x080064d8

08002b30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <RCC_Delay+0x34>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <RCC_Delay+0x38>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0a5b      	lsrs	r3, r3, #9
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b4c:	bf00      	nop
  }
  while (Delay --);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	60fa      	str	r2, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f9      	bne.n	8002b4c <RCC_Delay+0x1c>
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000000 	.word	0x20000000
 8002b68:	10624dd3 	.word	0x10624dd3

08002b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e076      	b.n	8002c6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d009      	beq.n	8002ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
 8002b96:	e005      	b.n	8002ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fc04 	bl	80013cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	0c1a      	lsrs	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f002 0204 	and.w	r2, r2, #4
 8002c4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_SPI_Transmit+0x22>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e12d      	b.n	8002ef2 <HAL_SPI_Transmit+0x27e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c9e:	f7ff f88f 	bl	8001dc0 <HAL_GetTick>
 8002ca2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d002      	beq.n	8002cba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cb8:	e116      	b.n	8002ee8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_SPI_Transmit+0x52>
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cca:	e10d      	b.n	8002ee8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d12:	d10f      	bne.n	8002d34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d007      	beq.n	8002d52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5a:	d14f      	bne.n	8002dfc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_SPI_Transmit+0xf6>
 8002d64:	8afb      	ldrh	r3, [r7, #22]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d142      	bne.n	8002df0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	1c9a      	adds	r2, r3, #2
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d8e:	e02f      	b.n	8002df0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d112      	bne.n	8002dc4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	881a      	ldrh	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	1c9a      	adds	r2, r3, #2
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dc2:	e015      	b.n	8002df0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc4:	f7fe fffc 	bl	8001dc0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d803      	bhi.n	8002ddc <HAL_SPI_Transmit+0x168>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d102      	bne.n	8002de2 <HAL_SPI_Transmit+0x16e>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dee:	e07b      	b.n	8002ee8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ca      	bne.n	8002d90 <HAL_SPI_Transmit+0x11c>
 8002dfa:	e050      	b.n	8002e9e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_SPI_Transmit+0x196>
 8002e04:	8afb      	ldrh	r3, [r7, #22]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d144      	bne.n	8002e94 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e30:	e030      	b.n	8002e94 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d113      	bne.n	8002e68 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e66:	e015      	b.n	8002e94 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e68:	f7fe ffaa 	bl	8001dc0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d803      	bhi.n	8002e80 <HAL_SPI_Transmit+0x20c>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_Transmit+0x212>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e92:	e029      	b.n	8002ee8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1c9      	bne.n	8002e32 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa6e 	bl	8003384 <SPI_EndRxTxTransaction>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e003      	b.n	8002ee8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b08c      	sub	sp, #48	; 0x30
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x26>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e198      	b.n	8003252 <HAL_SPI_TransmitReceive+0x358>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f28:	f7fe ff4a 	bl	8001dc0 <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d00f      	beq.n	8002f6a <HAL_SPI_TransmitReceive+0x70>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f50:	d107      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x68>
 8002f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f68:	e16d      	b.n	8003246 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x82>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x82>
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f82:	e160      	b.n	8003246 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2205      	movs	r2, #5
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff4:	d17c      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x10a>
 8002ffe:	8b7b      	ldrh	r3, [r7, #26]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d16a      	bne.n	80030da <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003028:	e057      	b.n	80030da <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d11b      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x176>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x176>
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d113      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d119      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x1b8>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d014      	beq.n	80030b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	b292      	uxth	r2, r2
 8003094:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ae:	2301      	movs	r3, #1
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030b2:	f7fe fe85 	bl	8001dc0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030be:	429a      	cmp	r2, r3
 80030c0:	d80b      	bhi.n	80030da <HAL_SPI_TransmitReceive+0x1e0>
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d007      	beq.n	80030da <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80030d8:	e0b5      	b.n	8003246 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1a2      	bne.n	800302a <HAL_SPI_TransmitReceive+0x130>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d19d      	bne.n	800302a <HAL_SPI_TransmitReceive+0x130>
 80030ee:	e080      	b.n	80031f2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x204>
 80030f8:	8b7b      	ldrh	r3, [r7, #26]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d16f      	bne.n	80031de <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003124:	e05b      	b.n	80031de <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d11c      	bne.n	800316e <HAL_SPI_TransmitReceive+0x274>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d017      	beq.n	800316e <HAL_SPI_TransmitReceive+0x274>
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d114      	bne.n	800316e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d119      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x2b6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d014      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ac:	2301      	movs	r3, #1
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031b0:	f7fe fe06 	bl	8001dc0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031bc:	429a      	cmp	r2, r3
 80031be:	d803      	bhi.n	80031c8 <HAL_SPI_TransmitReceive+0x2ce>
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d102      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x2d4>
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80031dc:	e033      	b.n	8003246 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d19e      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x22c>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d199      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8c4 	bl	8003384 <SPI_EndRxTxTransaction>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800320e:	e01a      	b.n	8003246 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323c:	e003      	b.n	8003246 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800324e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003252:	4618      	mov	r0, r3
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003268:	b2db      	uxtb	r3, r3
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003284:	f7fe fd9c 	bl	8001dc0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003294:	f7fe fd94 	bl	8001dc0 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	e054      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d050      	beq.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b4:	f7fe fd84 	bl	8001dc0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d902      	bls.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d111      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ec:	d004      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d107      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d10f      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e017      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d19b      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000000 	.word	0x20000000

08003384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff ff6a 	bl	8003274 <SPI_WaitFlagStateUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e000      	b.n	80033b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e042      	b.n	8003458 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe f83c 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f91d 	bl	8003644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	d16d      	bne.n	800355c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Transmit+0x2c>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e066      	b.n	800355e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2221      	movs	r2, #33	; 0x21
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349e:	f7fe fc8f 	bl	8001dc0 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b8:	d108      	bne.n	80034cc <HAL_UART_Transmit+0x6c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e003      	b.n	80034d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d4:	e02a      	b.n	800352c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f840 	bl	8003566 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e036      	b.n	800355e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	3302      	adds	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e007      	b.n	800351e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3301      	adds	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1cf      	bne.n	80034d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f810 	bl	8003566 <UART_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e006      	b.n	800355e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b090      	sub	sp, #64	; 0x40
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003576:	e050      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d04c      	beq.n	800361a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x30>
 8003586:	f7fe fc1b 	bl	8001dc0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003592:	429a      	cmp	r2, r3
 8003594:	d241      	bcs.n	800361a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b6:	637a      	str	r2, [r7, #52]	; 0x34
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3314      	adds	r3, #20
 80035d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	613b      	str	r3, [r7, #16]
   return(result);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3314      	adds	r3, #20
 80035e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ea:	623a      	str	r2, [r7, #32]
 80035ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	69f9      	ldr	r1, [r7, #28]
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e5      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e00f      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	429a      	cmp	r2, r3
 8003636:	d09f      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3740      	adds	r7, #64	; 0x40
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800367e:	f023 030c 	bic.w	r3, r3, #12
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	430b      	orrs	r3, r1
 800368a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <UART_SetConfig+0x114>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036ac:	f7ff fa2c 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	e002      	b.n	80036ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7ff fa14 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80036b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009a      	lsls	r2, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <UART_SetConfig+0x118>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	0119      	lsls	r1, r3, #4
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009a      	lsls	r2, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <UART_SetConfig+0x118>)
 80036f2:	fba3 0302 	umull	r0, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2064      	movs	r0, #100	; 0x64
 80036fa:	fb00 f303 	mul.w	r3, r0, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	3332      	adds	r3, #50	; 0x32
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <UART_SetConfig+0x118>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003710:	4419      	add	r1, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009a      	lsls	r2, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fbb2 f2f3 	udiv	r2, r2, r3
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <UART_SetConfig+0x118>)
 800372a:	fba3 0302 	umull	r0, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2064      	movs	r0, #100	; 0x64
 8003732:	fb00 f303 	mul.w	r3, r0, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	3332      	adds	r3, #50	; 0x32
 800373c:	4a07      	ldr	r2, [pc, #28]	; (800375c <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	440a      	add	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40013800 	.word	0x40013800
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <__cvt>:
 8003760:	2b00      	cmp	r3, #0
 8003762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003766:	461f      	mov	r7, r3
 8003768:	bfbb      	ittet	lt
 800376a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800376e:	461f      	movlt	r7, r3
 8003770:	2300      	movge	r3, #0
 8003772:	232d      	movlt	r3, #45	; 0x2d
 8003774:	b088      	sub	sp, #32
 8003776:	4614      	mov	r4, r2
 8003778:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800377a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800377c:	7013      	strb	r3, [r2, #0]
 800377e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003780:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003784:	f023 0820 	bic.w	r8, r3, #32
 8003788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800378c:	d005      	beq.n	800379a <__cvt+0x3a>
 800378e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003792:	d100      	bne.n	8003796 <__cvt+0x36>
 8003794:	3501      	adds	r5, #1
 8003796:	2302      	movs	r3, #2
 8003798:	e000      	b.n	800379c <__cvt+0x3c>
 800379a:	2303      	movs	r3, #3
 800379c:	aa07      	add	r2, sp, #28
 800379e:	9204      	str	r2, [sp, #16]
 80037a0:	aa06      	add	r2, sp, #24
 80037a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037a6:	e9cd 3500 	strd	r3, r5, [sp]
 80037aa:	4622      	mov	r2, r4
 80037ac:	463b      	mov	r3, r7
 80037ae:	f000 fe7f 	bl	80044b0 <_dtoa_r>
 80037b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037b6:	4606      	mov	r6, r0
 80037b8:	d102      	bne.n	80037c0 <__cvt+0x60>
 80037ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037bc:	07db      	lsls	r3, r3, #31
 80037be:	d522      	bpl.n	8003806 <__cvt+0xa6>
 80037c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037c4:	eb06 0905 	add.w	r9, r6, r5
 80037c8:	d110      	bne.n	80037ec <__cvt+0x8c>
 80037ca:	7833      	ldrb	r3, [r6, #0]
 80037cc:	2b30      	cmp	r3, #48	; 0x30
 80037ce:	d10a      	bne.n	80037e6 <__cvt+0x86>
 80037d0:	2200      	movs	r2, #0
 80037d2:	2300      	movs	r3, #0
 80037d4:	4620      	mov	r0, r4
 80037d6:	4639      	mov	r1, r7
 80037d8:	f7fd f8e6 	bl	80009a8 <__aeabi_dcmpeq>
 80037dc:	b918      	cbnz	r0, 80037e6 <__cvt+0x86>
 80037de:	f1c5 0501 	rsb	r5, r5, #1
 80037e2:	f8ca 5000 	str.w	r5, [sl]
 80037e6:	f8da 3000 	ldr.w	r3, [sl]
 80037ea:	4499      	add	r9, r3
 80037ec:	2200      	movs	r2, #0
 80037ee:	2300      	movs	r3, #0
 80037f0:	4620      	mov	r0, r4
 80037f2:	4639      	mov	r1, r7
 80037f4:	f7fd f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80037f8:	b108      	cbz	r0, 80037fe <__cvt+0x9e>
 80037fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80037fe:	2230      	movs	r2, #48	; 0x30
 8003800:	9b07      	ldr	r3, [sp, #28]
 8003802:	454b      	cmp	r3, r9
 8003804:	d307      	bcc.n	8003816 <__cvt+0xb6>
 8003806:	4630      	mov	r0, r6
 8003808:	9b07      	ldr	r3, [sp, #28]
 800380a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800380c:	1b9b      	subs	r3, r3, r6
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	b008      	add	sp, #32
 8003812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003816:	1c59      	adds	r1, r3, #1
 8003818:	9107      	str	r1, [sp, #28]
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e7f0      	b.n	8003800 <__cvt+0xa0>

0800381e <__exponent>:
 800381e:	4603      	mov	r3, r0
 8003820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003822:	2900      	cmp	r1, #0
 8003824:	f803 2b02 	strb.w	r2, [r3], #2
 8003828:	bfb6      	itet	lt
 800382a:	222d      	movlt	r2, #45	; 0x2d
 800382c:	222b      	movge	r2, #43	; 0x2b
 800382e:	4249      	neglt	r1, r1
 8003830:	2909      	cmp	r1, #9
 8003832:	7042      	strb	r2, [r0, #1]
 8003834:	dd2a      	ble.n	800388c <__exponent+0x6e>
 8003836:	f10d 0207 	add.w	r2, sp, #7
 800383a:	4617      	mov	r7, r2
 800383c:	260a      	movs	r6, #10
 800383e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003842:	4694      	mov	ip, r2
 8003844:	fb06 1415 	mls	r4, r6, r5, r1
 8003848:	3430      	adds	r4, #48	; 0x30
 800384a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800384e:	460c      	mov	r4, r1
 8003850:	2c63      	cmp	r4, #99	; 0x63
 8003852:	4629      	mov	r1, r5
 8003854:	f102 32ff 	add.w	r2, r2, #4294967295
 8003858:	dcf1      	bgt.n	800383e <__exponent+0x20>
 800385a:	3130      	adds	r1, #48	; 0x30
 800385c:	f1ac 0402 	sub.w	r4, ip, #2
 8003860:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003864:	4622      	mov	r2, r4
 8003866:	1c41      	adds	r1, r0, #1
 8003868:	42ba      	cmp	r2, r7
 800386a:	d30a      	bcc.n	8003882 <__exponent+0x64>
 800386c:	f10d 0209 	add.w	r2, sp, #9
 8003870:	eba2 020c 	sub.w	r2, r2, ip
 8003874:	42bc      	cmp	r4, r7
 8003876:	bf88      	it	hi
 8003878:	2200      	movhi	r2, #0
 800387a:	4413      	add	r3, r2
 800387c:	1a18      	subs	r0, r3, r0
 800387e:	b003      	add	sp, #12
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003882:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003886:	f801 5f01 	strb.w	r5, [r1, #1]!
 800388a:	e7ed      	b.n	8003868 <__exponent+0x4a>
 800388c:	2330      	movs	r3, #48	; 0x30
 800388e:	3130      	adds	r1, #48	; 0x30
 8003890:	7083      	strb	r3, [r0, #2]
 8003892:	70c1      	strb	r1, [r0, #3]
 8003894:	1d03      	adds	r3, r0, #4
 8003896:	e7f1      	b.n	800387c <__exponent+0x5e>

08003898 <_printf_float>:
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	b091      	sub	sp, #68	; 0x44
 800389e:	460c      	mov	r4, r1
 80038a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80038a4:	4616      	mov	r6, r2
 80038a6:	461f      	mov	r7, r3
 80038a8:	4605      	mov	r5, r0
 80038aa:	f000 fce5 	bl	8004278 <_localeconv_r>
 80038ae:	6803      	ldr	r3, [r0, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	9309      	str	r3, [sp, #36]	; 0x24
 80038b4:	f7fc fc4c 	bl	8000150 <strlen>
 80038b8:	2300      	movs	r3, #0
 80038ba:	930e      	str	r3, [sp, #56]	; 0x38
 80038bc:	f8d8 3000 	ldr.w	r3, [r8]
 80038c0:	900a      	str	r0, [sp, #40]	; 0x28
 80038c2:	3307      	adds	r3, #7
 80038c4:	f023 0307 	bic.w	r3, r3, #7
 80038c8:	f103 0208 	add.w	r2, r3, #8
 80038cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80038d0:	f8d4 b000 	ldr.w	fp, [r4]
 80038d4:	f8c8 2000 	str.w	r2, [r8]
 80038d8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80038dc:	4652      	mov	r2, sl
 80038de:	4643      	mov	r3, r8
 80038e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80038e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80038e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ea:	f04f 32ff 	mov.w	r2, #4294967295
 80038ee:	4650      	mov	r0, sl
 80038f0:	4b9c      	ldr	r3, [pc, #624]	; (8003b64 <_printf_float+0x2cc>)
 80038f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038f4:	f7fd f88a 	bl	8000a0c <__aeabi_dcmpun>
 80038f8:	bb70      	cbnz	r0, 8003958 <_printf_float+0xc0>
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	4650      	mov	r0, sl
 8003900:	4b98      	ldr	r3, [pc, #608]	; (8003b64 <_printf_float+0x2cc>)
 8003902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003904:	f7fd f864 	bl	80009d0 <__aeabi_dcmple>
 8003908:	bb30      	cbnz	r0, 8003958 <_printf_float+0xc0>
 800390a:	2200      	movs	r2, #0
 800390c:	2300      	movs	r3, #0
 800390e:	4650      	mov	r0, sl
 8003910:	4641      	mov	r1, r8
 8003912:	f7fd f853 	bl	80009bc <__aeabi_dcmplt>
 8003916:	b110      	cbz	r0, 800391e <_printf_float+0x86>
 8003918:	232d      	movs	r3, #45	; 0x2d
 800391a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391e:	4a92      	ldr	r2, [pc, #584]	; (8003b68 <_printf_float+0x2d0>)
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <_printf_float+0x2d4>)
 8003922:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003926:	bf94      	ite	ls
 8003928:	4690      	movls	r8, r2
 800392a:	4698      	movhi	r8, r3
 800392c:	2303      	movs	r3, #3
 800392e:	f04f 0a00 	mov.w	sl, #0
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	f02b 0304 	bic.w	r3, fp, #4
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	4633      	mov	r3, r6
 800393c:	4621      	mov	r1, r4
 800393e:	4628      	mov	r0, r5
 8003940:	9700      	str	r7, [sp, #0]
 8003942:	aa0f      	add	r2, sp, #60	; 0x3c
 8003944:	f000 f9d6 	bl	8003cf4 <_printf_common>
 8003948:	3001      	adds	r0, #1
 800394a:	f040 8090 	bne.w	8003a6e <_printf_float+0x1d6>
 800394e:	f04f 30ff 	mov.w	r0, #4294967295
 8003952:	b011      	add	sp, #68	; 0x44
 8003954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003958:	4652      	mov	r2, sl
 800395a:	4643      	mov	r3, r8
 800395c:	4650      	mov	r0, sl
 800395e:	4641      	mov	r1, r8
 8003960:	f7fd f854 	bl	8000a0c <__aeabi_dcmpun>
 8003964:	b148      	cbz	r0, 800397a <_printf_float+0xe2>
 8003966:	f1b8 0f00 	cmp.w	r8, #0
 800396a:	bfb8      	it	lt
 800396c:	232d      	movlt	r3, #45	; 0x2d
 800396e:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <_printf_float+0x2d8>)
 8003970:	bfb8      	it	lt
 8003972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003976:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <_printf_float+0x2dc>)
 8003978:	e7d3      	b.n	8003922 <_printf_float+0x8a>
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	d142      	bne.n	8003a0a <_printf_float+0x172>
 8003984:	2306      	movs	r3, #6
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	9206      	str	r2, [sp, #24]
 800398c:	aa0e      	add	r2, sp, #56	; 0x38
 800398e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003992:	aa0d      	add	r2, sp, #52	; 0x34
 8003994:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003998:	9203      	str	r2, [sp, #12]
 800399a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800399e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	4652      	mov	r2, sl
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4628      	mov	r0, r5
 80039ac:	4643      	mov	r3, r8
 80039ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80039b0:	f7ff fed6 	bl	8003760 <__cvt>
 80039b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039b6:	4680      	mov	r8, r0
 80039b8:	2947      	cmp	r1, #71	; 0x47
 80039ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039bc:	d108      	bne.n	80039d0 <_printf_float+0x138>
 80039be:	1cc8      	adds	r0, r1, #3
 80039c0:	db02      	blt.n	80039c8 <_printf_float+0x130>
 80039c2:	6863      	ldr	r3, [r4, #4]
 80039c4:	4299      	cmp	r1, r3
 80039c6:	dd40      	ble.n	8003a4a <_printf_float+0x1b2>
 80039c8:	f1a9 0902 	sub.w	r9, r9, #2
 80039cc:	fa5f f989 	uxtb.w	r9, r9
 80039d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80039d4:	d81f      	bhi.n	8003a16 <_printf_float+0x17e>
 80039d6:	464a      	mov	r2, r9
 80039d8:	3901      	subs	r1, #1
 80039da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80039de:	910d      	str	r1, [sp, #52]	; 0x34
 80039e0:	f7ff ff1d 	bl	800381e <__exponent>
 80039e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039e6:	4682      	mov	sl, r0
 80039e8:	1813      	adds	r3, r2, r0
 80039ea:	2a01      	cmp	r2, #1
 80039ec:	6123      	str	r3, [r4, #16]
 80039ee:	dc02      	bgt.n	80039f6 <_printf_float+0x15e>
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	07d2      	lsls	r2, r2, #31
 80039f4:	d501      	bpl.n	80039fa <_printf_float+0x162>
 80039f6:	3301      	adds	r3, #1
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d09b      	beq.n	800393a <_printf_float+0xa2>
 8003a02:	232d      	movs	r3, #45	; 0x2d
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a08:	e797      	b.n	800393a <_printf_float+0xa2>
 8003a0a:	2947      	cmp	r1, #71	; 0x47
 8003a0c:	d1bc      	bne.n	8003988 <_printf_float+0xf0>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ba      	bne.n	8003988 <_printf_float+0xf0>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e7b7      	b.n	8003986 <_printf_float+0xee>
 8003a16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003a1a:	d118      	bne.n	8003a4e <_printf_float+0x1b6>
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	6863      	ldr	r3, [r4, #4]
 8003a20:	dd0b      	ble.n	8003a3a <_printf_float+0x1a2>
 8003a22:	6121      	str	r1, [r4, #16]
 8003a24:	b913      	cbnz	r3, 8003a2c <_printf_float+0x194>
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	07d0      	lsls	r0, r2, #31
 8003a2a:	d502      	bpl.n	8003a32 <_printf_float+0x19a>
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	440b      	add	r3, r1
 8003a30:	6123      	str	r3, [r4, #16]
 8003a32:	f04f 0a00 	mov.w	sl, #0
 8003a36:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a38:	e7df      	b.n	80039fa <_printf_float+0x162>
 8003a3a:	b913      	cbnz	r3, 8003a42 <_printf_float+0x1aa>
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	07d2      	lsls	r2, r2, #31
 8003a40:	d501      	bpl.n	8003a46 <_printf_float+0x1ae>
 8003a42:	3302      	adds	r3, #2
 8003a44:	e7f4      	b.n	8003a30 <_printf_float+0x198>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e7f2      	b.n	8003a30 <_printf_float+0x198>
 8003a4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a50:	4299      	cmp	r1, r3
 8003a52:	db05      	blt.n	8003a60 <_printf_float+0x1c8>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	6121      	str	r1, [r4, #16]
 8003a58:	07d8      	lsls	r0, r3, #31
 8003a5a:	d5ea      	bpl.n	8003a32 <_printf_float+0x19a>
 8003a5c:	1c4b      	adds	r3, r1, #1
 8003a5e:	e7e7      	b.n	8003a30 <_printf_float+0x198>
 8003a60:	2900      	cmp	r1, #0
 8003a62:	bfcc      	ite	gt
 8003a64:	2201      	movgt	r2, #1
 8003a66:	f1c1 0202 	rsble	r2, r1, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	e7e0      	b.n	8003a30 <_printf_float+0x198>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	055a      	lsls	r2, r3, #21
 8003a72:	d407      	bmi.n	8003a84 <_printf_float+0x1ec>
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	4642      	mov	r2, r8
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	47b8      	blx	r7
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d12b      	bne.n	8003ada <_printf_float+0x242>
 8003a82:	e764      	b.n	800394e <_printf_float+0xb6>
 8003a84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a88:	f240 80dd 	bls.w	8003c46 <_printf_float+0x3ae>
 8003a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a90:	2200      	movs	r2, #0
 8003a92:	2300      	movs	r3, #0
 8003a94:	f7fc ff88 	bl	80009a8 <__aeabi_dcmpeq>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d033      	beq.n	8003b04 <_printf_float+0x26c>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <_printf_float+0x2e0>)
 8003aa4:	47b8      	blx	r7
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	f43f af51 	beq.w	800394e <_printf_float+0xb6>
 8003aac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	db02      	blt.n	8003aba <_printf_float+0x222>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	07d8      	lsls	r0, r3, #31
 8003ab8:	d50f      	bpl.n	8003ada <_printf_float+0x242>
 8003aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b8      	blx	r7
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f43f af42 	beq.w	800394e <_printf_float+0xb6>
 8003aca:	f04f 0800 	mov.w	r8, #0
 8003ace:	f104 091a 	add.w	r9, r4, #26
 8003ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4543      	cmp	r3, r8
 8003ad8:	dc09      	bgt.n	8003aee <_printf_float+0x256>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	079b      	lsls	r3, r3, #30
 8003ade:	f100 8104 	bmi.w	8003cea <_printf_float+0x452>
 8003ae2:	68e0      	ldr	r0, [r4, #12]
 8003ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ae6:	4298      	cmp	r0, r3
 8003ae8:	bfb8      	it	lt
 8003aea:	4618      	movlt	r0, r3
 8003aec:	e731      	b.n	8003952 <_printf_float+0xba>
 8003aee:	2301      	movs	r3, #1
 8003af0:	464a      	mov	r2, r9
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	f43f af28 	beq.w	800394e <_printf_float+0xb6>
 8003afe:	f108 0801 	add.w	r8, r8, #1
 8003b02:	e7e6      	b.n	8003ad2 <_printf_float+0x23a>
 8003b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dc38      	bgt.n	8003b7c <_printf_float+0x2e4>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4628      	mov	r0, r5
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <_printf_float+0x2e0>)
 8003b12:	47b8      	blx	r7
 8003b14:	3001      	adds	r0, #1
 8003b16:	f43f af1a 	beq.w	800394e <_printf_float+0xb6>
 8003b1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	d102      	bne.n	8003b28 <_printf_float+0x290>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07d9      	lsls	r1, r3, #31
 8003b26:	d5d8      	bpl.n	8003ada <_printf_float+0x242>
 8003b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	f43f af0b 	beq.w	800394e <_printf_float+0xb6>
 8003b38:	f04f 0900 	mov.w	r9, #0
 8003b3c:	f104 0a1a 	add.w	sl, r4, #26
 8003b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b42:	425b      	negs	r3, r3
 8003b44:	454b      	cmp	r3, r9
 8003b46:	dc01      	bgt.n	8003b4c <_printf_float+0x2b4>
 8003b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4a:	e794      	b.n	8003a76 <_printf_float+0x1de>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4652      	mov	r2, sl
 8003b50:	4631      	mov	r1, r6
 8003b52:	4628      	mov	r0, r5
 8003b54:	47b8      	blx	r7
 8003b56:	3001      	adds	r0, #1
 8003b58:	f43f aef9 	beq.w	800394e <_printf_float+0xb6>
 8003b5c:	f109 0901 	add.w	r9, r9, #1
 8003b60:	e7ee      	b.n	8003b40 <_printf_float+0x2a8>
 8003b62:	bf00      	nop
 8003b64:	7fefffff 	.word	0x7fefffff
 8003b68:	080064f2 	.word	0x080064f2
 8003b6c:	080064f6 	.word	0x080064f6
 8003b70:	080064fa 	.word	0x080064fa
 8003b74:	080064fe 	.word	0x080064fe
 8003b78:	08006502 	.word	0x08006502
 8003b7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b80:	429a      	cmp	r2, r3
 8003b82:	bfa8      	it	ge
 8003b84:	461a      	movge	r2, r3
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	4691      	mov	r9, r2
 8003b8a:	dc37      	bgt.n	8003bfc <_printf_float+0x364>
 8003b8c:	f04f 0b00 	mov.w	fp, #0
 8003b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b94:	f104 021a 	add.w	r2, r4, #26
 8003b98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b9c:	ebaa 0309 	sub.w	r3, sl, r9
 8003ba0:	455b      	cmp	r3, fp
 8003ba2:	dc33      	bgt.n	8003c0c <_printf_float+0x374>
 8003ba4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	db3b      	blt.n	8003c24 <_printf_float+0x38c>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	07da      	lsls	r2, r3, #31
 8003bb0:	d438      	bmi.n	8003c24 <_printf_float+0x38c>
 8003bb2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003bb6:	eba2 0903 	sub.w	r9, r2, r3
 8003bba:	eba2 020a 	sub.w	r2, r2, sl
 8003bbe:	4591      	cmp	r9, r2
 8003bc0:	bfa8      	it	ge
 8003bc2:	4691      	movge	r9, r2
 8003bc4:	f1b9 0f00 	cmp.w	r9, #0
 8003bc8:	dc34      	bgt.n	8003c34 <_printf_float+0x39c>
 8003bca:	f04f 0800 	mov.w	r8, #0
 8003bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bd2:	f104 0a1a 	add.w	sl, r4, #26
 8003bd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	eba3 0309 	sub.w	r3, r3, r9
 8003be0:	4543      	cmp	r3, r8
 8003be2:	f77f af7a 	ble.w	8003ada <_printf_float+0x242>
 8003be6:	2301      	movs	r3, #1
 8003be8:	4652      	mov	r2, sl
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f aeac 	beq.w	800394e <_printf_float+0xb6>
 8003bf6:	f108 0801 	add.w	r8, r8, #1
 8003bfa:	e7ec      	b.n	8003bd6 <_printf_float+0x33e>
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4642      	mov	r2, r8
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	d1c0      	bne.n	8003b8c <_printf_float+0x2f4>
 8003c0a:	e6a0      	b.n	800394e <_printf_float+0xb6>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4628      	mov	r0, r5
 8003c12:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c14:	47b8      	blx	r7
 8003c16:	3001      	adds	r0, #1
 8003c18:	f43f ae99 	beq.w	800394e <_printf_float+0xb6>
 8003c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c1e:	f10b 0b01 	add.w	fp, fp, #1
 8003c22:	e7b9      	b.n	8003b98 <_printf_float+0x300>
 8003c24:	4631      	mov	r1, r6
 8003c26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b8      	blx	r7
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d1bf      	bne.n	8003bb2 <_printf_float+0x31a>
 8003c32:	e68c      	b.n	800394e <_printf_float+0xb6>
 8003c34:	464b      	mov	r3, r9
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	eb08 020a 	add.w	r2, r8, sl
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	d1c2      	bne.n	8003bca <_printf_float+0x332>
 8003c44:	e683      	b.n	800394e <_printf_float+0xb6>
 8003c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c48:	2a01      	cmp	r2, #1
 8003c4a:	dc01      	bgt.n	8003c50 <_printf_float+0x3b8>
 8003c4c:	07db      	lsls	r3, r3, #31
 8003c4e:	d539      	bpl.n	8003cc4 <_printf_float+0x42c>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4642      	mov	r2, r8
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f ae77 	beq.w	800394e <_printf_float+0xb6>
 8003c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f43f ae6f 	beq.w	800394e <_printf_float+0xb6>
 8003c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c74:	2200      	movs	r2, #0
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003c7c:	f7fc fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8003c80:	b9d8      	cbnz	r0, 8003cba <_printf_float+0x422>
 8003c82:	f109 33ff 	add.w	r3, r9, #4294967295
 8003c86:	f108 0201 	add.w	r2, r8, #1
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b8      	blx	r7
 8003c90:	3001      	adds	r0, #1
 8003c92:	d10e      	bne.n	8003cb2 <_printf_float+0x41a>
 8003c94:	e65b      	b.n	800394e <_printf_float+0xb6>
 8003c96:	2301      	movs	r3, #1
 8003c98:	464a      	mov	r2, r9
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b8      	blx	r7
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	f43f ae54 	beq.w	800394e <_printf_float+0xb6>
 8003ca6:	f108 0801 	add.w	r8, r8, #1
 8003caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cac:	3b01      	subs	r3, #1
 8003cae:	4543      	cmp	r3, r8
 8003cb0:	dcf1      	bgt.n	8003c96 <_printf_float+0x3fe>
 8003cb2:	4653      	mov	r3, sl
 8003cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003cb8:	e6de      	b.n	8003a78 <_printf_float+0x1e0>
 8003cba:	f04f 0800 	mov.w	r8, #0
 8003cbe:	f104 091a 	add.w	r9, r4, #26
 8003cc2:	e7f2      	b.n	8003caa <_printf_float+0x412>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4642      	mov	r2, r8
 8003cc8:	e7df      	b.n	8003c8a <_printf_float+0x3f2>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	464a      	mov	r2, r9
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f43f ae3a 	beq.w	800394e <_printf_float+0xb6>
 8003cda:	f108 0801 	add.w	r8, r8, #1
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ce2:	1a5b      	subs	r3, r3, r1
 8003ce4:	4543      	cmp	r3, r8
 8003ce6:	dcf0      	bgt.n	8003cca <_printf_float+0x432>
 8003ce8:	e6fb      	b.n	8003ae2 <_printf_float+0x24a>
 8003cea:	f04f 0800 	mov.w	r8, #0
 8003cee:	f104 0919 	add.w	r9, r4, #25
 8003cf2:	e7f4      	b.n	8003cde <_printf_float+0x446>

08003cf4 <_printf_common>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	4616      	mov	r6, r2
 8003cfa:	4699      	mov	r9, r3
 8003cfc:	688a      	ldr	r2, [r1, #8]
 8003cfe:	690b      	ldr	r3, [r1, #16]
 8003d00:	4607      	mov	r7, r0
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bfb8      	it	lt
 8003d06:	4613      	movlt	r3, r2
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d0e:	460c      	mov	r4, r1
 8003d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d14:	b10a      	cbz	r2, 8003d1a <_printf_common+0x26>
 8003d16:	3301      	adds	r3, #1
 8003d18:	6033      	str	r3, [r6, #0]
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	0699      	lsls	r1, r3, #26
 8003d1e:	bf42      	ittt	mi
 8003d20:	6833      	ldrmi	r3, [r6, #0]
 8003d22:	3302      	addmi	r3, #2
 8003d24:	6033      	strmi	r3, [r6, #0]
 8003d26:	6825      	ldr	r5, [r4, #0]
 8003d28:	f015 0506 	ands.w	r5, r5, #6
 8003d2c:	d106      	bne.n	8003d3c <_printf_common+0x48>
 8003d2e:	f104 0a19 	add.w	sl, r4, #25
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	6832      	ldr	r2, [r6, #0]
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	dc2b      	bgt.n	8003d94 <_printf_common+0xa0>
 8003d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d40:	1e13      	subs	r3, r2, #0
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	bf18      	it	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	0692      	lsls	r2, r2, #26
 8003d4a:	d430      	bmi.n	8003dae <_printf_common+0xba>
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	4638      	mov	r0, r7
 8003d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d023      	beq.n	8003da2 <_printf_common+0xae>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf14      	ite	ne
 8003d66:	2500      	movne	r5, #0
 8003d68:	6833      	ldreq	r3, [r6, #0]
 8003d6a:	f04f 0600 	mov.w	r6, #0
 8003d6e:	bf08      	it	eq
 8003d70:	68e5      	ldreq	r5, [r4, #12]
 8003d72:	f104 041a 	add.w	r4, r4, #26
 8003d76:	bf08      	it	eq
 8003d78:	1aed      	subeq	r5, r5, r3
 8003d7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d7e:	bf08      	it	eq
 8003d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bfc4      	itt	gt
 8003d88:	1a9b      	subgt	r3, r3, r2
 8003d8a:	18ed      	addgt	r5, r5, r3
 8003d8c:	42b5      	cmp	r5, r6
 8003d8e:	d11a      	bne.n	8003dc6 <_printf_common+0xd2>
 8003d90:	2000      	movs	r0, #0
 8003d92:	e008      	b.n	8003da6 <_printf_common+0xb2>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4652      	mov	r2, sl
 8003d98:	4649      	mov	r1, r9
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	47c0      	blx	r8
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d103      	bne.n	8003daa <_printf_common+0xb6>
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003daa:	3501      	adds	r5, #1
 8003dac:	e7c1      	b.n	8003d32 <_printf_common+0x3e>
 8003dae:	2030      	movs	r0, #48	; 0x30
 8003db0:	18e1      	adds	r1, r4, r3
 8003db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dbc:	4422      	add	r2, r4
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc4:	e7c2      	b.n	8003d4c <_printf_common+0x58>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4622      	mov	r2, r4
 8003dca:	4649      	mov	r1, r9
 8003dcc:	4638      	mov	r0, r7
 8003dce:	47c0      	blx	r8
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d0e6      	beq.n	8003da2 <_printf_common+0xae>
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7d9      	b.n	8003d8c <_printf_common+0x98>

08003dd8 <_printf_i>:
 8003dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ddc:	7e0f      	ldrb	r7, [r1, #24]
 8003dde:	4691      	mov	r9, r2
 8003de0:	2f78      	cmp	r7, #120	; 0x78
 8003de2:	4680      	mov	r8, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	469a      	mov	sl, r3
 8003de8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dee:	d807      	bhi.n	8003e00 <_printf_i+0x28>
 8003df0:	2f62      	cmp	r7, #98	; 0x62
 8003df2:	d80a      	bhi.n	8003e0a <_printf_i+0x32>
 8003df4:	2f00      	cmp	r7, #0
 8003df6:	f000 80d5 	beq.w	8003fa4 <_printf_i+0x1cc>
 8003dfa:	2f58      	cmp	r7, #88	; 0x58
 8003dfc:	f000 80c1 	beq.w	8003f82 <_printf_i+0x1aa>
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e08:	e03a      	b.n	8003e80 <_printf_i+0xa8>
 8003e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e0e:	2b15      	cmp	r3, #21
 8003e10:	d8f6      	bhi.n	8003e00 <_printf_i+0x28>
 8003e12:	a101      	add	r1, pc, #4	; (adr r1, 8003e18 <_printf_i+0x40>)
 8003e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e85 	.word	0x08003e85
 8003e20:	08003e01 	.word	0x08003e01
 8003e24:	08003e01 	.word	0x08003e01
 8003e28:	08003e01 	.word	0x08003e01
 8003e2c:	08003e01 	.word	0x08003e01
 8003e30:	08003e85 	.word	0x08003e85
 8003e34:	08003e01 	.word	0x08003e01
 8003e38:	08003e01 	.word	0x08003e01
 8003e3c:	08003e01 	.word	0x08003e01
 8003e40:	08003e01 	.word	0x08003e01
 8003e44:	08003f8b 	.word	0x08003f8b
 8003e48:	08003eb1 	.word	0x08003eb1
 8003e4c:	08003f45 	.word	0x08003f45
 8003e50:	08003e01 	.word	0x08003e01
 8003e54:	08003e01 	.word	0x08003e01
 8003e58:	08003fad 	.word	0x08003fad
 8003e5c:	08003e01 	.word	0x08003e01
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003e01 	.word	0x08003e01
 8003e68:	08003e01 	.word	0x08003e01
 8003e6c:	08003f4d 	.word	0x08003f4d
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	1d1a      	adds	r2, r3, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	602a      	str	r2, [r5, #0]
 8003e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0a0      	b.n	8003fc6 <_printf_i+0x1ee>
 8003e84:	6820      	ldr	r0, [r4, #0]
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	0607      	lsls	r7, r0, #24
 8003e8a:	f103 0104 	add.w	r1, r3, #4
 8003e8e:	6029      	str	r1, [r5, #0]
 8003e90:	d501      	bpl.n	8003e96 <_printf_i+0xbe>
 8003e92:	681e      	ldr	r6, [r3, #0]
 8003e94:	e003      	b.n	8003e9e <_printf_i+0xc6>
 8003e96:	0646      	lsls	r6, r0, #25
 8003e98:	d5fb      	bpl.n	8003e92 <_printf_i+0xba>
 8003e9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	da03      	bge.n	8003eaa <_printf_i+0xd2>
 8003ea2:	232d      	movs	r3, #45	; 0x2d
 8003ea4:	4276      	negs	r6, r6
 8003ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eaa:	230a      	movs	r3, #10
 8003eac:	4859      	ldr	r0, [pc, #356]	; (8004014 <_printf_i+0x23c>)
 8003eae:	e012      	b.n	8003ed6 <_printf_i+0xfe>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	1d19      	adds	r1, r3, #4
 8003eb6:	6029      	str	r1, [r5, #0]
 8003eb8:	0605      	lsls	r5, r0, #24
 8003eba:	d501      	bpl.n	8003ec0 <_printf_i+0xe8>
 8003ebc:	681e      	ldr	r6, [r3, #0]
 8003ebe:	e002      	b.n	8003ec6 <_printf_i+0xee>
 8003ec0:	0641      	lsls	r1, r0, #25
 8003ec2:	d5fb      	bpl.n	8003ebc <_printf_i+0xe4>
 8003ec4:	881e      	ldrh	r6, [r3, #0]
 8003ec6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ec8:	bf0c      	ite	eq
 8003eca:	2308      	moveq	r3, #8
 8003ecc:	230a      	movne	r3, #10
 8003ece:	4851      	ldr	r0, [pc, #324]	; (8004014 <_printf_i+0x23c>)
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ed6:	6865      	ldr	r5, [r4, #4]
 8003ed8:	2d00      	cmp	r5, #0
 8003eda:	bfa8      	it	ge
 8003edc:	6821      	ldrge	r1, [r4, #0]
 8003ede:	60a5      	str	r5, [r4, #8]
 8003ee0:	bfa4      	itt	ge
 8003ee2:	f021 0104 	bicge.w	r1, r1, #4
 8003ee6:	6021      	strge	r1, [r4, #0]
 8003ee8:	b90e      	cbnz	r6, 8003eee <_printf_i+0x116>
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	d04b      	beq.n	8003f86 <_printf_i+0x1ae>
 8003eee:	4615      	mov	r5, r2
 8003ef0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ef4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ef8:	5dc7      	ldrb	r7, [r0, r7]
 8003efa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003efe:	4637      	mov	r7, r6
 8003f00:	42bb      	cmp	r3, r7
 8003f02:	460e      	mov	r6, r1
 8003f04:	d9f4      	bls.n	8003ef0 <_printf_i+0x118>
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d10b      	bne.n	8003f22 <_printf_i+0x14a>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	07de      	lsls	r6, r3, #31
 8003f0e:	d508      	bpl.n	8003f22 <_printf_i+0x14a>
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	6861      	ldr	r1, [r4, #4]
 8003f14:	4299      	cmp	r1, r3
 8003f16:	bfde      	ittt	le
 8003f18:	2330      	movle	r3, #48	; 0x30
 8003f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f22:	1b52      	subs	r2, r2, r5
 8003f24:	6122      	str	r2, [r4, #16]
 8003f26:	464b      	mov	r3, r9
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	f8cd a000 	str.w	sl, [sp]
 8003f30:	aa03      	add	r2, sp, #12
 8003f32:	f7ff fedf 	bl	8003cf4 <_printf_common>
 8003f36:	3001      	adds	r0, #1
 8003f38:	d14a      	bne.n	8003fd0 <_printf_i+0x1f8>
 8003f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3e:	b004      	add	sp, #16
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	f043 0320 	orr.w	r3, r3, #32
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	2778      	movs	r7, #120	; 0x78
 8003f4e:	4832      	ldr	r0, [pc, #200]	; (8004018 <_printf_i+0x240>)
 8003f50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	6829      	ldr	r1, [r5, #0]
 8003f58:	061f      	lsls	r7, r3, #24
 8003f5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f5e:	d402      	bmi.n	8003f66 <_printf_i+0x18e>
 8003f60:	065f      	lsls	r7, r3, #25
 8003f62:	bf48      	it	mi
 8003f64:	b2b6      	uxthmi	r6, r6
 8003f66:	07df      	lsls	r7, r3, #31
 8003f68:	bf48      	it	mi
 8003f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f6e:	6029      	str	r1, [r5, #0]
 8003f70:	bf48      	it	mi
 8003f72:	6023      	strmi	r3, [r4, #0]
 8003f74:	b91e      	cbnz	r6, 8003f7e <_printf_i+0x1a6>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	f023 0320 	bic.w	r3, r3, #32
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	2310      	movs	r3, #16
 8003f80:	e7a6      	b.n	8003ed0 <_printf_i+0xf8>
 8003f82:	4824      	ldr	r0, [pc, #144]	; (8004014 <_printf_i+0x23c>)
 8003f84:	e7e4      	b.n	8003f50 <_printf_i+0x178>
 8003f86:	4615      	mov	r5, r2
 8003f88:	e7bd      	b.n	8003f06 <_printf_i+0x12e>
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	6826      	ldr	r6, [r4, #0]
 8003f8e:	1d18      	adds	r0, r3, #4
 8003f90:	6961      	ldr	r1, [r4, #20]
 8003f92:	6028      	str	r0, [r5, #0]
 8003f94:	0635      	lsls	r5, r6, #24
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	d501      	bpl.n	8003f9e <_printf_i+0x1c6>
 8003f9a:	6019      	str	r1, [r3, #0]
 8003f9c:	e002      	b.n	8003fa4 <_printf_i+0x1cc>
 8003f9e:	0670      	lsls	r0, r6, #25
 8003fa0:	d5fb      	bpl.n	8003f9a <_printf_i+0x1c2>
 8003fa2:	8019      	strh	r1, [r3, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4615      	mov	r5, r2
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	e7bc      	b.n	8003f26 <_printf_i+0x14e>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	2100      	movs	r1, #0
 8003fb0:	1d1a      	adds	r2, r3, #4
 8003fb2:	602a      	str	r2, [r5, #0]
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	6862      	ldr	r2, [r4, #4]
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f000 f9d4 	bl	8004366 <memchr>
 8003fbe:	b108      	cbz	r0, 8003fc4 <_printf_i+0x1ec>
 8003fc0:	1b40      	subs	r0, r0, r5
 8003fc2:	6060      	str	r0, [r4, #4]
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fce:	e7aa      	b.n	8003f26 <_printf_i+0x14e>
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	47d0      	blx	sl
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0ad      	beq.n	8003f3a <_printf_i+0x162>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	079b      	lsls	r3, r3, #30
 8003fe2:	d413      	bmi.n	800400c <_printf_i+0x234>
 8003fe4:	68e0      	ldr	r0, [r4, #12]
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	4298      	cmp	r0, r3
 8003fea:	bfb8      	it	lt
 8003fec:	4618      	movlt	r0, r3
 8003fee:	e7a6      	b.n	8003f3e <_printf_i+0x166>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	47d0      	blx	sl
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d09d      	beq.n	8003f3a <_printf_i+0x162>
 8003ffe:	3501      	adds	r5, #1
 8004000:	68e3      	ldr	r3, [r4, #12]
 8004002:	9903      	ldr	r1, [sp, #12]
 8004004:	1a5b      	subs	r3, r3, r1
 8004006:	42ab      	cmp	r3, r5
 8004008:	dcf2      	bgt.n	8003ff0 <_printf_i+0x218>
 800400a:	e7eb      	b.n	8003fe4 <_printf_i+0x20c>
 800400c:	2500      	movs	r5, #0
 800400e:	f104 0619 	add.w	r6, r4, #25
 8004012:	e7f5      	b.n	8004000 <_printf_i+0x228>
 8004014:	08006504 	.word	0x08006504
 8004018:	08006515 	.word	0x08006515

0800401c <std>:
 800401c:	2300      	movs	r3, #0
 800401e:	b510      	push	{r4, lr}
 8004020:	4604      	mov	r4, r0
 8004022:	e9c0 3300 	strd	r3, r3, [r0]
 8004026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800402a:	6083      	str	r3, [r0, #8]
 800402c:	8181      	strh	r1, [r0, #12]
 800402e:	6643      	str	r3, [r0, #100]	; 0x64
 8004030:	81c2      	strh	r2, [r0, #14]
 8004032:	6183      	str	r3, [r0, #24]
 8004034:	4619      	mov	r1, r3
 8004036:	2208      	movs	r2, #8
 8004038:	305c      	adds	r0, #92	; 0x5c
 800403a:	f000 f914 	bl	8004266 <memset>
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <std+0x58>)
 8004040:	6224      	str	r4, [r4, #32]
 8004042:	6263      	str	r3, [r4, #36]	; 0x24
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <std+0x5c>)
 8004046:	62a3      	str	r3, [r4, #40]	; 0x28
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <std+0x60>)
 800404a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <std+0x64>)
 800404e:	6323      	str	r3, [r4, #48]	; 0x30
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <std+0x68>)
 8004052:	429c      	cmp	r4, r3
 8004054:	d006      	beq.n	8004064 <std+0x48>
 8004056:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800405a:	4294      	cmp	r4, r2
 800405c:	d002      	beq.n	8004064 <std+0x48>
 800405e:	33d0      	adds	r3, #208	; 0xd0
 8004060:	429c      	cmp	r4, r3
 8004062:	d105      	bne.n	8004070 <std+0x54>
 8004064:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800406c:	f000 b978 	b.w	8004360 <__retarget_lock_init_recursive>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	bf00      	nop
 8004074:	080041e1 	.word	0x080041e1
 8004078:	08004203 	.word	0x08004203
 800407c:	0800423b 	.word	0x0800423b
 8004080:	0800425f 	.word	0x0800425f
 8004084:	200005f0 	.word	0x200005f0

08004088 <stdio_exit_handler>:
 8004088:	4a02      	ldr	r2, [pc, #8]	; (8004094 <stdio_exit_handler+0xc>)
 800408a:	4903      	ldr	r1, [pc, #12]	; (8004098 <stdio_exit_handler+0x10>)
 800408c:	4803      	ldr	r0, [pc, #12]	; (800409c <stdio_exit_handler+0x14>)
 800408e:	f000 b869 	b.w	8004164 <_fwalk_sglue>
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c
 8004098:	08005d15 	.word	0x08005d15
 800409c:	20000018 	.word	0x20000018

080040a0 <cleanup_stdio>:
 80040a0:	6841      	ldr	r1, [r0, #4]
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <cleanup_stdio+0x34>)
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4299      	cmp	r1, r3
 80040a8:	4604      	mov	r4, r0
 80040aa:	d001      	beq.n	80040b0 <cleanup_stdio+0x10>
 80040ac:	f001 fe32 	bl	8005d14 <_fflush_r>
 80040b0:	68a1      	ldr	r1, [r4, #8]
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <cleanup_stdio+0x38>)
 80040b4:	4299      	cmp	r1, r3
 80040b6:	d002      	beq.n	80040be <cleanup_stdio+0x1e>
 80040b8:	4620      	mov	r0, r4
 80040ba:	f001 fe2b 	bl	8005d14 <_fflush_r>
 80040be:	68e1      	ldr	r1, [r4, #12]
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <cleanup_stdio+0x3c>)
 80040c2:	4299      	cmp	r1, r3
 80040c4:	d004      	beq.n	80040d0 <cleanup_stdio+0x30>
 80040c6:	4620      	mov	r0, r4
 80040c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040cc:	f001 be22 	b.w	8005d14 <_fflush_r>
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	bf00      	nop
 80040d4:	200005f0 	.word	0x200005f0
 80040d8:	20000658 	.word	0x20000658
 80040dc:	200006c0 	.word	0x200006c0

080040e0 <global_stdio_init.part.0>:
 80040e0:	b510      	push	{r4, lr}
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <global_stdio_init.part.0+0x30>)
 80040e4:	4c0b      	ldr	r4, [pc, #44]	; (8004114 <global_stdio_init.part.0+0x34>)
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <global_stdio_init.part.0+0x38>)
 80040e8:	4620      	mov	r0, r4
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	2104      	movs	r1, #4
 80040ee:	2200      	movs	r2, #0
 80040f0:	f7ff ff94 	bl	800401c <std>
 80040f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80040f8:	2201      	movs	r2, #1
 80040fa:	2109      	movs	r1, #9
 80040fc:	f7ff ff8e 	bl	800401c <std>
 8004100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004104:	2202      	movs	r2, #2
 8004106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800410a:	2112      	movs	r1, #18
 800410c:	f7ff bf86 	b.w	800401c <std>
 8004110:	20000728 	.word	0x20000728
 8004114:	200005f0 	.word	0x200005f0
 8004118:	08004089 	.word	0x08004089

0800411c <__sfp_lock_acquire>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__sfp_lock_acquire+0x8>)
 800411e:	f000 b920 	b.w	8004362 <__retarget_lock_acquire_recursive>
 8004122:	bf00      	nop
 8004124:	20000731 	.word	0x20000731

08004128 <__sfp_lock_release>:
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <__sfp_lock_release+0x8>)
 800412a:	f000 b91b 	b.w	8004364 <__retarget_lock_release_recursive>
 800412e:	bf00      	nop
 8004130:	20000731 	.word	0x20000731

08004134 <__sinit>:
 8004134:	b510      	push	{r4, lr}
 8004136:	4604      	mov	r4, r0
 8004138:	f7ff fff0 	bl	800411c <__sfp_lock_acquire>
 800413c:	6a23      	ldr	r3, [r4, #32]
 800413e:	b11b      	cbz	r3, 8004148 <__sinit+0x14>
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004144:	f7ff bff0 	b.w	8004128 <__sfp_lock_release>
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <__sinit+0x28>)
 800414a:	6223      	str	r3, [r4, #32]
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <__sinit+0x2c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f5      	bne.n	8004140 <__sinit+0xc>
 8004154:	f7ff ffc4 	bl	80040e0 <global_stdio_init.part.0>
 8004158:	e7f2      	b.n	8004140 <__sinit+0xc>
 800415a:	bf00      	nop
 800415c:	080040a1 	.word	0x080040a1
 8004160:	20000728 	.word	0x20000728

08004164 <_fwalk_sglue>:
 8004164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004168:	4607      	mov	r7, r0
 800416a:	4688      	mov	r8, r1
 800416c:	4614      	mov	r4, r2
 800416e:	2600      	movs	r6, #0
 8004170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004174:	f1b9 0901 	subs.w	r9, r9, #1
 8004178:	d505      	bpl.n	8004186 <_fwalk_sglue+0x22>
 800417a:	6824      	ldr	r4, [r4, #0]
 800417c:	2c00      	cmp	r4, #0
 800417e:	d1f7      	bne.n	8004170 <_fwalk_sglue+0xc>
 8004180:	4630      	mov	r0, r6
 8004182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004186:	89ab      	ldrh	r3, [r5, #12]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d907      	bls.n	800419c <_fwalk_sglue+0x38>
 800418c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004190:	3301      	adds	r3, #1
 8004192:	d003      	beq.n	800419c <_fwalk_sglue+0x38>
 8004194:	4629      	mov	r1, r5
 8004196:	4638      	mov	r0, r7
 8004198:	47c0      	blx	r8
 800419a:	4306      	orrs	r6, r0
 800419c:	3568      	adds	r5, #104	; 0x68
 800419e:	e7e9      	b.n	8004174 <_fwalk_sglue+0x10>

080041a0 <siprintf>:
 80041a0:	b40e      	push	{r1, r2, r3}
 80041a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041a6:	b500      	push	{lr}
 80041a8:	b09c      	sub	sp, #112	; 0x70
 80041aa:	ab1d      	add	r3, sp, #116	; 0x74
 80041ac:	9002      	str	r0, [sp, #8]
 80041ae:	9006      	str	r0, [sp, #24]
 80041b0:	9107      	str	r1, [sp, #28]
 80041b2:	9104      	str	r1, [sp, #16]
 80041b4:	4808      	ldr	r0, [pc, #32]	; (80041d8 <siprintf+0x38>)
 80041b6:	4909      	ldr	r1, [pc, #36]	; (80041dc <siprintf+0x3c>)
 80041b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041bc:	9105      	str	r1, [sp, #20]
 80041be:	6800      	ldr	r0, [r0, #0]
 80041c0:	a902      	add	r1, sp, #8
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	f001 fc26 	bl	8005a14 <_svfiprintf_r>
 80041c8:	2200      	movs	r2, #0
 80041ca:	9b02      	ldr	r3, [sp, #8]
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	b01c      	add	sp, #112	; 0x70
 80041d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d4:	b003      	add	sp, #12
 80041d6:	4770      	bx	lr
 80041d8:	20000064 	.word	0x20000064
 80041dc:	ffff0208 	.word	0xffff0208

080041e0 <__sread>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	460c      	mov	r4, r1
 80041e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e8:	f000 f86c 	bl	80042c4 <_read_r>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	bfab      	itete	ge
 80041f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041f2:	89a3      	ldrhlt	r3, [r4, #12]
 80041f4:	181b      	addge	r3, r3, r0
 80041f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041fa:	bfac      	ite	ge
 80041fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80041fe:	81a3      	strhlt	r3, [r4, #12]
 8004200:	bd10      	pop	{r4, pc}

08004202 <__swrite>:
 8004202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004206:	461f      	mov	r7, r3
 8004208:	898b      	ldrh	r3, [r1, #12]
 800420a:	4605      	mov	r5, r0
 800420c:	05db      	lsls	r3, r3, #23
 800420e:	460c      	mov	r4, r1
 8004210:	4616      	mov	r6, r2
 8004212:	d505      	bpl.n	8004220 <__swrite+0x1e>
 8004214:	2302      	movs	r3, #2
 8004216:	2200      	movs	r2, #0
 8004218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421c:	f000 f840 	bl	80042a0 <_lseek_r>
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	4632      	mov	r2, r6
 8004224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	4628      	mov	r0, r5
 800422c:	463b      	mov	r3, r7
 800422e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004236:	f000 b857 	b.w	80042e8 <_write_r>

0800423a <__sseek>:
 800423a:	b510      	push	{r4, lr}
 800423c:	460c      	mov	r4, r1
 800423e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004242:	f000 f82d 	bl	80042a0 <_lseek_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	bf15      	itete	ne
 800424c:	6560      	strne	r0, [r4, #84]	; 0x54
 800424e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004256:	81a3      	strheq	r3, [r4, #12]
 8004258:	bf18      	it	ne
 800425a:	81a3      	strhne	r3, [r4, #12]
 800425c:	bd10      	pop	{r4, pc}

0800425e <__sclose>:
 800425e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004262:	f000 b80d 	b.w	8004280 <_close_r>

08004266 <memset>:
 8004266:	4603      	mov	r3, r0
 8004268:	4402      	add	r2, r0
 800426a:	4293      	cmp	r3, r2
 800426c:	d100      	bne.n	8004270 <memset+0xa>
 800426e:	4770      	bx	lr
 8004270:	f803 1b01 	strb.w	r1, [r3], #1
 8004274:	e7f9      	b.n	800426a <memset+0x4>
	...

08004278 <_localeconv_r>:
 8004278:	4800      	ldr	r0, [pc, #0]	; (800427c <_localeconv_r+0x4>)
 800427a:	4770      	bx	lr
 800427c:	20000158 	.word	0x20000158

08004280 <_close_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	2300      	movs	r3, #0
 8004284:	4d05      	ldr	r5, [pc, #20]	; (800429c <_close_r+0x1c>)
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	f7fd fcae 	bl	8001bec <_close>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_close_r+0x1a>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_close_r+0x1a>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	2000072c 	.word	0x2000072c

080042a0 <_lseek_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4604      	mov	r4, r0
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	4d05      	ldr	r5, [pc, #20]	; (80042c0 <_lseek_r+0x20>)
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fd fcc0 	bl	8001c34 <_lseek>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_lseek_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_lseek_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	2000072c 	.word	0x2000072c

080042c4 <_read_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	2200      	movs	r2, #0
 80042ce:	4d05      	ldr	r5, [pc, #20]	; (80042e4 <_read_r+0x20>)
 80042d0:	602a      	str	r2, [r5, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fd fc51 	bl	8001b7a <_read>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_read_r+0x1e>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_read_r+0x1e>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	2000072c 	.word	0x2000072c

080042e8 <_write_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	2200      	movs	r2, #0
 80042f2:	4d05      	ldr	r5, [pc, #20]	; (8004308 <_write_r+0x20>)
 80042f4:	602a      	str	r2, [r5, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f7fd fc5c 	bl	8001bb4 <_write>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d102      	bne.n	8004306 <_write_r+0x1e>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	b103      	cbz	r3, 8004306 <_write_r+0x1e>
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	bd38      	pop	{r3, r4, r5, pc}
 8004308:	2000072c 	.word	0x2000072c

0800430c <__errno>:
 800430c:	4b01      	ldr	r3, [pc, #4]	; (8004314 <__errno+0x8>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000064 	.word	0x20000064

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	2600      	movs	r6, #0
 800431c:	4d0c      	ldr	r5, [pc, #48]	; (8004350 <__libc_init_array+0x38>)
 800431e:	4c0d      	ldr	r4, [pc, #52]	; (8004354 <__libc_init_array+0x3c>)
 8004320:	1b64      	subs	r4, r4, r5
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	42a6      	cmp	r6, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	f002 f886 	bl	8006438 <_init>
 800432c:	2600      	movs	r6, #0
 800432e:	4d0a      	ldr	r5, [pc, #40]	; (8004358 <__libc_init_array+0x40>)
 8004330:	4c0a      	ldr	r4, [pc, #40]	; (800435c <__libc_init_array+0x44>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	42a6      	cmp	r6, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004340:	4798      	blx	r3
 8004342:	3601      	adds	r6, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f855 3b04 	ldr.w	r3, [r5], #4
 800434a:	4798      	blx	r3
 800434c:	3601      	adds	r6, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	0800686c 	.word	0x0800686c
 8004354:	0800686c 	.word	0x0800686c
 8004358:	0800686c 	.word	0x0800686c
 800435c:	08006870 	.word	0x08006870

08004360 <__retarget_lock_init_recursive>:
 8004360:	4770      	bx	lr

08004362 <__retarget_lock_acquire_recursive>:
 8004362:	4770      	bx	lr

08004364 <__retarget_lock_release_recursive>:
 8004364:	4770      	bx	lr

08004366 <memchr>:
 8004366:	4603      	mov	r3, r0
 8004368:	b510      	push	{r4, lr}
 800436a:	b2c9      	uxtb	r1, r1
 800436c:	4402      	add	r2, r0
 800436e:	4293      	cmp	r3, r2
 8004370:	4618      	mov	r0, r3
 8004372:	d101      	bne.n	8004378 <memchr+0x12>
 8004374:	2000      	movs	r0, #0
 8004376:	e003      	b.n	8004380 <memchr+0x1a>
 8004378:	7804      	ldrb	r4, [r0, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	428c      	cmp	r4, r1
 800437e:	d1f6      	bne.n	800436e <memchr+0x8>
 8004380:	bd10      	pop	{r4, pc}

08004382 <memcpy>:
 8004382:	440a      	add	r2, r1
 8004384:	4291      	cmp	r1, r2
 8004386:	f100 33ff 	add.w	r3, r0, #4294967295
 800438a:	d100      	bne.n	800438e <memcpy+0xc>
 800438c:	4770      	bx	lr
 800438e:	b510      	push	{r4, lr}
 8004390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004394:	4291      	cmp	r1, r2
 8004396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439a:	d1f9      	bne.n	8004390 <memcpy+0xe>
 800439c:	bd10      	pop	{r4, pc}

0800439e <quorem>:
 800439e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a2:	6903      	ldr	r3, [r0, #16]
 80043a4:	690c      	ldr	r4, [r1, #16]
 80043a6:	4607      	mov	r7, r0
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	db7f      	blt.n	80044ac <quorem+0x10e>
 80043ac:	3c01      	subs	r4, #1
 80043ae:	f100 0514 	add.w	r5, r0, #20
 80043b2:	f101 0814 	add.w	r8, r1, #20
 80043b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043c4:	3301      	adds	r3, #1
 80043c6:	429a      	cmp	r2, r3
 80043c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80043cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043d4:	d331      	bcc.n	800443a <quorem+0x9c>
 80043d6:	f04f 0e00 	mov.w	lr, #0
 80043da:	4640      	mov	r0, r8
 80043dc:	46ac      	mov	ip, r5
 80043de:	46f2      	mov	sl, lr
 80043e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80043e4:	b293      	uxth	r3, r2
 80043e6:	fb06 e303 	mla	r3, r6, r3, lr
 80043ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80043ee:	0c1a      	lsrs	r2, r3, #16
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	fb06 220e 	mla	r2, r6, lr, r2
 80043f6:	ebaa 0303 	sub.w	r3, sl, r3
 80043fa:	f8dc a000 	ldr.w	sl, [ip]
 80043fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004402:	fa1f fa8a 	uxth.w	sl, sl
 8004406:	4453      	add	r3, sl
 8004408:	f8dc a000 	ldr.w	sl, [ip]
 800440c:	b292      	uxth	r2, r2
 800440e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004412:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004416:	b29b      	uxth	r3, r3
 8004418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800441c:	4581      	cmp	r9, r0
 800441e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004422:	f84c 3b04 	str.w	r3, [ip], #4
 8004426:	d2db      	bcs.n	80043e0 <quorem+0x42>
 8004428:	f855 300b 	ldr.w	r3, [r5, fp]
 800442c:	b92b      	cbnz	r3, 800443a <quorem+0x9c>
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	3b04      	subs	r3, #4
 8004432:	429d      	cmp	r5, r3
 8004434:	461a      	mov	r2, r3
 8004436:	d32d      	bcc.n	8004494 <quorem+0xf6>
 8004438:	613c      	str	r4, [r7, #16]
 800443a:	4638      	mov	r0, r7
 800443c:	f001 f992 	bl	8005764 <__mcmp>
 8004440:	2800      	cmp	r0, #0
 8004442:	db23      	blt.n	800448c <quorem+0xee>
 8004444:	4629      	mov	r1, r5
 8004446:	2000      	movs	r0, #0
 8004448:	3601      	adds	r6, #1
 800444a:	f858 2b04 	ldr.w	r2, [r8], #4
 800444e:	f8d1 c000 	ldr.w	ip, [r1]
 8004452:	b293      	uxth	r3, r2
 8004454:	1ac3      	subs	r3, r0, r3
 8004456:	0c12      	lsrs	r2, r2, #16
 8004458:	fa1f f08c 	uxth.w	r0, ip
 800445c:	4403      	add	r3, r0
 800445e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004462:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004466:	b29b      	uxth	r3, r3
 8004468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800446c:	45c1      	cmp	r9, r8
 800446e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004472:	f841 3b04 	str.w	r3, [r1], #4
 8004476:	d2e8      	bcs.n	800444a <quorem+0xac>
 8004478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800447c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004480:	b922      	cbnz	r2, 800448c <quorem+0xee>
 8004482:	3b04      	subs	r3, #4
 8004484:	429d      	cmp	r5, r3
 8004486:	461a      	mov	r2, r3
 8004488:	d30a      	bcc.n	80044a0 <quorem+0x102>
 800448a:	613c      	str	r4, [r7, #16]
 800448c:	4630      	mov	r0, r6
 800448e:	b003      	add	sp, #12
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	3b04      	subs	r3, #4
 8004498:	2a00      	cmp	r2, #0
 800449a:	d1cd      	bne.n	8004438 <quorem+0x9a>
 800449c:	3c01      	subs	r4, #1
 800449e:	e7c8      	b.n	8004432 <quorem+0x94>
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	3b04      	subs	r3, #4
 80044a4:	2a00      	cmp	r2, #0
 80044a6:	d1f0      	bne.n	800448a <quorem+0xec>
 80044a8:	3c01      	subs	r4, #1
 80044aa:	e7eb      	b.n	8004484 <quorem+0xe6>
 80044ac:	2000      	movs	r0, #0
 80044ae:	e7ee      	b.n	800448e <quorem+0xf0>

080044b0 <_dtoa_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	4616      	mov	r6, r2
 80044b6:	461f      	mov	r7, r3
 80044b8:	69c4      	ldr	r4, [r0, #28]
 80044ba:	b099      	sub	sp, #100	; 0x64
 80044bc:	4605      	mov	r5, r0
 80044be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80044c6:	b974      	cbnz	r4, 80044e6 <_dtoa_r+0x36>
 80044c8:	2010      	movs	r0, #16
 80044ca:	f000 fe1d 	bl	8005108 <malloc>
 80044ce:	4602      	mov	r2, r0
 80044d0:	61e8      	str	r0, [r5, #28]
 80044d2:	b920      	cbnz	r0, 80044de <_dtoa_r+0x2e>
 80044d4:	21ef      	movs	r1, #239	; 0xef
 80044d6:	4bac      	ldr	r3, [pc, #688]	; (8004788 <_dtoa_r+0x2d8>)
 80044d8:	48ac      	ldr	r0, [pc, #688]	; (800478c <_dtoa_r+0x2dc>)
 80044da:	f001 fc6d 	bl	8005db8 <__assert_func>
 80044de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044e2:	6004      	str	r4, [r0, #0]
 80044e4:	60c4      	str	r4, [r0, #12]
 80044e6:	69eb      	ldr	r3, [r5, #28]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	b151      	cbz	r1, 8004502 <_dtoa_r+0x52>
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	2301      	movs	r3, #1
 80044f0:	4093      	lsls	r3, r2
 80044f2:	604a      	str	r2, [r1, #4]
 80044f4:	608b      	str	r3, [r1, #8]
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fefa 	bl	80052f0 <_Bfree>
 80044fc:	2200      	movs	r2, #0
 80044fe:	69eb      	ldr	r3, [r5, #28]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	1e3b      	subs	r3, r7, #0
 8004504:	bfaf      	iteee	ge
 8004506:	2300      	movge	r3, #0
 8004508:	2201      	movlt	r2, #1
 800450a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800450e:	9305      	strlt	r3, [sp, #20]
 8004510:	bfa8      	it	ge
 8004512:	f8c8 3000 	strge.w	r3, [r8]
 8004516:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800451a:	4b9d      	ldr	r3, [pc, #628]	; (8004790 <_dtoa_r+0x2e0>)
 800451c:	bfb8      	it	lt
 800451e:	f8c8 2000 	strlt.w	r2, [r8]
 8004522:	ea33 0309 	bics.w	r3, r3, r9
 8004526:	d119      	bne.n	800455c <_dtoa_r+0xac>
 8004528:	f242 730f 	movw	r3, #9999	; 0x270f
 800452c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004534:	4333      	orrs	r3, r6
 8004536:	f000 8589 	beq.w	800504c <_dtoa_r+0xb9c>
 800453a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800453c:	b953      	cbnz	r3, 8004554 <_dtoa_r+0xa4>
 800453e:	4b95      	ldr	r3, [pc, #596]	; (8004794 <_dtoa_r+0x2e4>)
 8004540:	e023      	b.n	800458a <_dtoa_r+0xda>
 8004542:	4b95      	ldr	r3, [pc, #596]	; (8004798 <_dtoa_r+0x2e8>)
 8004544:	9303      	str	r3, [sp, #12]
 8004546:	3308      	adds	r3, #8
 8004548:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	9803      	ldr	r0, [sp, #12]
 800454e:	b019      	add	sp, #100	; 0x64
 8004550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	4b8f      	ldr	r3, [pc, #572]	; (8004794 <_dtoa_r+0x2e4>)
 8004556:	9303      	str	r3, [sp, #12]
 8004558:	3303      	adds	r3, #3
 800455a:	e7f5      	b.n	8004548 <_dtoa_r+0x98>
 800455c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004560:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	f7fc fa1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004570:	4680      	mov	r8, r0
 8004572:	b160      	cbz	r0, 800458e <_dtoa_r+0xde>
 8004574:	2301      	movs	r3, #1
 8004576:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8562 	beq.w	8005046 <_dtoa_r+0xb96>
 8004582:	4b86      	ldr	r3, [pc, #536]	; (800479c <_dtoa_r+0x2ec>)
 8004584:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	9303      	str	r3, [sp, #12]
 800458c:	e7de      	b.n	800454c <_dtoa_r+0x9c>
 800458e:	ab16      	add	r3, sp, #88	; 0x58
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	ab17      	add	r3, sp, #92	; 0x5c
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	4628      	mov	r0, r5
 8004598:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800459c:	f001 f98a 	bl	80058b4 <__d2b>
 80045a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80045a4:	4682      	mov	sl, r0
 80045a6:	2c00      	cmp	r4, #0
 80045a8:	d07e      	beq.n	80046a8 <_dtoa_r+0x1f8>
 80045aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045b0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80045b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80045bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80045c0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80045c4:	4619      	mov	r1, r3
 80045c6:	2200      	movs	r2, #0
 80045c8:	4b75      	ldr	r3, [pc, #468]	; (80047a0 <_dtoa_r+0x2f0>)
 80045ca:	f7fb fdcd 	bl	8000168 <__aeabi_dsub>
 80045ce:	a368      	add	r3, pc, #416	; (adr r3, 8004770 <_dtoa_r+0x2c0>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb ff80 	bl	80004d8 <__aeabi_dmul>
 80045d8:	a367      	add	r3, pc, #412	; (adr r3, 8004778 <_dtoa_r+0x2c8>)
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f7fb fdc5 	bl	800016c <__adddf3>
 80045e2:	4606      	mov	r6, r0
 80045e4:	4620      	mov	r0, r4
 80045e6:	460f      	mov	r7, r1
 80045e8:	f7fb ff0c 	bl	8000404 <__aeabi_i2d>
 80045ec:	a364      	add	r3, pc, #400	; (adr r3, 8004780 <_dtoa_r+0x2d0>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f7fb ff71 	bl	80004d8 <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4630      	mov	r0, r6
 80045fc:	4639      	mov	r1, r7
 80045fe:	f7fb fdb5 	bl	800016c <__adddf3>
 8004602:	4606      	mov	r6, r0
 8004604:	460f      	mov	r7, r1
 8004606:	f7fc fa17 	bl	8000a38 <__aeabi_d2iz>
 800460a:	2200      	movs	r2, #0
 800460c:	4683      	mov	fp, r0
 800460e:	2300      	movs	r3, #0
 8004610:	4630      	mov	r0, r6
 8004612:	4639      	mov	r1, r7
 8004614:	f7fc f9d2 	bl	80009bc <__aeabi_dcmplt>
 8004618:	b148      	cbz	r0, 800462e <_dtoa_r+0x17e>
 800461a:	4658      	mov	r0, fp
 800461c:	f7fb fef2 	bl	8000404 <__aeabi_i2d>
 8004620:	4632      	mov	r2, r6
 8004622:	463b      	mov	r3, r7
 8004624:	f7fc f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8004628:	b908      	cbnz	r0, 800462e <_dtoa_r+0x17e>
 800462a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800462e:	f1bb 0f16 	cmp.w	fp, #22
 8004632:	d857      	bhi.n	80046e4 <_dtoa_r+0x234>
 8004634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004638:	4b5a      	ldr	r3, [pc, #360]	; (80047a4 <_dtoa_r+0x2f4>)
 800463a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f7fc f9bb 	bl	80009bc <__aeabi_dcmplt>
 8004646:	2800      	cmp	r0, #0
 8004648:	d04e      	beq.n	80046e8 <_dtoa_r+0x238>
 800464a:	2300      	movs	r3, #0
 800464c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004650:	930f      	str	r3, [sp, #60]	; 0x3c
 8004652:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004654:	1b1b      	subs	r3, r3, r4
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	bf46      	itte	mi
 800465a:	f1c3 0901 	rsbmi	r9, r3, #1
 800465e:	2300      	movmi	r3, #0
 8004660:	f04f 0900 	movpl.w	r9, #0
 8004664:	9209      	str	r2, [sp, #36]	; 0x24
 8004666:	bf48      	it	mi
 8004668:	9309      	strmi	r3, [sp, #36]	; 0x24
 800466a:	f1bb 0f00 	cmp.w	fp, #0
 800466e:	db3d      	blt.n	80046ec <_dtoa_r+0x23c>
 8004670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004672:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004676:	445b      	add	r3, fp
 8004678:	9309      	str	r3, [sp, #36]	; 0x24
 800467a:	2300      	movs	r3, #0
 800467c:	930a      	str	r3, [sp, #40]	; 0x28
 800467e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004680:	2b09      	cmp	r3, #9
 8004682:	d867      	bhi.n	8004754 <_dtoa_r+0x2a4>
 8004684:	2b05      	cmp	r3, #5
 8004686:	bfc4      	itt	gt
 8004688:	3b04      	subgt	r3, #4
 800468a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800468c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800468e:	bfc8      	it	gt
 8004690:	2400      	movgt	r4, #0
 8004692:	f1a3 0302 	sub.w	r3, r3, #2
 8004696:	bfd8      	it	le
 8004698:	2401      	movle	r4, #1
 800469a:	2b03      	cmp	r3, #3
 800469c:	f200 8086 	bhi.w	80047ac <_dtoa_r+0x2fc>
 80046a0:	e8df f003 	tbb	[pc, r3]
 80046a4:	5637392c 	.word	0x5637392c
 80046a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80046ac:	441c      	add	r4, r3
 80046ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	bfc1      	itttt	gt
 80046b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046ba:	fa09 f903 	lslgt.w	r9, r9, r3
 80046be:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80046c2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80046c6:	bfd6      	itet	le
 80046c8:	f1c3 0320 	rsble	r3, r3, #32
 80046cc:	ea49 0003 	orrgt.w	r0, r9, r3
 80046d0:	fa06 f003 	lslle.w	r0, r6, r3
 80046d4:	f7fb fe86 	bl	80003e4 <__aeabi_ui2d>
 80046d8:	2201      	movs	r2, #1
 80046da:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80046de:	3c01      	subs	r4, #1
 80046e0:	9213      	str	r2, [sp, #76]	; 0x4c
 80046e2:	e76f      	b.n	80045c4 <_dtoa_r+0x114>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e7b3      	b.n	8004650 <_dtoa_r+0x1a0>
 80046e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80046ea:	e7b2      	b.n	8004652 <_dtoa_r+0x1a2>
 80046ec:	f1cb 0300 	rsb	r3, fp, #0
 80046f0:	930a      	str	r3, [sp, #40]	; 0x28
 80046f2:	2300      	movs	r3, #0
 80046f4:	eba9 090b 	sub.w	r9, r9, fp
 80046f8:	930e      	str	r3, [sp, #56]	; 0x38
 80046fa:	e7c0      	b.n	800467e <_dtoa_r+0x1ce>
 80046fc:	2300      	movs	r3, #0
 80046fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004702:	2b00      	cmp	r3, #0
 8004704:	dc55      	bgt.n	80047b2 <_dtoa_r+0x302>
 8004706:	2301      	movs	r3, #1
 8004708:	461a      	mov	r2, r3
 800470a:	9306      	str	r3, [sp, #24]
 800470c:	9308      	str	r3, [sp, #32]
 800470e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004710:	e00b      	b.n	800472a <_dtoa_r+0x27a>
 8004712:	2301      	movs	r3, #1
 8004714:	e7f3      	b.n	80046fe <_dtoa_r+0x24e>
 8004716:	2300      	movs	r3, #0
 8004718:	930b      	str	r3, [sp, #44]	; 0x2c
 800471a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800471c:	445b      	add	r3, fp
 800471e:	9306      	str	r3, [sp, #24]
 8004720:	3301      	adds	r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	9308      	str	r3, [sp, #32]
 8004726:	bfb8      	it	lt
 8004728:	2301      	movlt	r3, #1
 800472a:	2100      	movs	r1, #0
 800472c:	2204      	movs	r2, #4
 800472e:	69e8      	ldr	r0, [r5, #28]
 8004730:	f102 0614 	add.w	r6, r2, #20
 8004734:	429e      	cmp	r6, r3
 8004736:	d940      	bls.n	80047ba <_dtoa_r+0x30a>
 8004738:	6041      	str	r1, [r0, #4]
 800473a:	4628      	mov	r0, r5
 800473c:	f000 fd98 	bl	8005270 <_Balloc>
 8004740:	9003      	str	r0, [sp, #12]
 8004742:	2800      	cmp	r0, #0
 8004744:	d13c      	bne.n	80047c0 <_dtoa_r+0x310>
 8004746:	4602      	mov	r2, r0
 8004748:	f240 11af 	movw	r1, #431	; 0x1af
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <_dtoa_r+0x2f8>)
 800474e:	e6c3      	b.n	80044d8 <_dtoa_r+0x28>
 8004750:	2301      	movs	r3, #1
 8004752:	e7e1      	b.n	8004718 <_dtoa_r+0x268>
 8004754:	2401      	movs	r4, #1
 8004756:	2300      	movs	r3, #0
 8004758:	940b      	str	r4, [sp, #44]	; 0x2c
 800475a:	9322      	str	r3, [sp, #136]	; 0x88
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	2200      	movs	r2, #0
 8004762:	9306      	str	r3, [sp, #24]
 8004764:	9308      	str	r3, [sp, #32]
 8004766:	2312      	movs	r3, #18
 8004768:	e7d1      	b.n	800470e <_dtoa_r+0x25e>
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w
 8004770:	636f4361 	.word	0x636f4361
 8004774:	3fd287a7 	.word	0x3fd287a7
 8004778:	8b60c8b3 	.word	0x8b60c8b3
 800477c:	3fc68a28 	.word	0x3fc68a28
 8004780:	509f79fb 	.word	0x509f79fb
 8004784:	3fd34413 	.word	0x3fd34413
 8004788:	08006533 	.word	0x08006533
 800478c:	0800654a 	.word	0x0800654a
 8004790:	7ff00000 	.word	0x7ff00000
 8004794:	0800652f 	.word	0x0800652f
 8004798:	08006526 	.word	0x08006526
 800479c:	08006503 	.word	0x08006503
 80047a0:	3ff80000 	.word	0x3ff80000
 80047a4:	08006638 	.word	0x08006638
 80047a8:	080065a2 	.word	0x080065a2
 80047ac:	2301      	movs	r3, #1
 80047ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80047b0:	e7d4      	b.n	800475c <_dtoa_r+0x2ac>
 80047b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047b4:	9306      	str	r3, [sp, #24]
 80047b6:	9308      	str	r3, [sp, #32]
 80047b8:	e7b7      	b.n	800472a <_dtoa_r+0x27a>
 80047ba:	3101      	adds	r1, #1
 80047bc:	0052      	lsls	r2, r2, #1
 80047be:	e7b7      	b.n	8004730 <_dtoa_r+0x280>
 80047c0:	69eb      	ldr	r3, [r5, #28]
 80047c2:	9a03      	ldr	r2, [sp, #12]
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	9b08      	ldr	r3, [sp, #32]
 80047c8:	2b0e      	cmp	r3, #14
 80047ca:	f200 80a8 	bhi.w	800491e <_dtoa_r+0x46e>
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	f000 80a5 	beq.w	800491e <_dtoa_r+0x46e>
 80047d4:	f1bb 0f00 	cmp.w	fp, #0
 80047d8:	dd34      	ble.n	8004844 <_dtoa_r+0x394>
 80047da:	4b9a      	ldr	r3, [pc, #616]	; (8004a44 <_dtoa_r+0x594>)
 80047dc:	f00b 020f 	and.w	r2, fp, #15
 80047e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80047e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80047f0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80047f4:	d016      	beq.n	8004824 <_dtoa_r+0x374>
 80047f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047fa:	4b93      	ldr	r3, [pc, #588]	; (8004a48 <_dtoa_r+0x598>)
 80047fc:	2703      	movs	r7, #3
 80047fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004802:	f7fb ff93 	bl	800072c <__aeabi_ddiv>
 8004806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800480a:	f004 040f 	and.w	r4, r4, #15
 800480e:	4e8e      	ldr	r6, [pc, #568]	; (8004a48 <_dtoa_r+0x598>)
 8004810:	b954      	cbnz	r4, 8004828 <_dtoa_r+0x378>
 8004812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800481a:	f7fb ff87 	bl	800072c <__aeabi_ddiv>
 800481e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004822:	e029      	b.n	8004878 <_dtoa_r+0x3c8>
 8004824:	2702      	movs	r7, #2
 8004826:	e7f2      	b.n	800480e <_dtoa_r+0x35e>
 8004828:	07e1      	lsls	r1, r4, #31
 800482a:	d508      	bpl.n	800483e <_dtoa_r+0x38e>
 800482c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004830:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004834:	f7fb fe50 	bl	80004d8 <__aeabi_dmul>
 8004838:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800483c:	3701      	adds	r7, #1
 800483e:	1064      	asrs	r4, r4, #1
 8004840:	3608      	adds	r6, #8
 8004842:	e7e5      	b.n	8004810 <_dtoa_r+0x360>
 8004844:	f000 80a5 	beq.w	8004992 <_dtoa_r+0x4e2>
 8004848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800484c:	f1cb 0400 	rsb	r4, fp, #0
 8004850:	4b7c      	ldr	r3, [pc, #496]	; (8004a44 <_dtoa_r+0x594>)
 8004852:	f004 020f 	and.w	r2, r4, #15
 8004856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fe3b 	bl	80004d8 <__aeabi_dmul>
 8004862:	2702      	movs	r7, #2
 8004864:	2300      	movs	r3, #0
 8004866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800486a:	4e77      	ldr	r6, [pc, #476]	; (8004a48 <_dtoa_r+0x598>)
 800486c:	1124      	asrs	r4, r4, #4
 800486e:	2c00      	cmp	r4, #0
 8004870:	f040 8084 	bne.w	800497c <_dtoa_r+0x4cc>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1d2      	bne.n	800481e <_dtoa_r+0x36e>
 8004878:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800487c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8087 	beq.w	8004996 <_dtoa_r+0x4e6>
 8004888:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800488c:	2200      	movs	r2, #0
 800488e:	4b6f      	ldr	r3, [pc, #444]	; (8004a4c <_dtoa_r+0x59c>)
 8004890:	f7fc f894 	bl	80009bc <__aeabi_dcmplt>
 8004894:	2800      	cmp	r0, #0
 8004896:	d07e      	beq.n	8004996 <_dtoa_r+0x4e6>
 8004898:	9b08      	ldr	r3, [sp, #32]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d07b      	beq.n	8004996 <_dtoa_r+0x4e6>
 800489e:	9b06      	ldr	r3, [sp, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dd38      	ble.n	8004916 <_dtoa_r+0x466>
 80048a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048a8:	2200      	movs	r2, #0
 80048aa:	4b69      	ldr	r3, [pc, #420]	; (8004a50 <_dtoa_r+0x5a0>)
 80048ac:	f7fb fe14 	bl	80004d8 <__aeabi_dmul>
 80048b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048b4:	9c06      	ldr	r4, [sp, #24]
 80048b6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80048ba:	3701      	adds	r7, #1
 80048bc:	4638      	mov	r0, r7
 80048be:	f7fb fda1 	bl	8000404 <__aeabi_i2d>
 80048c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c6:	f7fb fe07 	bl	80004d8 <__aeabi_dmul>
 80048ca:	2200      	movs	r2, #0
 80048cc:	4b61      	ldr	r3, [pc, #388]	; (8004a54 <_dtoa_r+0x5a4>)
 80048ce:	f7fb fc4d 	bl	800016c <__adddf3>
 80048d2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80048d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048da:	9611      	str	r6, [sp, #68]	; 0x44
 80048dc:	2c00      	cmp	r4, #0
 80048de:	d15d      	bne.n	800499c <_dtoa_r+0x4ec>
 80048e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048e4:	2200      	movs	r2, #0
 80048e6:	4b5c      	ldr	r3, [pc, #368]	; (8004a58 <_dtoa_r+0x5a8>)
 80048e8:	f7fb fc3e 	bl	8000168 <__aeabi_dsub>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048f4:	4633      	mov	r3, r6
 80048f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048f8:	f7fc f87e 	bl	80009f8 <__aeabi_dcmpgt>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f040 8295 	bne.w	8004e2c <_dtoa_r+0x97c>
 8004902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004906:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004908:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800490c:	f7fc f856 	bl	80009bc <__aeabi_dcmplt>
 8004910:	2800      	cmp	r0, #0
 8004912:	f040 8289 	bne.w	8004e28 <_dtoa_r+0x978>
 8004916:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800491a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800491e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004920:	2b00      	cmp	r3, #0
 8004922:	f2c0 8151 	blt.w	8004bc8 <_dtoa_r+0x718>
 8004926:	f1bb 0f0e 	cmp.w	fp, #14
 800492a:	f300 814d 	bgt.w	8004bc8 <_dtoa_r+0x718>
 800492e:	4b45      	ldr	r3, [pc, #276]	; (8004a44 <_dtoa_r+0x594>)
 8004930:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004934:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004938:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800493c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800493e:	2b00      	cmp	r3, #0
 8004940:	f280 80da 	bge.w	8004af8 <_dtoa_r+0x648>
 8004944:	9b08      	ldr	r3, [sp, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f300 80d6 	bgt.w	8004af8 <_dtoa_r+0x648>
 800494c:	f040 826b 	bne.w	8004e26 <_dtoa_r+0x976>
 8004950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004954:	2200      	movs	r2, #0
 8004956:	4b40      	ldr	r3, [pc, #256]	; (8004a58 <_dtoa_r+0x5a8>)
 8004958:	f7fb fdbe 	bl	80004d8 <__aeabi_dmul>
 800495c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004960:	f7fc f840 	bl	80009e4 <__aeabi_dcmpge>
 8004964:	9c08      	ldr	r4, [sp, #32]
 8004966:	4626      	mov	r6, r4
 8004968:	2800      	cmp	r0, #0
 800496a:	f040 8241 	bne.w	8004df0 <_dtoa_r+0x940>
 800496e:	2331      	movs	r3, #49	; 0x31
 8004970:	9f03      	ldr	r7, [sp, #12]
 8004972:	f10b 0b01 	add.w	fp, fp, #1
 8004976:	f807 3b01 	strb.w	r3, [r7], #1
 800497a:	e23d      	b.n	8004df8 <_dtoa_r+0x948>
 800497c:	07e2      	lsls	r2, r4, #31
 800497e:	d505      	bpl.n	800498c <_dtoa_r+0x4dc>
 8004980:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	2301      	movs	r3, #1
 800498a:	3701      	adds	r7, #1
 800498c:	1064      	asrs	r4, r4, #1
 800498e:	3608      	adds	r6, #8
 8004990:	e76d      	b.n	800486e <_dtoa_r+0x3be>
 8004992:	2702      	movs	r7, #2
 8004994:	e770      	b.n	8004878 <_dtoa_r+0x3c8>
 8004996:	46d8      	mov	r8, fp
 8004998:	9c08      	ldr	r4, [sp, #32]
 800499a:	e78f      	b.n	80048bc <_dtoa_r+0x40c>
 800499c:	9903      	ldr	r1, [sp, #12]
 800499e:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <_dtoa_r+0x594>)
 80049a0:	4421      	add	r1, r4
 80049a2:	9112      	str	r1, [sp, #72]	; 0x48
 80049a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049aa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80049ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049b2:	2900      	cmp	r1, #0
 80049b4:	d054      	beq.n	8004a60 <_dtoa_r+0x5b0>
 80049b6:	2000      	movs	r0, #0
 80049b8:	4928      	ldr	r1, [pc, #160]	; (8004a5c <_dtoa_r+0x5ac>)
 80049ba:	f7fb feb7 	bl	800072c <__aeabi_ddiv>
 80049be:	463b      	mov	r3, r7
 80049c0:	4632      	mov	r2, r6
 80049c2:	f7fb fbd1 	bl	8000168 <__aeabi_dsub>
 80049c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049ca:	9f03      	ldr	r7, [sp, #12]
 80049cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049d0:	f7fc f832 	bl	8000a38 <__aeabi_d2iz>
 80049d4:	4604      	mov	r4, r0
 80049d6:	f7fb fd15 	bl	8000404 <__aeabi_i2d>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049e2:	f7fb fbc1 	bl	8000168 <__aeabi_dsub>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	3430      	adds	r4, #48	; 0x30
 80049ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049f4:	f807 4b01 	strb.w	r4, [r7], #1
 80049f8:	f7fb ffe0 	bl	80009bc <__aeabi_dcmplt>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d173      	bne.n	8004ae8 <_dtoa_r+0x638>
 8004a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a04:	2000      	movs	r0, #0
 8004a06:	4911      	ldr	r1, [pc, #68]	; (8004a4c <_dtoa_r+0x59c>)
 8004a08:	f7fb fbae 	bl	8000168 <__aeabi_dsub>
 8004a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a10:	f7fb ffd4 	bl	80009bc <__aeabi_dcmplt>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 80b6 	bne.w	8004b86 <_dtoa_r+0x6d6>
 8004a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a1c:	429f      	cmp	r7, r3
 8004a1e:	f43f af7a 	beq.w	8004916 <_dtoa_r+0x466>
 8004a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a26:	2200      	movs	r2, #0
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <_dtoa_r+0x5a0>)
 8004a2a:	f7fb fd55 	bl	80004d8 <__aeabi_dmul>
 8004a2e:	2200      	movs	r2, #0
 8004a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <_dtoa_r+0x5a0>)
 8004a3a:	f7fb fd4d 	bl	80004d8 <__aeabi_dmul>
 8004a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a42:	e7c3      	b.n	80049cc <_dtoa_r+0x51c>
 8004a44:	08006638 	.word	0x08006638
 8004a48:	08006610 	.word	0x08006610
 8004a4c:	3ff00000 	.word	0x3ff00000
 8004a50:	40240000 	.word	0x40240000
 8004a54:	401c0000 	.word	0x401c0000
 8004a58:	40140000 	.word	0x40140000
 8004a5c:	3fe00000 	.word	0x3fe00000
 8004a60:	4630      	mov	r0, r6
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fb fd38 	bl	80004d8 <__aeabi_dmul>
 8004a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a6e:	9c03      	ldr	r4, [sp, #12]
 8004a70:	9314      	str	r3, [sp, #80]	; 0x50
 8004a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a76:	f7fb ffdf 	bl	8000a38 <__aeabi_d2iz>
 8004a7a:	9015      	str	r0, [sp, #84]	; 0x54
 8004a7c:	f7fb fcc2 	bl	8000404 <__aeabi_i2d>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a88:	f7fb fb6e 	bl	8000168 <__aeabi_dsub>
 8004a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a8e:	4606      	mov	r6, r0
 8004a90:	3330      	adds	r3, #48	; 0x30
 8004a92:	f804 3b01 	strb.w	r3, [r4], #1
 8004a96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a98:	460f      	mov	r7, r1
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	d124      	bne.n	8004aec <_dtoa_r+0x63c>
 8004aa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004aa6:	4baf      	ldr	r3, [pc, #700]	; (8004d64 <_dtoa_r+0x8b4>)
 8004aa8:	f7fb fb60 	bl	800016c <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	f7fb ffa0 	bl	80009f8 <__aeabi_dcmpgt>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d163      	bne.n	8004b84 <_dtoa_r+0x6d4>
 8004abc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	49a8      	ldr	r1, [pc, #672]	; (8004d64 <_dtoa_r+0x8b4>)
 8004ac4:	f7fb fb50 	bl	8000168 <__aeabi_dsub>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4630      	mov	r0, r6
 8004ace:	4639      	mov	r1, r7
 8004ad0:	f7fb ff74 	bl	80009bc <__aeabi_dcmplt>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	f43f af1e 	beq.w	8004916 <_dtoa_r+0x466>
 8004ada:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004adc:	1e7b      	subs	r3, r7, #1
 8004ade:	9314      	str	r3, [sp, #80]	; 0x50
 8004ae0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ae4:	2b30      	cmp	r3, #48	; 0x30
 8004ae6:	d0f8      	beq.n	8004ada <_dtoa_r+0x62a>
 8004ae8:	46c3      	mov	fp, r8
 8004aea:	e03b      	b.n	8004b64 <_dtoa_r+0x6b4>
 8004aec:	4b9e      	ldr	r3, [pc, #632]	; (8004d68 <_dtoa_r+0x8b8>)
 8004aee:	f7fb fcf3 	bl	80004d8 <__aeabi_dmul>
 8004af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004af6:	e7bc      	b.n	8004a72 <_dtoa_r+0x5c2>
 8004af8:	9f03      	ldr	r7, [sp, #12]
 8004afa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004afe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b02:	4640      	mov	r0, r8
 8004b04:	4649      	mov	r1, r9
 8004b06:	f7fb fe11 	bl	800072c <__aeabi_ddiv>
 8004b0a:	f7fb ff95 	bl	8000a38 <__aeabi_d2iz>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	f7fb fc78 	bl	8000404 <__aeabi_i2d>
 8004b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b18:	f7fb fcde 	bl	80004d8 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	f7fb fb20 	bl	8000168 <__aeabi_dsub>
 8004b28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004b2c:	f807 6b01 	strb.w	r6, [r7], #1
 8004b30:	9e03      	ldr	r6, [sp, #12]
 8004b32:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004b36:	1bbe      	subs	r6, r7, r6
 8004b38:	45b4      	cmp	ip, r6
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	d136      	bne.n	8004bae <_dtoa_r+0x6fe>
 8004b40:	f7fb fb14 	bl	800016c <__adddf3>
 8004b44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b48:	4680      	mov	r8, r0
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	f7fb ff54 	bl	80009f8 <__aeabi_dcmpgt>
 8004b50:	bb58      	cbnz	r0, 8004baa <_dtoa_r+0x6fa>
 8004b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b56:	4640      	mov	r0, r8
 8004b58:	4649      	mov	r1, r9
 8004b5a:	f7fb ff25 	bl	80009a8 <__aeabi_dcmpeq>
 8004b5e:	b108      	cbz	r0, 8004b64 <_dtoa_r+0x6b4>
 8004b60:	07e3      	lsls	r3, r4, #31
 8004b62:	d422      	bmi.n	8004baa <_dtoa_r+0x6fa>
 8004b64:	4651      	mov	r1, sl
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fbc2 	bl	80052f0 <_Bfree>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b70:	703b      	strb	r3, [r7, #0]
 8004b72:	f10b 0301 	add.w	r3, fp, #1
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f43f ace6 	beq.w	800454c <_dtoa_r+0x9c>
 8004b80:	601f      	str	r7, [r3, #0]
 8004b82:	e4e3      	b.n	800454c <_dtoa_r+0x9c>
 8004b84:	4627      	mov	r7, r4
 8004b86:	463b      	mov	r3, r7
 8004b88:	461f      	mov	r7, r3
 8004b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b8e:	2a39      	cmp	r2, #57	; 0x39
 8004b90:	d107      	bne.n	8004ba2 <_dtoa_r+0x6f2>
 8004b92:	9a03      	ldr	r2, [sp, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1f7      	bne.n	8004b88 <_dtoa_r+0x6d8>
 8004b98:	2230      	movs	r2, #48	; 0x30
 8004b9a:	9903      	ldr	r1, [sp, #12]
 8004b9c:	f108 0801 	add.w	r8, r8, #1
 8004ba0:	700a      	strb	r2, [r1, #0]
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	3201      	adds	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	e79e      	b.n	8004ae8 <_dtoa_r+0x638>
 8004baa:	46d8      	mov	r8, fp
 8004bac:	e7eb      	b.n	8004b86 <_dtoa_r+0x6d6>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	4b6d      	ldr	r3, [pc, #436]	; (8004d68 <_dtoa_r+0x8b8>)
 8004bb2:	f7fb fc91 	bl	80004d8 <__aeabi_dmul>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4680      	mov	r8, r0
 8004bbc:	4689      	mov	r9, r1
 8004bbe:	f7fb fef3 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d09b      	beq.n	8004afe <_dtoa_r+0x64e>
 8004bc6:	e7cd      	b.n	8004b64 <_dtoa_r+0x6b4>
 8004bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	f000 80c4 	beq.w	8004d58 <_dtoa_r+0x8a8>
 8004bd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bd2:	2a01      	cmp	r2, #1
 8004bd4:	f300 80a8 	bgt.w	8004d28 <_dtoa_r+0x878>
 8004bd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	f000 80a0 	beq.w	8004d20 <_dtoa_r+0x870>
 8004be0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004be4:	464f      	mov	r7, r9
 8004be6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bea:	2101      	movs	r1, #1
 8004bec:	441a      	add	r2, r3
 8004bee:	4628      	mov	r0, r5
 8004bf0:	4499      	add	r9, r3
 8004bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bf4:	f000 fc32 	bl	800545c <__i2b>
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	b15f      	cbz	r7, 8004c14 <_dtoa_r+0x764>
 8004bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd08      	ble.n	8004c14 <_dtoa_r+0x764>
 8004c02:	42bb      	cmp	r3, r7
 8004c04:	bfa8      	it	ge
 8004c06:	463b      	movge	r3, r7
 8004c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c0a:	eba9 0903 	sub.w	r9, r9, r3
 8004c0e:	1aff      	subs	r7, r7, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	9309      	str	r3, [sp, #36]	; 0x24
 8004c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c16:	b1f3      	cbz	r3, 8004c56 <_dtoa_r+0x7a6>
 8004c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80a0 	beq.w	8004d60 <_dtoa_r+0x8b0>
 8004c20:	2c00      	cmp	r4, #0
 8004c22:	dd10      	ble.n	8004c46 <_dtoa_r+0x796>
 8004c24:	4631      	mov	r1, r6
 8004c26:	4622      	mov	r2, r4
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 fcd5 	bl	80055d8 <__pow5mult>
 8004c2e:	4652      	mov	r2, sl
 8004c30:	4601      	mov	r1, r0
 8004c32:	4606      	mov	r6, r0
 8004c34:	4628      	mov	r0, r5
 8004c36:	f000 fc27 	bl	8005488 <__multiply>
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 fb56 	bl	80052f0 <_Bfree>
 8004c44:	46c2      	mov	sl, r8
 8004c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c48:	1b1a      	subs	r2, r3, r4
 8004c4a:	d004      	beq.n	8004c56 <_dtoa_r+0x7a6>
 8004c4c:	4651      	mov	r1, sl
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 fcc2 	bl	80055d8 <__pow5mult>
 8004c54:	4682      	mov	sl, r0
 8004c56:	2101      	movs	r1, #1
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f000 fbff 	bl	800545c <__i2b>
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c60:	4604      	mov	r4, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f340 8082 	ble.w	8004d6c <_dtoa_r+0x8bc>
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 fcb3 	bl	80055d8 <__pow5mult>
 8004c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c74:	4604      	mov	r4, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	dd7b      	ble.n	8004d72 <_dtoa_r+0x8c2>
 8004c7a:	f04f 0800 	mov.w	r8, #0
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c84:	6918      	ldr	r0, [r3, #16]
 8004c86:	f000 fb9b 	bl	80053c0 <__hi0bits>
 8004c8a:	f1c0 0020 	rsb	r0, r0, #32
 8004c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c90:	4418      	add	r0, r3
 8004c92:	f010 001f 	ands.w	r0, r0, #31
 8004c96:	f000 8092 	beq.w	8004dbe <_dtoa_r+0x90e>
 8004c9a:	f1c0 0320 	rsb	r3, r0, #32
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	f340 8085 	ble.w	8004dae <_dtoa_r+0x8fe>
 8004ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca6:	f1c0 001c 	rsb	r0, r0, #28
 8004caa:	4403      	add	r3, r0
 8004cac:	4481      	add	r9, r0
 8004cae:	4407      	add	r7, r0
 8004cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb2:	f1b9 0f00 	cmp.w	r9, #0
 8004cb6:	dd05      	ble.n	8004cc4 <_dtoa_r+0x814>
 8004cb8:	4651      	mov	r1, sl
 8004cba:	464a      	mov	r2, r9
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 fce5 	bl	800568c <__lshift>
 8004cc2:	4682      	mov	sl, r0
 8004cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd05      	ble.n	8004cd6 <_dtoa_r+0x826>
 8004cca:	4621      	mov	r1, r4
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 fcdc 	bl	800568c <__lshift>
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d072      	beq.n	8004dc2 <_dtoa_r+0x912>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4650      	mov	r0, sl
 8004ce0:	f000 fd40 	bl	8005764 <__mcmp>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	da6c      	bge.n	8004dc2 <_dtoa_r+0x912>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4651      	mov	r1, sl
 8004cec:	220a      	movs	r2, #10
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 fb20 	bl	8005334 <__multadd>
 8004cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 81ac 	beq.w	800505a <_dtoa_r+0xbaa>
 8004d02:	2300      	movs	r3, #0
 8004d04:	4631      	mov	r1, r6
 8004d06:	220a      	movs	r2, #10
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f000 fb13 	bl	8005334 <__multadd>
 8004d0e:	9b06      	ldr	r3, [sp, #24]
 8004d10:	4606      	mov	r6, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f300 8093 	bgt.w	8004e3e <_dtoa_r+0x98e>
 8004d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	dc59      	bgt.n	8004dd2 <_dtoa_r+0x922>
 8004d1e:	e08e      	b.n	8004e3e <_dtoa_r+0x98e>
 8004d20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d26:	e75d      	b.n	8004be4 <_dtoa_r+0x734>
 8004d28:	9b08      	ldr	r3, [sp, #32]
 8004d2a:	1e5c      	subs	r4, r3, #1
 8004d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	bfbf      	itttt	lt
 8004d32:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004d36:	1ae3      	sublt	r3, r4, r3
 8004d38:	18d2      	addlt	r2, r2, r3
 8004d3a:	bfa8      	it	ge
 8004d3c:	1b1c      	subge	r4, r3, r4
 8004d3e:	9b08      	ldr	r3, [sp, #32]
 8004d40:	bfbe      	ittt	lt
 8004d42:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004d44:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004d46:	2400      	movlt	r4, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bfb5      	itete	lt
 8004d4c:	eba9 0703 	sublt.w	r7, r9, r3
 8004d50:	464f      	movge	r7, r9
 8004d52:	2300      	movlt	r3, #0
 8004d54:	9b08      	ldrge	r3, [sp, #32]
 8004d56:	e747      	b.n	8004be8 <_dtoa_r+0x738>
 8004d58:	464f      	mov	r7, r9
 8004d5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004d5e:	e74c      	b.n	8004bfa <_dtoa_r+0x74a>
 8004d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d62:	e773      	b.n	8004c4c <_dtoa_r+0x79c>
 8004d64:	3fe00000 	.word	0x3fe00000
 8004d68:	40240000 	.word	0x40240000
 8004d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	dc18      	bgt.n	8004da4 <_dtoa_r+0x8f4>
 8004d72:	9b04      	ldr	r3, [sp, #16]
 8004d74:	b9b3      	cbnz	r3, 8004da4 <_dtoa_r+0x8f4>
 8004d76:	9b05      	ldr	r3, [sp, #20]
 8004d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7c:	b993      	cbnz	r3, 8004da4 <_dtoa_r+0x8f4>
 8004d7e:	9b05      	ldr	r3, [sp, #20]
 8004d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d84:	0d1b      	lsrs	r3, r3, #20
 8004d86:	051b      	lsls	r3, r3, #20
 8004d88:	b17b      	cbz	r3, 8004daa <_dtoa_r+0x8fa>
 8004d8a:	f04f 0801 	mov.w	r8, #1
 8004d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d90:	f109 0901 	add.w	r9, r9, #1
 8004d94:	3301      	adds	r3, #1
 8004d96:	9309      	str	r3, [sp, #36]	; 0x24
 8004d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f47f af6f 	bne.w	8004c7e <_dtoa_r+0x7ce>
 8004da0:	2001      	movs	r0, #1
 8004da2:	e774      	b.n	8004c8e <_dtoa_r+0x7de>
 8004da4:	f04f 0800 	mov.w	r8, #0
 8004da8:	e7f6      	b.n	8004d98 <_dtoa_r+0x8e8>
 8004daa:	4698      	mov	r8, r3
 8004dac:	e7f4      	b.n	8004d98 <_dtoa_r+0x8e8>
 8004dae:	d080      	beq.n	8004cb2 <_dtoa_r+0x802>
 8004db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db2:	331c      	adds	r3, #28
 8004db4:	441a      	add	r2, r3
 8004db6:	4499      	add	r9, r3
 8004db8:	441f      	add	r7, r3
 8004dba:	9209      	str	r2, [sp, #36]	; 0x24
 8004dbc:	e779      	b.n	8004cb2 <_dtoa_r+0x802>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	e7f6      	b.n	8004db0 <_dtoa_r+0x900>
 8004dc2:	9b08      	ldr	r3, [sp, #32]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dc34      	bgt.n	8004e32 <_dtoa_r+0x982>
 8004dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	dd31      	ble.n	8004e32 <_dtoa_r+0x982>
 8004dce:	9b08      	ldr	r3, [sp, #32]
 8004dd0:	9306      	str	r3, [sp, #24]
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	b963      	cbnz	r3, 8004df0 <_dtoa_r+0x940>
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	2205      	movs	r2, #5
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 faaa 	bl	8005334 <__multadd>
 8004de0:	4601      	mov	r1, r0
 8004de2:	4604      	mov	r4, r0
 8004de4:	4650      	mov	r0, sl
 8004de6:	f000 fcbd 	bl	8005764 <__mcmp>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f73f adbf 	bgt.w	800496e <_dtoa_r+0x4be>
 8004df0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004df2:	9f03      	ldr	r7, [sp, #12]
 8004df4:	ea6f 0b03 	mvn.w	fp, r3
 8004df8:	f04f 0800 	mov.w	r8, #0
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fa76 	bl	80052f0 <_Bfree>
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	f43f aead 	beq.w	8004b64 <_dtoa_r+0x6b4>
 8004e0a:	f1b8 0f00 	cmp.w	r8, #0
 8004e0e:	d005      	beq.n	8004e1c <_dtoa_r+0x96c>
 8004e10:	45b0      	cmp	r8, r6
 8004e12:	d003      	beq.n	8004e1c <_dtoa_r+0x96c>
 8004e14:	4641      	mov	r1, r8
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fa6a 	bl	80052f0 <_Bfree>
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 fa66 	bl	80052f0 <_Bfree>
 8004e24:	e69e      	b.n	8004b64 <_dtoa_r+0x6b4>
 8004e26:	2400      	movs	r4, #0
 8004e28:	4626      	mov	r6, r4
 8004e2a:	e7e1      	b.n	8004df0 <_dtoa_r+0x940>
 8004e2c:	46c3      	mov	fp, r8
 8004e2e:	4626      	mov	r6, r4
 8004e30:	e59d      	b.n	800496e <_dtoa_r+0x4be>
 8004e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80c8 	beq.w	8004fca <_dtoa_r+0xb1a>
 8004e3a:	9b08      	ldr	r3, [sp, #32]
 8004e3c:	9306      	str	r3, [sp, #24]
 8004e3e:	2f00      	cmp	r7, #0
 8004e40:	dd05      	ble.n	8004e4e <_dtoa_r+0x99e>
 8004e42:	4631      	mov	r1, r6
 8004e44:	463a      	mov	r2, r7
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 fc20 	bl	800568c <__lshift>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	f1b8 0f00 	cmp.w	r8, #0
 8004e52:	d05b      	beq.n	8004f0c <_dtoa_r+0xa5c>
 8004e54:	4628      	mov	r0, r5
 8004e56:	6871      	ldr	r1, [r6, #4]
 8004e58:	f000 fa0a 	bl	8005270 <_Balloc>
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	b928      	cbnz	r0, 8004e6c <_dtoa_r+0x9bc>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004e66:	4b81      	ldr	r3, [pc, #516]	; (800506c <_dtoa_r+0xbbc>)
 8004e68:	f7ff bb36 	b.w	80044d8 <_dtoa_r+0x28>
 8004e6c:	6932      	ldr	r2, [r6, #16]
 8004e6e:	f106 010c 	add.w	r1, r6, #12
 8004e72:	3202      	adds	r2, #2
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	300c      	adds	r0, #12
 8004e78:	f7ff fa83 	bl	8004382 <memcpy>
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4639      	mov	r1, r7
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 fc03 	bl	800568c <__lshift>
 8004e86:	46b0      	mov	r8, r6
 8004e88:	4606      	mov	r6, r0
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	9a03      	ldr	r2, [sp, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	9308      	str	r3, [sp, #32]
 8004e92:	9b06      	ldr	r3, [sp, #24]
 8004e94:	4413      	add	r3, r2
 8004e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e98:	9b04      	ldr	r3, [sp, #16]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004ea0:	9b08      	ldr	r3, [sp, #32]
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	4650      	mov	r0, sl
 8004ea8:	9304      	str	r3, [sp, #16]
 8004eaa:	f7ff fa78 	bl	800439e <quorem>
 8004eae:	4641      	mov	r1, r8
 8004eb0:	9006      	str	r0, [sp, #24]
 8004eb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f000 fc54 	bl	8005764 <__mcmp>
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	9009      	str	r0, [sp, #36]	; 0x24
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 fc6a 	bl	800579c <__mdiff>
 8004ec8:	68c2      	ldr	r2, [r0, #12]
 8004eca:	4607      	mov	r7, r0
 8004ecc:	bb02      	cbnz	r2, 8004f10 <_dtoa_r+0xa60>
 8004ece:	4601      	mov	r1, r0
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	f000 fc47 	bl	8005764 <__mcmp>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	4639      	mov	r1, r7
 8004eda:	4628      	mov	r0, r5
 8004edc:	920c      	str	r2, [sp, #48]	; 0x30
 8004ede:	f000 fa07 	bl	80052f0 <_Bfree>
 8004ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ee6:	9f08      	ldr	r7, [sp, #32]
 8004ee8:	ea43 0102 	orr.w	r1, r3, r2
 8004eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eee:	4319      	orrs	r1, r3
 8004ef0:	d110      	bne.n	8004f14 <_dtoa_r+0xa64>
 8004ef2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ef6:	d029      	beq.n	8004f4c <_dtoa_r+0xa9c>
 8004ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dd02      	ble.n	8004f04 <_dtoa_r+0xa54>
 8004efe:	9b06      	ldr	r3, [sp, #24]
 8004f00:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004f04:	9b04      	ldr	r3, [sp, #16]
 8004f06:	f883 9000 	strb.w	r9, [r3]
 8004f0a:	e777      	b.n	8004dfc <_dtoa_r+0x94c>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	e7ba      	b.n	8004e86 <_dtoa_r+0x9d6>
 8004f10:	2201      	movs	r2, #1
 8004f12:	e7e1      	b.n	8004ed8 <_dtoa_r+0xa28>
 8004f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db04      	blt.n	8004f24 <_dtoa_r+0xa74>
 8004f1a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f20:	430b      	orrs	r3, r1
 8004f22:	d120      	bne.n	8004f66 <_dtoa_r+0xab6>
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	dded      	ble.n	8004f04 <_dtoa_r+0xa54>
 8004f28:	4651      	mov	r1, sl
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 fbad 	bl	800568c <__lshift>
 8004f32:	4621      	mov	r1, r4
 8004f34:	4682      	mov	sl, r0
 8004f36:	f000 fc15 	bl	8005764 <__mcmp>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	dc03      	bgt.n	8004f46 <_dtoa_r+0xa96>
 8004f3e:	d1e1      	bne.n	8004f04 <_dtoa_r+0xa54>
 8004f40:	f019 0f01 	tst.w	r9, #1
 8004f44:	d0de      	beq.n	8004f04 <_dtoa_r+0xa54>
 8004f46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004f4a:	d1d8      	bne.n	8004efe <_dtoa_r+0xa4e>
 8004f4c:	2339      	movs	r3, #57	; 0x39
 8004f4e:	9a04      	ldr	r2, [sp, #16]
 8004f50:	7013      	strb	r3, [r2, #0]
 8004f52:	463b      	mov	r3, r7
 8004f54:	461f      	mov	r7, r3
 8004f56:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	2a39      	cmp	r2, #57	; 0x39
 8004f5e:	d06b      	beq.n	8005038 <_dtoa_r+0xb88>
 8004f60:	3201      	adds	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	e74a      	b.n	8004dfc <_dtoa_r+0x94c>
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	dd07      	ble.n	8004f7a <_dtoa_r+0xaca>
 8004f6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004f6e:	d0ed      	beq.n	8004f4c <_dtoa_r+0xa9c>
 8004f70:	9a04      	ldr	r2, [sp, #16]
 8004f72:	f109 0301 	add.w	r3, r9, #1
 8004f76:	7013      	strb	r3, [r2, #0]
 8004f78:	e740      	b.n	8004dfc <_dtoa_r+0x94c>
 8004f7a:	9b08      	ldr	r3, [sp, #32]
 8004f7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f7e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d042      	beq.n	800500c <_dtoa_r+0xb5c>
 8004f86:	4651      	mov	r1, sl
 8004f88:	2300      	movs	r3, #0
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f000 f9d1 	bl	8005334 <__multadd>
 8004f92:	45b0      	cmp	r8, r6
 8004f94:	4682      	mov	sl, r0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f04f 020a 	mov.w	r2, #10
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	d107      	bne.n	8004fb4 <_dtoa_r+0xb04>
 8004fa4:	f000 f9c6 	bl	8005334 <__multadd>
 8004fa8:	4680      	mov	r8, r0
 8004faa:	4606      	mov	r6, r0
 8004fac:	9b08      	ldr	r3, [sp, #32]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	9308      	str	r3, [sp, #32]
 8004fb2:	e775      	b.n	8004ea0 <_dtoa_r+0x9f0>
 8004fb4:	f000 f9be 	bl	8005334 <__multadd>
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4680      	mov	r8, r0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	220a      	movs	r2, #10
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 f9b7 	bl	8005334 <__multadd>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	e7f0      	b.n	8004fac <_dtoa_r+0xafc>
 8004fca:	9b08      	ldr	r3, [sp, #32]
 8004fcc:	9306      	str	r3, [sp, #24]
 8004fce:	9f03      	ldr	r7, [sp, #12]
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	f7ff f9e3 	bl	800439e <quorem>
 8004fd8:	9b03      	ldr	r3, [sp, #12]
 8004fda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004fde:	f807 9b01 	strb.w	r9, [r7], #1
 8004fe2:	1afa      	subs	r2, r7, r3
 8004fe4:	9b06      	ldr	r3, [sp, #24]
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	dd07      	ble.n	8004ffa <_dtoa_r+0xb4a>
 8004fea:	4651      	mov	r1, sl
 8004fec:	2300      	movs	r3, #0
 8004fee:	220a      	movs	r2, #10
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 f99f 	bl	8005334 <__multadd>
 8004ff6:	4682      	mov	sl, r0
 8004ff8:	e7ea      	b.n	8004fd0 <_dtoa_r+0xb20>
 8004ffa:	9b06      	ldr	r3, [sp, #24]
 8004ffc:	f04f 0800 	mov.w	r8, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	bfcc      	ite	gt
 8005004:	461f      	movgt	r7, r3
 8005006:	2701      	movle	r7, #1
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	441f      	add	r7, r3
 800500c:	4651      	mov	r1, sl
 800500e:	2201      	movs	r2, #1
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fb3b 	bl	800568c <__lshift>
 8005016:	4621      	mov	r1, r4
 8005018:	4682      	mov	sl, r0
 800501a:	f000 fba3 	bl	8005764 <__mcmp>
 800501e:	2800      	cmp	r0, #0
 8005020:	dc97      	bgt.n	8004f52 <_dtoa_r+0xaa2>
 8005022:	d102      	bne.n	800502a <_dtoa_r+0xb7a>
 8005024:	f019 0f01 	tst.w	r9, #1
 8005028:	d193      	bne.n	8004f52 <_dtoa_r+0xaa2>
 800502a:	463b      	mov	r3, r7
 800502c:	461f      	mov	r7, r3
 800502e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005032:	2a30      	cmp	r2, #48	; 0x30
 8005034:	d0fa      	beq.n	800502c <_dtoa_r+0xb7c>
 8005036:	e6e1      	b.n	8004dfc <_dtoa_r+0x94c>
 8005038:	9a03      	ldr	r2, [sp, #12]
 800503a:	429a      	cmp	r2, r3
 800503c:	d18a      	bne.n	8004f54 <_dtoa_r+0xaa4>
 800503e:	2331      	movs	r3, #49	; 0x31
 8005040:	f10b 0b01 	add.w	fp, fp, #1
 8005044:	e797      	b.n	8004f76 <_dtoa_r+0xac6>
 8005046:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <_dtoa_r+0xbc0>)
 8005048:	f7ff ba9f 	b.w	800458a <_dtoa_r+0xda>
 800504c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800504e:	2b00      	cmp	r3, #0
 8005050:	f47f aa77 	bne.w	8004542 <_dtoa_r+0x92>
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <_dtoa_r+0xbc4>)
 8005056:	f7ff ba98 	b.w	800458a <_dtoa_r+0xda>
 800505a:	9b06      	ldr	r3, [sp, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dcb6      	bgt.n	8004fce <_dtoa_r+0xb1e>
 8005060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005062:	2b02      	cmp	r3, #2
 8005064:	f73f aeb5 	bgt.w	8004dd2 <_dtoa_r+0x922>
 8005068:	e7b1      	b.n	8004fce <_dtoa_r+0xb1e>
 800506a:	bf00      	nop
 800506c:	080065a2 	.word	0x080065a2
 8005070:	08006502 	.word	0x08006502
 8005074:	08006526 	.word	0x08006526

08005078 <_free_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4605      	mov	r5, r0
 800507c:	2900      	cmp	r1, #0
 800507e:	d040      	beq.n	8005102 <_free_r+0x8a>
 8005080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005084:	1f0c      	subs	r4, r1, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfb8      	it	lt
 800508a:	18e4      	addlt	r4, r4, r3
 800508c:	f000 f8e4 	bl	8005258 <__malloc_lock>
 8005090:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <_free_r+0x8c>)
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	b933      	cbnz	r3, 80050a4 <_free_r+0x2c>
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	6014      	str	r4, [r2, #0]
 800509a:	4628      	mov	r0, r5
 800509c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a0:	f000 b8e0 	b.w	8005264 <__malloc_unlock>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d908      	bls.n	80050ba <_free_r+0x42>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf01      	itttt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	1809      	addeq	r1, r1, r0
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	e7ed      	b.n	8005096 <_free_r+0x1e>
 80050ba:	461a      	mov	r2, r3
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b10b      	cbz	r3, 80050c4 <_free_r+0x4c>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d9fa      	bls.n	80050ba <_free_r+0x42>
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	1850      	adds	r0, r2, r1
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d10b      	bne.n	80050e4 <_free_r+0x6c>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	4401      	add	r1, r0
 80050d0:	1850      	adds	r0, r2, r1
 80050d2:	4283      	cmp	r3, r0
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	d1e0      	bne.n	800509a <_free_r+0x22>
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4408      	add	r0, r1
 80050de:	6010      	str	r0, [r2, #0]
 80050e0:	6053      	str	r3, [r2, #4]
 80050e2:	e7da      	b.n	800509a <_free_r+0x22>
 80050e4:	d902      	bls.n	80050ec <_free_r+0x74>
 80050e6:	230c      	movs	r3, #12
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	e7d6      	b.n	800509a <_free_r+0x22>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	1821      	adds	r1, r4, r0
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf01      	itttt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	1809      	addeq	r1, r1, r0
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	6054      	str	r4, [r2, #4]
 8005100:	e7cb      	b.n	800509a <_free_r+0x22>
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20000734 	.word	0x20000734

08005108 <malloc>:
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <malloc+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f000 b823 	b.w	8005158 <_malloc_r>
 8005112:	bf00      	nop
 8005114:	20000064 	.word	0x20000064

08005118 <sbrk_aligned>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4e0e      	ldr	r6, [pc, #56]	; (8005154 <sbrk_aligned+0x3c>)
 800511c:	460c      	mov	r4, r1
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	4605      	mov	r5, r0
 8005122:	b911      	cbnz	r1, 800512a <sbrk_aligned+0x12>
 8005124:	f000 fe38 	bl	8005d98 <_sbrk_r>
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	4621      	mov	r1, r4
 800512c:	4628      	mov	r0, r5
 800512e:	f000 fe33 	bl	8005d98 <_sbrk_r>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d00a      	beq.n	800514c <sbrk_aligned+0x34>
 8005136:	1cc4      	adds	r4, r0, #3
 8005138:	f024 0403 	bic.w	r4, r4, #3
 800513c:	42a0      	cmp	r0, r4
 800513e:	d007      	beq.n	8005150 <sbrk_aligned+0x38>
 8005140:	1a21      	subs	r1, r4, r0
 8005142:	4628      	mov	r0, r5
 8005144:	f000 fe28 	bl	8005d98 <_sbrk_r>
 8005148:	3001      	adds	r0, #1
 800514a:	d101      	bne.n	8005150 <sbrk_aligned+0x38>
 800514c:	f04f 34ff 	mov.w	r4, #4294967295
 8005150:	4620      	mov	r0, r4
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	20000738 	.word	0x20000738

08005158 <_malloc_r>:
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	1ccd      	adds	r5, r1, #3
 800515e:	f025 0503 	bic.w	r5, r5, #3
 8005162:	3508      	adds	r5, #8
 8005164:	2d0c      	cmp	r5, #12
 8005166:	bf38      	it	cc
 8005168:	250c      	movcc	r5, #12
 800516a:	2d00      	cmp	r5, #0
 800516c:	4607      	mov	r7, r0
 800516e:	db01      	blt.n	8005174 <_malloc_r+0x1c>
 8005170:	42a9      	cmp	r1, r5
 8005172:	d905      	bls.n	8005180 <_malloc_r+0x28>
 8005174:	230c      	movs	r3, #12
 8005176:	2600      	movs	r6, #0
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4630      	mov	r0, r6
 800517c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005254 <_malloc_r+0xfc>
 8005184:	f000 f868 	bl	8005258 <__malloc_lock>
 8005188:	f8d8 3000 	ldr.w	r3, [r8]
 800518c:	461c      	mov	r4, r3
 800518e:	bb5c      	cbnz	r4, 80051e8 <_malloc_r+0x90>
 8005190:	4629      	mov	r1, r5
 8005192:	4638      	mov	r0, r7
 8005194:	f7ff ffc0 	bl	8005118 <sbrk_aligned>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	4604      	mov	r4, r0
 800519c:	d155      	bne.n	800524a <_malloc_r+0xf2>
 800519e:	f8d8 4000 	ldr.w	r4, [r8]
 80051a2:	4626      	mov	r6, r4
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	d145      	bne.n	8005234 <_malloc_r+0xdc>
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d048      	beq.n	800523e <_malloc_r+0xe6>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	4631      	mov	r1, r6
 80051b0:	4638      	mov	r0, r7
 80051b2:	eb04 0903 	add.w	r9, r4, r3
 80051b6:	f000 fdef 	bl	8005d98 <_sbrk_r>
 80051ba:	4581      	cmp	r9, r0
 80051bc:	d13f      	bne.n	800523e <_malloc_r+0xe6>
 80051be:	6821      	ldr	r1, [r4, #0]
 80051c0:	4638      	mov	r0, r7
 80051c2:	1a6d      	subs	r5, r5, r1
 80051c4:	4629      	mov	r1, r5
 80051c6:	f7ff ffa7 	bl	8005118 <sbrk_aligned>
 80051ca:	3001      	adds	r0, #1
 80051cc:	d037      	beq.n	800523e <_malloc_r+0xe6>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	442b      	add	r3, r5
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	f8d8 3000 	ldr.w	r3, [r8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d038      	beq.n	800524e <_malloc_r+0xf6>
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	42a2      	cmp	r2, r4
 80051e0:	d12b      	bne.n	800523a <_malloc_r+0xe2>
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	e00f      	b.n	8005208 <_malloc_r+0xb0>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	1b52      	subs	r2, r2, r5
 80051ec:	d41f      	bmi.n	800522e <_malloc_r+0xd6>
 80051ee:	2a0b      	cmp	r2, #11
 80051f0:	d917      	bls.n	8005222 <_malloc_r+0xca>
 80051f2:	1961      	adds	r1, r4, r5
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	6025      	str	r5, [r4, #0]
 80051f8:	bf18      	it	ne
 80051fa:	6059      	strne	r1, [r3, #4]
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	bf08      	it	eq
 8005200:	f8c8 1000 	streq.w	r1, [r8]
 8005204:	5162      	str	r2, [r4, r5]
 8005206:	604b      	str	r3, [r1, #4]
 8005208:	4638      	mov	r0, r7
 800520a:	f104 060b 	add.w	r6, r4, #11
 800520e:	f000 f829 	bl	8005264 <__malloc_unlock>
 8005212:	f026 0607 	bic.w	r6, r6, #7
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	1af2      	subs	r2, r6, r3
 800521a:	d0ae      	beq.n	800517a <_malloc_r+0x22>
 800521c:	1b9b      	subs	r3, r3, r6
 800521e:	50a3      	str	r3, [r4, r2]
 8005220:	e7ab      	b.n	800517a <_malloc_r+0x22>
 8005222:	42a3      	cmp	r3, r4
 8005224:	6862      	ldr	r2, [r4, #4]
 8005226:	d1dd      	bne.n	80051e4 <_malloc_r+0x8c>
 8005228:	f8c8 2000 	str.w	r2, [r8]
 800522c:	e7ec      	b.n	8005208 <_malloc_r+0xb0>
 800522e:	4623      	mov	r3, r4
 8005230:	6864      	ldr	r4, [r4, #4]
 8005232:	e7ac      	b.n	800518e <_malloc_r+0x36>
 8005234:	4634      	mov	r4, r6
 8005236:	6876      	ldr	r6, [r6, #4]
 8005238:	e7b4      	b.n	80051a4 <_malloc_r+0x4c>
 800523a:	4613      	mov	r3, r2
 800523c:	e7cc      	b.n	80051d8 <_malloc_r+0x80>
 800523e:	230c      	movs	r3, #12
 8005240:	4638      	mov	r0, r7
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	f000 f80e 	bl	8005264 <__malloc_unlock>
 8005248:	e797      	b.n	800517a <_malloc_r+0x22>
 800524a:	6025      	str	r5, [r4, #0]
 800524c:	e7dc      	b.n	8005208 <_malloc_r+0xb0>
 800524e:	605b      	str	r3, [r3, #4]
 8005250:	deff      	udf	#255	; 0xff
 8005252:	bf00      	nop
 8005254:	20000734 	.word	0x20000734

08005258 <__malloc_lock>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__malloc_lock+0x8>)
 800525a:	f7ff b882 	b.w	8004362 <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	20000730 	.word	0x20000730

08005264 <__malloc_unlock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_unlock+0x8>)
 8005266:	f7ff b87d 	b.w	8004364 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	20000730 	.word	0x20000730

08005270 <_Balloc>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	69c6      	ldr	r6, [r0, #28]
 8005274:	4604      	mov	r4, r0
 8005276:	460d      	mov	r5, r1
 8005278:	b976      	cbnz	r6, 8005298 <_Balloc+0x28>
 800527a:	2010      	movs	r0, #16
 800527c:	f7ff ff44 	bl	8005108 <malloc>
 8005280:	4602      	mov	r2, r0
 8005282:	61e0      	str	r0, [r4, #28]
 8005284:	b920      	cbnz	r0, 8005290 <_Balloc+0x20>
 8005286:	216b      	movs	r1, #107	; 0x6b
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <_Balloc+0x78>)
 800528a:	4818      	ldr	r0, [pc, #96]	; (80052ec <_Balloc+0x7c>)
 800528c:	f000 fd94 	bl	8005db8 <__assert_func>
 8005290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005294:	6006      	str	r6, [r0, #0]
 8005296:	60c6      	str	r6, [r0, #12]
 8005298:	69e6      	ldr	r6, [r4, #28]
 800529a:	68f3      	ldr	r3, [r6, #12]
 800529c:	b183      	cbz	r3, 80052c0 <_Balloc+0x50>
 800529e:	69e3      	ldr	r3, [r4, #28]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052a6:	b9b8      	cbnz	r0, 80052d8 <_Balloc+0x68>
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f605 	lsl.w	r6, r1, r5
 80052ae:	1d72      	adds	r2, r6, #5
 80052b0:	4620      	mov	r0, r4
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	f000 fd9e 	bl	8005df4 <_calloc_r>
 80052b8:	b160      	cbz	r0, 80052d4 <_Balloc+0x64>
 80052ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052be:	e00e      	b.n	80052de <_Balloc+0x6e>
 80052c0:	2221      	movs	r2, #33	; 0x21
 80052c2:	2104      	movs	r1, #4
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fd95 	bl	8005df4 <_calloc_r>
 80052ca:	69e3      	ldr	r3, [r4, #28]
 80052cc:	60f0      	str	r0, [r6, #12]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e4      	bne.n	800529e <_Balloc+0x2e>
 80052d4:	2000      	movs	r0, #0
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052de:	2300      	movs	r3, #0
 80052e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052e4:	e7f7      	b.n	80052d6 <_Balloc+0x66>
 80052e6:	bf00      	nop
 80052e8:	08006533 	.word	0x08006533
 80052ec:	080065b3 	.word	0x080065b3

080052f0 <_Bfree>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	69c6      	ldr	r6, [r0, #28]
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	b976      	cbnz	r6, 8005318 <_Bfree+0x28>
 80052fa:	2010      	movs	r0, #16
 80052fc:	f7ff ff04 	bl	8005108 <malloc>
 8005300:	4602      	mov	r2, r0
 8005302:	61e8      	str	r0, [r5, #28]
 8005304:	b920      	cbnz	r0, 8005310 <_Bfree+0x20>
 8005306:	218f      	movs	r1, #143	; 0x8f
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <_Bfree+0x3c>)
 800530a:	4809      	ldr	r0, [pc, #36]	; (8005330 <_Bfree+0x40>)
 800530c:	f000 fd54 	bl	8005db8 <__assert_func>
 8005310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005314:	6006      	str	r6, [r0, #0]
 8005316:	60c6      	str	r6, [r0, #12]
 8005318:	b13c      	cbz	r4, 800532a <_Bfree+0x3a>
 800531a:	69eb      	ldr	r3, [r5, #28]
 800531c:	6862      	ldr	r2, [r4, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005324:	6021      	str	r1, [r4, #0]
 8005326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	08006533 	.word	0x08006533
 8005330:	080065b3 	.word	0x080065b3

08005334 <__multadd>:
 8005334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005338:	4607      	mov	r7, r0
 800533a:	460c      	mov	r4, r1
 800533c:	461e      	mov	r6, r3
 800533e:	2000      	movs	r0, #0
 8005340:	690d      	ldr	r5, [r1, #16]
 8005342:	f101 0c14 	add.w	ip, r1, #20
 8005346:	f8dc 3000 	ldr.w	r3, [ip]
 800534a:	3001      	adds	r0, #1
 800534c:	b299      	uxth	r1, r3
 800534e:	fb02 6101 	mla	r1, r2, r1, r6
 8005352:	0c1e      	lsrs	r6, r3, #16
 8005354:	0c0b      	lsrs	r3, r1, #16
 8005356:	fb02 3306 	mla	r3, r2, r6, r3
 800535a:	b289      	uxth	r1, r1
 800535c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005360:	4285      	cmp	r5, r0
 8005362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005366:	f84c 1b04 	str.w	r1, [ip], #4
 800536a:	dcec      	bgt.n	8005346 <__multadd+0x12>
 800536c:	b30e      	cbz	r6, 80053b2 <__multadd+0x7e>
 800536e:	68a3      	ldr	r3, [r4, #8]
 8005370:	42ab      	cmp	r3, r5
 8005372:	dc19      	bgt.n	80053a8 <__multadd+0x74>
 8005374:	6861      	ldr	r1, [r4, #4]
 8005376:	4638      	mov	r0, r7
 8005378:	3101      	adds	r1, #1
 800537a:	f7ff ff79 	bl	8005270 <_Balloc>
 800537e:	4680      	mov	r8, r0
 8005380:	b928      	cbnz	r0, 800538e <__multadd+0x5a>
 8005382:	4602      	mov	r2, r0
 8005384:	21ba      	movs	r1, #186	; 0xba
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <__multadd+0x84>)
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <__multadd+0x88>)
 800538a:	f000 fd15 	bl	8005db8 <__assert_func>
 800538e:	6922      	ldr	r2, [r4, #16]
 8005390:	f104 010c 	add.w	r1, r4, #12
 8005394:	3202      	adds	r2, #2
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	300c      	adds	r0, #12
 800539a:	f7fe fff2 	bl	8004382 <memcpy>
 800539e:	4621      	mov	r1, r4
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ffa5 	bl	80052f0 <_Bfree>
 80053a6:	4644      	mov	r4, r8
 80053a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053ac:	3501      	adds	r5, #1
 80053ae:	615e      	str	r6, [r3, #20]
 80053b0:	6125      	str	r5, [r4, #16]
 80053b2:	4620      	mov	r0, r4
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	080065a2 	.word	0x080065a2
 80053bc:	080065b3 	.word	0x080065b3

080053c0 <__hi0bits>:
 80053c0:	0c02      	lsrs	r2, r0, #16
 80053c2:	0412      	lsls	r2, r2, #16
 80053c4:	4603      	mov	r3, r0
 80053c6:	b9ca      	cbnz	r2, 80053fc <__hi0bits+0x3c>
 80053c8:	0403      	lsls	r3, r0, #16
 80053ca:	2010      	movs	r0, #16
 80053cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80053d0:	bf04      	itt	eq
 80053d2:	021b      	lsleq	r3, r3, #8
 80053d4:	3008      	addeq	r0, #8
 80053d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80053da:	bf04      	itt	eq
 80053dc:	011b      	lsleq	r3, r3, #4
 80053de:	3004      	addeq	r0, #4
 80053e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80053e4:	bf04      	itt	eq
 80053e6:	009b      	lsleq	r3, r3, #2
 80053e8:	3002      	addeq	r0, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db05      	blt.n	80053fa <__hi0bits+0x3a>
 80053ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80053f2:	f100 0001 	add.w	r0, r0, #1
 80053f6:	bf08      	it	eq
 80053f8:	2020      	moveq	r0, #32
 80053fa:	4770      	bx	lr
 80053fc:	2000      	movs	r0, #0
 80053fe:	e7e5      	b.n	80053cc <__hi0bits+0xc>

08005400 <__lo0bits>:
 8005400:	6803      	ldr	r3, [r0, #0]
 8005402:	4602      	mov	r2, r0
 8005404:	f013 0007 	ands.w	r0, r3, #7
 8005408:	d00b      	beq.n	8005422 <__lo0bits+0x22>
 800540a:	07d9      	lsls	r1, r3, #31
 800540c:	d421      	bmi.n	8005452 <__lo0bits+0x52>
 800540e:	0798      	lsls	r0, r3, #30
 8005410:	bf49      	itett	mi
 8005412:	085b      	lsrmi	r3, r3, #1
 8005414:	089b      	lsrpl	r3, r3, #2
 8005416:	2001      	movmi	r0, #1
 8005418:	6013      	strmi	r3, [r2, #0]
 800541a:	bf5c      	itt	pl
 800541c:	2002      	movpl	r0, #2
 800541e:	6013      	strpl	r3, [r2, #0]
 8005420:	4770      	bx	lr
 8005422:	b299      	uxth	r1, r3
 8005424:	b909      	cbnz	r1, 800542a <__lo0bits+0x2a>
 8005426:	2010      	movs	r0, #16
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2d9      	uxtb	r1, r3
 800542c:	b909      	cbnz	r1, 8005432 <__lo0bits+0x32>
 800542e:	3008      	adds	r0, #8
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	0719      	lsls	r1, r3, #28
 8005434:	bf04      	itt	eq
 8005436:	091b      	lsreq	r3, r3, #4
 8005438:	3004      	addeq	r0, #4
 800543a:	0799      	lsls	r1, r3, #30
 800543c:	bf04      	itt	eq
 800543e:	089b      	lsreq	r3, r3, #2
 8005440:	3002      	addeq	r0, #2
 8005442:	07d9      	lsls	r1, r3, #31
 8005444:	d403      	bmi.n	800544e <__lo0bits+0x4e>
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f100 0001 	add.w	r0, r0, #1
 800544c:	d003      	beq.n	8005456 <__lo0bits+0x56>
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4770      	bx	lr
 8005452:	2000      	movs	r0, #0
 8005454:	4770      	bx	lr
 8005456:	2020      	movs	r0, #32
 8005458:	4770      	bx	lr
	...

0800545c <__i2b>:
 800545c:	b510      	push	{r4, lr}
 800545e:	460c      	mov	r4, r1
 8005460:	2101      	movs	r1, #1
 8005462:	f7ff ff05 	bl	8005270 <_Balloc>
 8005466:	4602      	mov	r2, r0
 8005468:	b928      	cbnz	r0, 8005476 <__i2b+0x1a>
 800546a:	f240 1145 	movw	r1, #325	; 0x145
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__i2b+0x24>)
 8005470:	4804      	ldr	r0, [pc, #16]	; (8005484 <__i2b+0x28>)
 8005472:	f000 fca1 	bl	8005db8 <__assert_func>
 8005476:	2301      	movs	r3, #1
 8005478:	6144      	str	r4, [r0, #20]
 800547a:	6103      	str	r3, [r0, #16]
 800547c:	bd10      	pop	{r4, pc}
 800547e:	bf00      	nop
 8005480:	080065a2 	.word	0x080065a2
 8005484:	080065b3 	.word	0x080065b3

08005488 <__multiply>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	4691      	mov	r9, r2
 800548e:	690a      	ldr	r2, [r1, #16]
 8005490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005494:	460c      	mov	r4, r1
 8005496:	429a      	cmp	r2, r3
 8005498:	bfbe      	ittt	lt
 800549a:	460b      	movlt	r3, r1
 800549c:	464c      	movlt	r4, r9
 800549e:	4699      	movlt	r9, r3
 80054a0:	6927      	ldr	r7, [r4, #16]
 80054a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	6861      	ldr	r1, [r4, #4]
 80054aa:	eb07 060a 	add.w	r6, r7, sl
 80054ae:	42b3      	cmp	r3, r6
 80054b0:	b085      	sub	sp, #20
 80054b2:	bfb8      	it	lt
 80054b4:	3101      	addlt	r1, #1
 80054b6:	f7ff fedb 	bl	8005270 <_Balloc>
 80054ba:	b930      	cbnz	r0, 80054ca <__multiply+0x42>
 80054bc:	4602      	mov	r2, r0
 80054be:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80054c2:	4b43      	ldr	r3, [pc, #268]	; (80055d0 <__multiply+0x148>)
 80054c4:	4843      	ldr	r0, [pc, #268]	; (80055d4 <__multiply+0x14c>)
 80054c6:	f000 fc77 	bl	8005db8 <__assert_func>
 80054ca:	f100 0514 	add.w	r5, r0, #20
 80054ce:	462b      	mov	r3, r5
 80054d0:	2200      	movs	r2, #0
 80054d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054d6:	4543      	cmp	r3, r8
 80054d8:	d321      	bcc.n	800551e <__multiply+0x96>
 80054da:	f104 0314 	add.w	r3, r4, #20
 80054de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80054e2:	f109 0314 	add.w	r3, r9, #20
 80054e6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054ea:	9202      	str	r2, [sp, #8]
 80054ec:	1b3a      	subs	r2, r7, r4
 80054ee:	3a15      	subs	r2, #21
 80054f0:	f022 0203 	bic.w	r2, r2, #3
 80054f4:	3204      	adds	r2, #4
 80054f6:	f104 0115 	add.w	r1, r4, #21
 80054fa:	428f      	cmp	r7, r1
 80054fc:	bf38      	it	cc
 80054fe:	2204      	movcc	r2, #4
 8005500:	9201      	str	r2, [sp, #4]
 8005502:	9a02      	ldr	r2, [sp, #8]
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	429a      	cmp	r2, r3
 8005508:	d80c      	bhi.n	8005524 <__multiply+0x9c>
 800550a:	2e00      	cmp	r6, #0
 800550c:	dd03      	ble.n	8005516 <__multiply+0x8e>
 800550e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05a      	beq.n	80055cc <__multiply+0x144>
 8005516:	6106      	str	r6, [r0, #16]
 8005518:	b005      	add	sp, #20
 800551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551e:	f843 2b04 	str.w	r2, [r3], #4
 8005522:	e7d8      	b.n	80054d6 <__multiply+0x4e>
 8005524:	f8b3 a000 	ldrh.w	sl, [r3]
 8005528:	f1ba 0f00 	cmp.w	sl, #0
 800552c:	d023      	beq.n	8005576 <__multiply+0xee>
 800552e:	46a9      	mov	r9, r5
 8005530:	f04f 0c00 	mov.w	ip, #0
 8005534:	f104 0e14 	add.w	lr, r4, #20
 8005538:	f85e 2b04 	ldr.w	r2, [lr], #4
 800553c:	f8d9 1000 	ldr.w	r1, [r9]
 8005540:	fa1f fb82 	uxth.w	fp, r2
 8005544:	b289      	uxth	r1, r1
 8005546:	fb0a 110b 	mla	r1, sl, fp, r1
 800554a:	4461      	add	r1, ip
 800554c:	f8d9 c000 	ldr.w	ip, [r9]
 8005550:	0c12      	lsrs	r2, r2, #16
 8005552:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005556:	fb0a c202 	mla	r2, sl, r2, ip
 800555a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800555e:	b289      	uxth	r1, r1
 8005560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005564:	4577      	cmp	r7, lr
 8005566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800556a:	f849 1b04 	str.w	r1, [r9], #4
 800556e:	d8e3      	bhi.n	8005538 <__multiply+0xb0>
 8005570:	9a01      	ldr	r2, [sp, #4]
 8005572:	f845 c002 	str.w	ip, [r5, r2]
 8005576:	9a03      	ldr	r2, [sp, #12]
 8005578:	3304      	adds	r3, #4
 800557a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800557e:	f1b9 0f00 	cmp.w	r9, #0
 8005582:	d021      	beq.n	80055c8 <__multiply+0x140>
 8005584:	46ae      	mov	lr, r5
 8005586:	f04f 0a00 	mov.w	sl, #0
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	f104 0c14 	add.w	ip, r4, #20
 8005590:	f8bc b000 	ldrh.w	fp, [ip]
 8005594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005598:	b289      	uxth	r1, r1
 800559a:	fb09 220b 	mla	r2, r9, fp, r2
 800559e:	4452      	add	r2, sl
 80055a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055a4:	f84e 1b04 	str.w	r1, [lr], #4
 80055a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80055ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055b0:	f8be 1000 	ldrh.w	r1, [lr]
 80055b4:	4567      	cmp	r7, ip
 80055b6:	fb09 110a 	mla	r1, r9, sl, r1
 80055ba:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80055be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055c2:	d8e5      	bhi.n	8005590 <__multiply+0x108>
 80055c4:	9a01      	ldr	r2, [sp, #4]
 80055c6:	50a9      	str	r1, [r5, r2]
 80055c8:	3504      	adds	r5, #4
 80055ca:	e79a      	b.n	8005502 <__multiply+0x7a>
 80055cc:	3e01      	subs	r6, #1
 80055ce:	e79c      	b.n	800550a <__multiply+0x82>
 80055d0:	080065a2 	.word	0x080065a2
 80055d4:	080065b3 	.word	0x080065b3

080055d8 <__pow5mult>:
 80055d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055dc:	4615      	mov	r5, r2
 80055de:	f012 0203 	ands.w	r2, r2, #3
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	d007      	beq.n	80055f8 <__pow5mult+0x20>
 80055e8:	4c25      	ldr	r4, [pc, #148]	; (8005680 <__pow5mult+0xa8>)
 80055ea:	3a01      	subs	r2, #1
 80055ec:	2300      	movs	r3, #0
 80055ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055f2:	f7ff fe9f 	bl	8005334 <__multadd>
 80055f6:	4607      	mov	r7, r0
 80055f8:	10ad      	asrs	r5, r5, #2
 80055fa:	d03d      	beq.n	8005678 <__pow5mult+0xa0>
 80055fc:	69f4      	ldr	r4, [r6, #28]
 80055fe:	b97c      	cbnz	r4, 8005620 <__pow5mult+0x48>
 8005600:	2010      	movs	r0, #16
 8005602:	f7ff fd81 	bl	8005108 <malloc>
 8005606:	4602      	mov	r2, r0
 8005608:	61f0      	str	r0, [r6, #28]
 800560a:	b928      	cbnz	r0, 8005618 <__pow5mult+0x40>
 800560c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005610:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <__pow5mult+0xac>)
 8005612:	481d      	ldr	r0, [pc, #116]	; (8005688 <__pow5mult+0xb0>)
 8005614:	f000 fbd0 	bl	8005db8 <__assert_func>
 8005618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800561c:	6004      	str	r4, [r0, #0]
 800561e:	60c4      	str	r4, [r0, #12]
 8005620:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005628:	b94c      	cbnz	r4, 800563e <__pow5mult+0x66>
 800562a:	f240 2171 	movw	r1, #625	; 0x271
 800562e:	4630      	mov	r0, r6
 8005630:	f7ff ff14 	bl	800545c <__i2b>
 8005634:	2300      	movs	r3, #0
 8005636:	4604      	mov	r4, r0
 8005638:	f8c8 0008 	str.w	r0, [r8, #8]
 800563c:	6003      	str	r3, [r0, #0]
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	07eb      	lsls	r3, r5, #31
 8005644:	d50a      	bpl.n	800565c <__pow5mult+0x84>
 8005646:	4639      	mov	r1, r7
 8005648:	4622      	mov	r2, r4
 800564a:	4630      	mov	r0, r6
 800564c:	f7ff ff1c 	bl	8005488 <__multiply>
 8005650:	4680      	mov	r8, r0
 8005652:	4639      	mov	r1, r7
 8005654:	4630      	mov	r0, r6
 8005656:	f7ff fe4b 	bl	80052f0 <_Bfree>
 800565a:	4647      	mov	r7, r8
 800565c:	106d      	asrs	r5, r5, #1
 800565e:	d00b      	beq.n	8005678 <__pow5mult+0xa0>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	b938      	cbnz	r0, 8005674 <__pow5mult+0x9c>
 8005664:	4622      	mov	r2, r4
 8005666:	4621      	mov	r1, r4
 8005668:	4630      	mov	r0, r6
 800566a:	f7ff ff0d 	bl	8005488 <__multiply>
 800566e:	6020      	str	r0, [r4, #0]
 8005670:	f8c0 9000 	str.w	r9, [r0]
 8005674:	4604      	mov	r4, r0
 8005676:	e7e4      	b.n	8005642 <__pow5mult+0x6a>
 8005678:	4638      	mov	r0, r7
 800567a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800567e:	bf00      	nop
 8005680:	08006700 	.word	0x08006700
 8005684:	08006533 	.word	0x08006533
 8005688:	080065b3 	.word	0x080065b3

0800568c <__lshift>:
 800568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005690:	460c      	mov	r4, r1
 8005692:	4607      	mov	r7, r0
 8005694:	4691      	mov	r9, r2
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	6849      	ldr	r1, [r1, #4]
 800569a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056a4:	f108 0601 	add.w	r6, r8, #1
 80056a8:	42b3      	cmp	r3, r6
 80056aa:	db0b      	blt.n	80056c4 <__lshift+0x38>
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff fddf 	bl	8005270 <_Balloc>
 80056b2:	4605      	mov	r5, r0
 80056b4:	b948      	cbnz	r0, 80056ca <__lshift+0x3e>
 80056b6:	4602      	mov	r2, r0
 80056b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <__lshift+0xd0>)
 80056be:	4828      	ldr	r0, [pc, #160]	; (8005760 <__lshift+0xd4>)
 80056c0:	f000 fb7a 	bl	8005db8 <__assert_func>
 80056c4:	3101      	adds	r1, #1
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	e7ee      	b.n	80056a8 <__lshift+0x1c>
 80056ca:	2300      	movs	r3, #0
 80056cc:	f100 0114 	add.w	r1, r0, #20
 80056d0:	f100 0210 	add.w	r2, r0, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	4553      	cmp	r3, sl
 80056d8:	db33      	blt.n	8005742 <__lshift+0xb6>
 80056da:	6920      	ldr	r0, [r4, #16]
 80056dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056e0:	f104 0314 	add.w	r3, r4, #20
 80056e4:	f019 091f 	ands.w	r9, r9, #31
 80056e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056f0:	d02b      	beq.n	800574a <__lshift+0xbe>
 80056f2:	468a      	mov	sl, r1
 80056f4:	2200      	movs	r2, #0
 80056f6:	f1c9 0e20 	rsb	lr, r9, #32
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	fa00 f009 	lsl.w	r0, r0, r9
 8005700:	4310      	orrs	r0, r2
 8005702:	f84a 0b04 	str.w	r0, [sl], #4
 8005706:	f853 2b04 	ldr.w	r2, [r3], #4
 800570a:	459c      	cmp	ip, r3
 800570c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005710:	d8f3      	bhi.n	80056fa <__lshift+0x6e>
 8005712:	ebac 0304 	sub.w	r3, ip, r4
 8005716:	3b15      	subs	r3, #21
 8005718:	f023 0303 	bic.w	r3, r3, #3
 800571c:	3304      	adds	r3, #4
 800571e:	f104 0015 	add.w	r0, r4, #21
 8005722:	4584      	cmp	ip, r0
 8005724:	bf38      	it	cc
 8005726:	2304      	movcc	r3, #4
 8005728:	50ca      	str	r2, [r1, r3]
 800572a:	b10a      	cbz	r2, 8005730 <__lshift+0xa4>
 800572c:	f108 0602 	add.w	r6, r8, #2
 8005730:	3e01      	subs	r6, #1
 8005732:	4638      	mov	r0, r7
 8005734:	4621      	mov	r1, r4
 8005736:	612e      	str	r6, [r5, #16]
 8005738:	f7ff fdda 	bl	80052f0 <_Bfree>
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005742:	f842 0f04 	str.w	r0, [r2, #4]!
 8005746:	3301      	adds	r3, #1
 8005748:	e7c5      	b.n	80056d6 <__lshift+0x4a>
 800574a:	3904      	subs	r1, #4
 800574c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005750:	459c      	cmp	ip, r3
 8005752:	f841 2f04 	str.w	r2, [r1, #4]!
 8005756:	d8f9      	bhi.n	800574c <__lshift+0xc0>
 8005758:	e7ea      	b.n	8005730 <__lshift+0xa4>
 800575a:	bf00      	nop
 800575c:	080065a2 	.word	0x080065a2
 8005760:	080065b3 	.word	0x080065b3

08005764 <__mcmp>:
 8005764:	4603      	mov	r3, r0
 8005766:	690a      	ldr	r2, [r1, #16]
 8005768:	6900      	ldr	r0, [r0, #16]
 800576a:	b530      	push	{r4, r5, lr}
 800576c:	1a80      	subs	r0, r0, r2
 800576e:	d10d      	bne.n	800578c <__mcmp+0x28>
 8005770:	3314      	adds	r3, #20
 8005772:	3114      	adds	r1, #20
 8005774:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005778:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800577c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005780:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005784:	4295      	cmp	r5, r2
 8005786:	d002      	beq.n	800578e <__mcmp+0x2a>
 8005788:	d304      	bcc.n	8005794 <__mcmp+0x30>
 800578a:	2001      	movs	r0, #1
 800578c:	bd30      	pop	{r4, r5, pc}
 800578e:	42a3      	cmp	r3, r4
 8005790:	d3f4      	bcc.n	800577c <__mcmp+0x18>
 8005792:	e7fb      	b.n	800578c <__mcmp+0x28>
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	e7f8      	b.n	800578c <__mcmp+0x28>
	...

0800579c <__mdiff>:
 800579c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	460d      	mov	r5, r1
 80057a2:	4607      	mov	r7, r0
 80057a4:	4611      	mov	r1, r2
 80057a6:	4628      	mov	r0, r5
 80057a8:	4614      	mov	r4, r2
 80057aa:	f7ff ffdb 	bl	8005764 <__mcmp>
 80057ae:	1e06      	subs	r6, r0, #0
 80057b0:	d111      	bne.n	80057d6 <__mdiff+0x3a>
 80057b2:	4631      	mov	r1, r6
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff fd5b 	bl	8005270 <_Balloc>
 80057ba:	4602      	mov	r2, r0
 80057bc:	b928      	cbnz	r0, 80057ca <__mdiff+0x2e>
 80057be:	f240 2137 	movw	r1, #567	; 0x237
 80057c2:	4b3a      	ldr	r3, [pc, #232]	; (80058ac <__mdiff+0x110>)
 80057c4:	483a      	ldr	r0, [pc, #232]	; (80058b0 <__mdiff+0x114>)
 80057c6:	f000 faf7 	bl	8005db8 <__assert_func>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80057d0:	4610      	mov	r0, r2
 80057d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d6:	bfa4      	itt	ge
 80057d8:	4623      	movge	r3, r4
 80057da:	462c      	movge	r4, r5
 80057dc:	4638      	mov	r0, r7
 80057de:	6861      	ldr	r1, [r4, #4]
 80057e0:	bfa6      	itte	ge
 80057e2:	461d      	movge	r5, r3
 80057e4:	2600      	movge	r6, #0
 80057e6:	2601      	movlt	r6, #1
 80057e8:	f7ff fd42 	bl	8005270 <_Balloc>
 80057ec:	4602      	mov	r2, r0
 80057ee:	b918      	cbnz	r0, 80057f8 <__mdiff+0x5c>
 80057f0:	f240 2145 	movw	r1, #581	; 0x245
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <__mdiff+0x110>)
 80057f6:	e7e5      	b.n	80057c4 <__mdiff+0x28>
 80057f8:	f102 0814 	add.w	r8, r2, #20
 80057fc:	46c2      	mov	sl, r8
 80057fe:	f04f 0c00 	mov.w	ip, #0
 8005802:	6927      	ldr	r7, [r4, #16]
 8005804:	60c6      	str	r6, [r0, #12]
 8005806:	692e      	ldr	r6, [r5, #16]
 8005808:	f104 0014 	add.w	r0, r4, #20
 800580c:	f105 0914 	add.w	r9, r5, #20
 8005810:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005814:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005818:	3410      	adds	r4, #16
 800581a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800581e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005822:	fa1f f18b 	uxth.w	r1, fp
 8005826:	4461      	add	r1, ip
 8005828:	fa1f fc83 	uxth.w	ip, r3
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	eba1 010c 	sub.w	r1, r1, ip
 8005832:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005836:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800583a:	b289      	uxth	r1, r1
 800583c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005840:	454e      	cmp	r6, r9
 8005842:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005846:	f84a 1b04 	str.w	r1, [sl], #4
 800584a:	d8e6      	bhi.n	800581a <__mdiff+0x7e>
 800584c:	1b73      	subs	r3, r6, r5
 800584e:	3b15      	subs	r3, #21
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	3515      	adds	r5, #21
 8005856:	3304      	adds	r3, #4
 8005858:	42ae      	cmp	r6, r5
 800585a:	bf38      	it	cc
 800585c:	2304      	movcc	r3, #4
 800585e:	4418      	add	r0, r3
 8005860:	4443      	add	r3, r8
 8005862:	461e      	mov	r6, r3
 8005864:	4605      	mov	r5, r0
 8005866:	4575      	cmp	r5, lr
 8005868:	d30e      	bcc.n	8005888 <__mdiff+0xec>
 800586a:	f10e 0103 	add.w	r1, lr, #3
 800586e:	1a09      	subs	r1, r1, r0
 8005870:	f021 0103 	bic.w	r1, r1, #3
 8005874:	3803      	subs	r0, #3
 8005876:	4586      	cmp	lr, r0
 8005878:	bf38      	it	cc
 800587a:	2100      	movcc	r1, #0
 800587c:	440b      	add	r3, r1
 800587e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005882:	b189      	cbz	r1, 80058a8 <__mdiff+0x10c>
 8005884:	6117      	str	r7, [r2, #16]
 8005886:	e7a3      	b.n	80057d0 <__mdiff+0x34>
 8005888:	f855 8b04 	ldr.w	r8, [r5], #4
 800588c:	fa1f f188 	uxth.w	r1, r8
 8005890:	4461      	add	r1, ip
 8005892:	140c      	asrs	r4, r1, #16
 8005894:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005898:	b289      	uxth	r1, r1
 800589a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800589e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80058a2:	f846 1b04 	str.w	r1, [r6], #4
 80058a6:	e7de      	b.n	8005866 <__mdiff+0xca>
 80058a8:	3f01      	subs	r7, #1
 80058aa:	e7e8      	b.n	800587e <__mdiff+0xe2>
 80058ac:	080065a2 	.word	0x080065a2
 80058b0:	080065b3 	.word	0x080065b3

080058b4 <__d2b>:
 80058b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b6:	2101      	movs	r1, #1
 80058b8:	4617      	mov	r7, r2
 80058ba:	461c      	mov	r4, r3
 80058bc:	9e08      	ldr	r6, [sp, #32]
 80058be:	f7ff fcd7 	bl	8005270 <_Balloc>
 80058c2:	4605      	mov	r5, r0
 80058c4:	b930      	cbnz	r0, 80058d4 <__d2b+0x20>
 80058c6:	4602      	mov	r2, r0
 80058c8:	f240 310f 	movw	r1, #783	; 0x30f
 80058cc:	4b22      	ldr	r3, [pc, #136]	; (8005958 <__d2b+0xa4>)
 80058ce:	4823      	ldr	r0, [pc, #140]	; (800595c <__d2b+0xa8>)
 80058d0:	f000 fa72 	bl	8005db8 <__assert_func>
 80058d4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80058d8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80058dc:	bb24      	cbnz	r4, 8005928 <__d2b+0x74>
 80058de:	2f00      	cmp	r7, #0
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	d026      	beq.n	8005932 <__d2b+0x7e>
 80058e4:	4668      	mov	r0, sp
 80058e6:	9700      	str	r7, [sp, #0]
 80058e8:	f7ff fd8a 	bl	8005400 <__lo0bits>
 80058ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058f0:	b1e8      	cbz	r0, 800592e <__d2b+0x7a>
 80058f2:	f1c0 0320 	rsb	r3, r0, #32
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	430b      	orrs	r3, r1
 80058fc:	40c2      	lsrs	r2, r0
 80058fe:	616b      	str	r3, [r5, #20]
 8005900:	9201      	str	r2, [sp, #4]
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf14      	ite	ne
 8005908:	2102      	movne	r1, #2
 800590a:	2101      	moveq	r1, #1
 800590c:	61ab      	str	r3, [r5, #24]
 800590e:	6129      	str	r1, [r5, #16]
 8005910:	b1bc      	cbz	r4, 8005942 <__d2b+0x8e>
 8005912:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005916:	4404      	add	r4, r0
 8005918:	6034      	str	r4, [r6, #0]
 800591a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	6018      	str	r0, [r3, #0]
 8005922:	4628      	mov	r0, r5
 8005924:	b003      	add	sp, #12
 8005926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592c:	e7d7      	b.n	80058de <__d2b+0x2a>
 800592e:	6169      	str	r1, [r5, #20]
 8005930:	e7e7      	b.n	8005902 <__d2b+0x4e>
 8005932:	a801      	add	r0, sp, #4
 8005934:	f7ff fd64 	bl	8005400 <__lo0bits>
 8005938:	9b01      	ldr	r3, [sp, #4]
 800593a:	2101      	movs	r1, #1
 800593c:	616b      	str	r3, [r5, #20]
 800593e:	3020      	adds	r0, #32
 8005940:	e7e5      	b.n	800590e <__d2b+0x5a>
 8005942:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005946:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800594a:	6030      	str	r0, [r6, #0]
 800594c:	6918      	ldr	r0, [r3, #16]
 800594e:	f7ff fd37 	bl	80053c0 <__hi0bits>
 8005952:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005956:	e7e2      	b.n	800591e <__d2b+0x6a>
 8005958:	080065a2 	.word	0x080065a2
 800595c:	080065b3 	.word	0x080065b3

08005960 <__ssputs_r>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	461f      	mov	r7, r3
 8005966:	688e      	ldr	r6, [r1, #8]
 8005968:	4682      	mov	sl, r0
 800596a:	42be      	cmp	r6, r7
 800596c:	460c      	mov	r4, r1
 800596e:	4690      	mov	r8, r2
 8005970:	680b      	ldr	r3, [r1, #0]
 8005972:	d82c      	bhi.n	80059ce <__ssputs_r+0x6e>
 8005974:	898a      	ldrh	r2, [r1, #12]
 8005976:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800597a:	d026      	beq.n	80059ca <__ssputs_r+0x6a>
 800597c:	6965      	ldr	r5, [r4, #20]
 800597e:	6909      	ldr	r1, [r1, #16]
 8005980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005984:	eba3 0901 	sub.w	r9, r3, r1
 8005988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800598c:	1c7b      	adds	r3, r7, #1
 800598e:	444b      	add	r3, r9
 8005990:	106d      	asrs	r5, r5, #1
 8005992:	429d      	cmp	r5, r3
 8005994:	bf38      	it	cc
 8005996:	461d      	movcc	r5, r3
 8005998:	0553      	lsls	r3, r2, #21
 800599a:	d527      	bpl.n	80059ec <__ssputs_r+0x8c>
 800599c:	4629      	mov	r1, r5
 800599e:	f7ff fbdb 	bl	8005158 <_malloc_r>
 80059a2:	4606      	mov	r6, r0
 80059a4:	b360      	cbz	r0, 8005a00 <__ssputs_r+0xa0>
 80059a6:	464a      	mov	r2, r9
 80059a8:	6921      	ldr	r1, [r4, #16]
 80059aa:	f7fe fcea 	bl	8004382 <memcpy>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	6126      	str	r6, [r4, #16]
 80059bc:	444e      	add	r6, r9
 80059be:	6026      	str	r6, [r4, #0]
 80059c0:	463e      	mov	r6, r7
 80059c2:	6165      	str	r5, [r4, #20]
 80059c4:	eba5 0509 	sub.w	r5, r5, r9
 80059c8:	60a5      	str	r5, [r4, #8]
 80059ca:	42be      	cmp	r6, r7
 80059cc:	d900      	bls.n	80059d0 <__ssputs_r+0x70>
 80059ce:	463e      	mov	r6, r7
 80059d0:	4632      	mov	r2, r6
 80059d2:	4641      	mov	r1, r8
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	f000 f9c5 	bl	8005d64 <memmove>
 80059da:	2000      	movs	r0, #0
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	1b9b      	subs	r3, r3, r6
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4433      	add	r3, r6
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ec:	462a      	mov	r2, r5
 80059ee:	f000 fa27 	bl	8005e40 <_realloc_r>
 80059f2:	4606      	mov	r6, r0
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d1e0      	bne.n	80059ba <__ssputs_r+0x5a>
 80059f8:	4650      	mov	r0, sl
 80059fa:	6921      	ldr	r1, [r4, #16]
 80059fc:	f7ff fb3c 	bl	8005078 <_free_r>
 8005a00:	230c      	movs	r3, #12
 8005a02:	f8ca 3000 	str.w	r3, [sl]
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	e7e9      	b.n	80059e8 <__ssputs_r+0x88>

08005a14 <_svfiprintf_r>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	4698      	mov	r8, r3
 8005a1a:	898b      	ldrh	r3, [r1, #12]
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	460d      	mov	r5, r1
 8005a22:	4614      	mov	r4, r2
 8005a24:	b09d      	sub	sp, #116	; 0x74
 8005a26:	d50e      	bpl.n	8005a46 <_svfiprintf_r+0x32>
 8005a28:	690b      	ldr	r3, [r1, #16]
 8005a2a:	b963      	cbnz	r3, 8005a46 <_svfiprintf_r+0x32>
 8005a2c:	2140      	movs	r1, #64	; 0x40
 8005a2e:	f7ff fb93 	bl	8005158 <_malloc_r>
 8005a32:	6028      	str	r0, [r5, #0]
 8005a34:	6128      	str	r0, [r5, #16]
 8005a36:	b920      	cbnz	r0, 8005a42 <_svfiprintf_r+0x2e>
 8005a38:	230c      	movs	r3, #12
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e0d0      	b.n	8005be4 <_svfiprintf_r+0x1d0>
 8005a42:	2340      	movs	r3, #64	; 0x40
 8005a44:	616b      	str	r3, [r5, #20]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4a:	2320      	movs	r3, #32
 8005a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a50:	2330      	movs	r3, #48	; 0x30
 8005a52:	f04f 0901 	mov.w	r9, #1
 8005a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a5a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005bfc <_svfiprintf_r+0x1e8>
 8005a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a62:	4623      	mov	r3, r4
 8005a64:	469a      	mov	sl, r3
 8005a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a6a:	b10a      	cbz	r2, 8005a70 <_svfiprintf_r+0x5c>
 8005a6c:	2a25      	cmp	r2, #37	; 0x25
 8005a6e:	d1f9      	bne.n	8005a64 <_svfiprintf_r+0x50>
 8005a70:	ebba 0b04 	subs.w	fp, sl, r4
 8005a74:	d00b      	beq.n	8005a8e <_svfiprintf_r+0x7a>
 8005a76:	465b      	mov	r3, fp
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f7ff ff6f 	bl	8005960 <__ssputs_r>
 8005a82:	3001      	adds	r0, #1
 8005a84:	f000 80a9 	beq.w	8005bda <_svfiprintf_r+0x1c6>
 8005a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8a:	445a      	add	r2, fp
 8005a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80a1 	beq.w	8005bda <_svfiprintf_r+0x1c6>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa2:	f10a 0a01 	add.w	sl, sl, #1
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	9307      	str	r3, [sp, #28]
 8005aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aae:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab0:	4654      	mov	r4, sl
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab8:	4850      	ldr	r0, [pc, #320]	; (8005bfc <_svfiprintf_r+0x1e8>)
 8005aba:	f7fe fc54 	bl	8004366 <memchr>
 8005abe:	9a04      	ldr	r2, [sp, #16]
 8005ac0:	b9d8      	cbnz	r0, 8005afa <_svfiprintf_r+0xe6>
 8005ac2:	06d0      	lsls	r0, r2, #27
 8005ac4:	bf44      	itt	mi
 8005ac6:	2320      	movmi	r3, #32
 8005ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005acc:	0711      	lsls	r1, r2, #28
 8005ace:	bf44      	itt	mi
 8005ad0:	232b      	movmi	r3, #43	; 0x2b
 8005ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8005ada:	2b2a      	cmp	r3, #42	; 0x2a
 8005adc:	d015      	beq.n	8005b0a <_svfiprintf_r+0xf6>
 8005ade:	4654      	mov	r4, sl
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	f04f 0c0a 	mov.w	ip, #10
 8005ae6:	9a07      	ldr	r2, [sp, #28]
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aee:	3b30      	subs	r3, #48	; 0x30
 8005af0:	2b09      	cmp	r3, #9
 8005af2:	d94d      	bls.n	8005b90 <_svfiprintf_r+0x17c>
 8005af4:	b1b0      	cbz	r0, 8005b24 <_svfiprintf_r+0x110>
 8005af6:	9207      	str	r2, [sp, #28]
 8005af8:	e014      	b.n	8005b24 <_svfiprintf_r+0x110>
 8005afa:	eba0 0308 	sub.w	r3, r0, r8
 8005afe:	fa09 f303 	lsl.w	r3, r9, r3
 8005b02:	4313      	orrs	r3, r2
 8005b04:	46a2      	mov	sl, r4
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	e7d2      	b.n	8005ab0 <_svfiprintf_r+0x9c>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	1d19      	adds	r1, r3, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	9103      	str	r1, [sp, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bfbb      	ittet	lt
 8005b16:	425b      	neglt	r3, r3
 8005b18:	f042 0202 	orrlt.w	r2, r2, #2
 8005b1c:	9307      	strge	r3, [sp, #28]
 8005b1e:	9307      	strlt	r3, [sp, #28]
 8005b20:	bfb8      	it	lt
 8005b22:	9204      	strlt	r2, [sp, #16]
 8005b24:	7823      	ldrb	r3, [r4, #0]
 8005b26:	2b2e      	cmp	r3, #46	; 0x2e
 8005b28:	d10c      	bne.n	8005b44 <_svfiprintf_r+0x130>
 8005b2a:	7863      	ldrb	r3, [r4, #1]
 8005b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2e:	d134      	bne.n	8005b9a <_svfiprintf_r+0x186>
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	3402      	adds	r4, #2
 8005b34:	1d1a      	adds	r2, r3, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	9203      	str	r2, [sp, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b42:	9305      	str	r3, [sp, #20]
 8005b44:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c00 <_svfiprintf_r+0x1ec>
 8005b48:	2203      	movs	r2, #3
 8005b4a:	4650      	mov	r0, sl
 8005b4c:	7821      	ldrb	r1, [r4, #0]
 8005b4e:	f7fe fc0a 	bl	8004366 <memchr>
 8005b52:	b138      	cbz	r0, 8005b64 <_svfiprintf_r+0x150>
 8005b54:	2240      	movs	r2, #64	; 0x40
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	eba0 000a 	sub.w	r0, r0, sl
 8005b5c:	4082      	lsls	r2, r0
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	3401      	adds	r4, #1
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	2206      	movs	r2, #6
 8005b6a:	4826      	ldr	r0, [pc, #152]	; (8005c04 <_svfiprintf_r+0x1f0>)
 8005b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b70:	f7fe fbf9 	bl	8004366 <memchr>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d038      	beq.n	8005bea <_svfiprintf_r+0x1d6>
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <_svfiprintf_r+0x1f4>)
 8005b7a:	bb1b      	cbnz	r3, 8005bc4 <_svfiprintf_r+0x1b0>
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	3307      	adds	r3, #7
 8005b80:	f023 0307 	bic.w	r3, r3, #7
 8005b84:	3308      	adds	r3, #8
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	4433      	add	r3, r6
 8005b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8e:	e768      	b.n	8005a62 <_svfiprintf_r+0x4e>
 8005b90:	460c      	mov	r4, r1
 8005b92:	2001      	movs	r0, #1
 8005b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b98:	e7a6      	b.n	8005ae8 <_svfiprintf_r+0xd4>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f04f 0c0a 	mov.w	ip, #10
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bac:	3a30      	subs	r2, #48	; 0x30
 8005bae:	2a09      	cmp	r2, #9
 8005bb0:	d903      	bls.n	8005bba <_svfiprintf_r+0x1a6>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0c6      	beq.n	8005b44 <_svfiprintf_r+0x130>
 8005bb6:	9105      	str	r1, [sp, #20]
 8005bb8:	e7c4      	b.n	8005b44 <_svfiprintf_r+0x130>
 8005bba:	4604      	mov	r4, r0
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc2:	e7f0      	b.n	8005ba6 <_svfiprintf_r+0x192>
 8005bc4:	ab03      	add	r3, sp, #12
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	462a      	mov	r2, r5
 8005bca:	4638      	mov	r0, r7
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <_svfiprintf_r+0x1f8>)
 8005bce:	a904      	add	r1, sp, #16
 8005bd0:	f7fd fe62 	bl	8003898 <_printf_float>
 8005bd4:	1c42      	adds	r2, r0, #1
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	d1d6      	bne.n	8005b88 <_svfiprintf_r+0x174>
 8005bda:	89ab      	ldrh	r3, [r5, #12]
 8005bdc:	065b      	lsls	r3, r3, #25
 8005bde:	f53f af2d 	bmi.w	8005a3c <_svfiprintf_r+0x28>
 8005be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be4:	b01d      	add	sp, #116	; 0x74
 8005be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bea:	ab03      	add	r3, sp, #12
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	462a      	mov	r2, r5
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <_svfiprintf_r+0x1f8>)
 8005bf4:	a904      	add	r1, sp, #16
 8005bf6:	f7fe f8ef 	bl	8003dd8 <_printf_i>
 8005bfa:	e7eb      	b.n	8005bd4 <_svfiprintf_r+0x1c0>
 8005bfc:	0800670c 	.word	0x0800670c
 8005c00:	08006712 	.word	0x08006712
 8005c04:	08006716 	.word	0x08006716
 8005c08:	08003899 	.word	0x08003899
 8005c0c:	08005961 	.word	0x08005961

08005c10 <__sflush_r>:
 8005c10:	898a      	ldrh	r2, [r1, #12]
 8005c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c14:	4605      	mov	r5, r0
 8005c16:	0710      	lsls	r0, r2, #28
 8005c18:	460c      	mov	r4, r1
 8005c1a:	d457      	bmi.n	8005ccc <__sflush_r+0xbc>
 8005c1c:	684b      	ldr	r3, [r1, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dc04      	bgt.n	8005c2c <__sflush_r+0x1c>
 8005c22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	dc01      	bgt.n	8005c2c <__sflush_r+0x1c>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	d0fa      	beq.n	8005c28 <__sflush_r+0x18>
 8005c32:	2300      	movs	r3, #0
 8005c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c38:	682f      	ldr	r7, [r5, #0]
 8005c3a:	6a21      	ldr	r1, [r4, #32]
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	d032      	beq.n	8005ca6 <__sflush_r+0x96>
 8005c40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	075a      	lsls	r2, r3, #29
 8005c46:	d505      	bpl.n	8005c54 <__sflush_r+0x44>
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	1ac0      	subs	r0, r0, r3
 8005c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c4e:	b10b      	cbz	r3, 8005c54 <__sflush_r+0x44>
 8005c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c52:	1ac0      	subs	r0, r0, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	4602      	mov	r2, r0
 8005c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	6a21      	ldr	r1, [r4, #32]
 8005c5e:	47b0      	blx	r6
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	d106      	bne.n	8005c74 <__sflush_r+0x64>
 8005c66:	6829      	ldr	r1, [r5, #0]
 8005c68:	291d      	cmp	r1, #29
 8005c6a:	d82b      	bhi.n	8005cc4 <__sflush_r+0xb4>
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <__sflush_r+0x100>)
 8005c6e:	410a      	asrs	r2, r1
 8005c70:	07d6      	lsls	r6, r2, #31
 8005c72:	d427      	bmi.n	8005cc4 <__sflush_r+0xb4>
 8005c74:	2200      	movs	r2, #0
 8005c76:	6062      	str	r2, [r4, #4]
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	04d9      	lsls	r1, r3, #19
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	d504      	bpl.n	8005c8a <__sflush_r+0x7a>
 8005c80:	1c42      	adds	r2, r0, #1
 8005c82:	d101      	bne.n	8005c88 <__sflush_r+0x78>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b903      	cbnz	r3, 8005c8a <__sflush_r+0x7a>
 8005c88:	6560      	str	r0, [r4, #84]	; 0x54
 8005c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8c:	602f      	str	r7, [r5, #0]
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d0ca      	beq.n	8005c28 <__sflush_r+0x18>
 8005c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c96:	4299      	cmp	r1, r3
 8005c98:	d002      	beq.n	8005ca0 <__sflush_r+0x90>
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f7ff f9ec 	bl	8005078 <_free_r>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ca4:	e7c1      	b.n	8005c2a <__sflush_r+0x1a>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b0      	blx	r6
 8005cac:	1c41      	adds	r1, r0, #1
 8005cae:	d1c8      	bne.n	8005c42 <__sflush_r+0x32>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0c5      	beq.n	8005c42 <__sflush_r+0x32>
 8005cb6:	2b1d      	cmp	r3, #29
 8005cb8:	d001      	beq.n	8005cbe <__sflush_r+0xae>
 8005cba:	2b16      	cmp	r3, #22
 8005cbc:	d101      	bne.n	8005cc2 <__sflush_r+0xb2>
 8005cbe:	602f      	str	r7, [r5, #0]
 8005cc0:	e7b2      	b.n	8005c28 <__sflush_r+0x18>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	e7ae      	b.n	8005c2a <__sflush_r+0x1a>
 8005ccc:	690f      	ldr	r7, [r1, #16]
 8005cce:	2f00      	cmp	r7, #0
 8005cd0:	d0aa      	beq.n	8005c28 <__sflush_r+0x18>
 8005cd2:	0793      	lsls	r3, r2, #30
 8005cd4:	bf18      	it	ne
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	680e      	ldr	r6, [r1, #0]
 8005cda:	bf08      	it	eq
 8005cdc:	694b      	ldreq	r3, [r1, #20]
 8005cde:	1bf6      	subs	r6, r6, r7
 8005ce0:	600f      	str	r7, [r1, #0]
 8005ce2:	608b      	str	r3, [r1, #8]
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	dd9f      	ble.n	8005c28 <__sflush_r+0x18>
 8005ce8:	4633      	mov	r3, r6
 8005cea:	463a      	mov	r2, r7
 8005cec:	4628      	mov	r0, r5
 8005cee:	6a21      	ldr	r1, [r4, #32]
 8005cf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005cf4:	47e0      	blx	ip
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	dc06      	bgt.n	8005d08 <__sflush_r+0xf8>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	e790      	b.n	8005c2a <__sflush_r+0x1a>
 8005d08:	4407      	add	r7, r0
 8005d0a:	1a36      	subs	r6, r6, r0
 8005d0c:	e7ea      	b.n	8005ce4 <__sflush_r+0xd4>
 8005d0e:	bf00      	nop
 8005d10:	dfbffffe 	.word	0xdfbffffe

08005d14 <_fflush_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	4605      	mov	r5, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	b913      	cbnz	r3, 8005d24 <_fflush_r+0x10>
 8005d1e:	2500      	movs	r5, #0
 8005d20:	4628      	mov	r0, r5
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	b118      	cbz	r0, 8005d2e <_fflush_r+0x1a>
 8005d26:	6a03      	ldr	r3, [r0, #32]
 8005d28:	b90b      	cbnz	r3, 8005d2e <_fflush_r+0x1a>
 8005d2a:	f7fe fa03 	bl	8004134 <__sinit>
 8005d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f3      	beq.n	8005d1e <_fflush_r+0xa>
 8005d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d38:	07d0      	lsls	r0, r2, #31
 8005d3a:	d404      	bmi.n	8005d46 <_fflush_r+0x32>
 8005d3c:	0599      	lsls	r1, r3, #22
 8005d3e:	d402      	bmi.n	8005d46 <_fflush_r+0x32>
 8005d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d42:	f7fe fb0e 	bl	8004362 <__retarget_lock_acquire_recursive>
 8005d46:	4628      	mov	r0, r5
 8005d48:	4621      	mov	r1, r4
 8005d4a:	f7ff ff61 	bl	8005c10 <__sflush_r>
 8005d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d50:	4605      	mov	r5, r0
 8005d52:	07da      	lsls	r2, r3, #31
 8005d54:	d4e4      	bmi.n	8005d20 <_fflush_r+0xc>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	059b      	lsls	r3, r3, #22
 8005d5a:	d4e1      	bmi.n	8005d20 <_fflush_r+0xc>
 8005d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5e:	f7fe fb01 	bl	8004364 <__retarget_lock_release_recursive>
 8005d62:	e7dd      	b.n	8005d20 <_fflush_r+0xc>

08005d64 <memmove>:
 8005d64:	4288      	cmp	r0, r1
 8005d66:	b510      	push	{r4, lr}
 8005d68:	eb01 0402 	add.w	r4, r1, r2
 8005d6c:	d902      	bls.n	8005d74 <memmove+0x10>
 8005d6e:	4284      	cmp	r4, r0
 8005d70:	4623      	mov	r3, r4
 8005d72:	d807      	bhi.n	8005d84 <memmove+0x20>
 8005d74:	1e43      	subs	r3, r0, #1
 8005d76:	42a1      	cmp	r1, r4
 8005d78:	d008      	beq.n	8005d8c <memmove+0x28>
 8005d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d82:	e7f8      	b.n	8005d76 <memmove+0x12>
 8005d84:	4601      	mov	r1, r0
 8005d86:	4402      	add	r2, r0
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	d100      	bne.n	8005d8e <memmove+0x2a>
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d96:	e7f7      	b.n	8005d88 <memmove+0x24>

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4d05      	ldr	r5, [pc, #20]	; (8005db4 <_sbrk_r+0x1c>)
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb ff52 	bl	8001c4c <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	2000072c 	.word	0x2000072c

08005db8 <__assert_func>:
 8005db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dba:	4614      	mov	r4, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <__assert_func+0x2c>)
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68d8      	ldr	r0, [r3, #12]
 8005dc6:	b14c      	cbz	r4, 8005ddc <__assert_func+0x24>
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <__assert_func+0x30>)
 8005dca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dce:	9100      	str	r1, [sp, #0]
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	4906      	ldr	r1, [pc, #24]	; (8005dec <__assert_func+0x34>)
 8005dd4:	f000 f870 	bl	8005eb8 <fiprintf>
 8005dd8:	f000 f880 	bl	8005edc <abort>
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <__assert_func+0x38>)
 8005dde:	461c      	mov	r4, r3
 8005de0:	e7f3      	b.n	8005dca <__assert_func+0x12>
 8005de2:	bf00      	nop
 8005de4:	20000064 	.word	0x20000064
 8005de8:	08006727 	.word	0x08006727
 8005dec:	08006734 	.word	0x08006734
 8005df0:	08006762 	.word	0x08006762

08005df4 <_calloc_r>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	fba1 5402 	umull	r5, r4, r1, r2
 8005dfa:	b934      	cbnz	r4, 8005e0a <_calloc_r+0x16>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7ff f9ab 	bl	8005158 <_malloc_r>
 8005e02:	4606      	mov	r6, r0
 8005e04:	b928      	cbnz	r0, 8005e12 <_calloc_r+0x1e>
 8005e06:	4630      	mov	r0, r6
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	220c      	movs	r2, #12
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	6002      	str	r2, [r0, #0]
 8005e10:	e7f9      	b.n	8005e06 <_calloc_r+0x12>
 8005e12:	462a      	mov	r2, r5
 8005e14:	4621      	mov	r1, r4
 8005e16:	f7fe fa26 	bl	8004266 <memset>
 8005e1a:	e7f4      	b.n	8005e06 <_calloc_r+0x12>

08005e1c <__ascii_mbtowc>:
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	b901      	cbnz	r1, 8005e22 <__ascii_mbtowc+0x6>
 8005e20:	a901      	add	r1, sp, #4
 8005e22:	b142      	cbz	r2, 8005e36 <__ascii_mbtowc+0x1a>
 8005e24:	b14b      	cbz	r3, 8005e3a <__ascii_mbtowc+0x1e>
 8005e26:	7813      	ldrb	r3, [r2, #0]
 8005e28:	600b      	str	r3, [r1, #0]
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	1e10      	subs	r0, r2, #0
 8005e2e:	bf18      	it	ne
 8005e30:	2001      	movne	r0, #1
 8005e32:	b002      	add	sp, #8
 8005e34:	4770      	bx	lr
 8005e36:	4610      	mov	r0, r2
 8005e38:	e7fb      	b.n	8005e32 <__ascii_mbtowc+0x16>
 8005e3a:	f06f 0001 	mvn.w	r0, #1
 8005e3e:	e7f8      	b.n	8005e32 <__ascii_mbtowc+0x16>

08005e40 <_realloc_r>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4680      	mov	r8, r0
 8005e46:	4614      	mov	r4, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	b921      	cbnz	r1, 8005e56 <_realloc_r+0x16>
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e52:	f7ff b981 	b.w	8005158 <_malloc_r>
 8005e56:	b92a      	cbnz	r2, 8005e64 <_realloc_r+0x24>
 8005e58:	f7ff f90e 	bl	8005078 <_free_r>
 8005e5c:	4625      	mov	r5, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	f000 f841 	bl	8005eea <_malloc_usable_size_r>
 8005e68:	4284      	cmp	r4, r0
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	d802      	bhi.n	8005e74 <_realloc_r+0x34>
 8005e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e72:	d812      	bhi.n	8005e9a <_realloc_r+0x5a>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff f96e 	bl	8005158 <_malloc_r>
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0ed      	beq.n	8005e5e <_realloc_r+0x1e>
 8005e82:	42bc      	cmp	r4, r7
 8005e84:	4622      	mov	r2, r4
 8005e86:	4631      	mov	r1, r6
 8005e88:	bf28      	it	cs
 8005e8a:	463a      	movcs	r2, r7
 8005e8c:	f7fe fa79 	bl	8004382 <memcpy>
 8005e90:	4631      	mov	r1, r6
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff f8f0 	bl	8005078 <_free_r>
 8005e98:	e7e1      	b.n	8005e5e <_realloc_r+0x1e>
 8005e9a:	4635      	mov	r5, r6
 8005e9c:	e7df      	b.n	8005e5e <_realloc_r+0x1e>

08005e9e <__ascii_wctomb>:
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	b141      	cbz	r1, 8005eb6 <__ascii_wctomb+0x18>
 8005ea4:	2aff      	cmp	r2, #255	; 0xff
 8005ea6:	d904      	bls.n	8005eb2 <__ascii_wctomb+0x14>
 8005ea8:	228a      	movs	r2, #138	; 0x8a
 8005eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	4770      	bx	lr
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	700a      	strb	r2, [r1, #0]
 8005eb6:	4770      	bx	lr

08005eb8 <fiprintf>:
 8005eb8:	b40e      	push	{r1, r2, r3}
 8005eba:	b503      	push	{r0, r1, lr}
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	ab03      	add	r3, sp, #12
 8005ec0:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <fiprintf+0x20>)
 8005ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec6:	6800      	ldr	r0, [r0, #0]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	f000 f83d 	bl	8005f48 <_vfiprintf_r>
 8005ece:	b002      	add	sp, #8
 8005ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed4:	b003      	add	sp, #12
 8005ed6:	4770      	bx	lr
 8005ed8:	20000064 	.word	0x20000064

08005edc <abort>:
 8005edc:	2006      	movs	r0, #6
 8005ede:	b508      	push	{r3, lr}
 8005ee0:	f000 fa0a 	bl	80062f8 <raise>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb fe3e 	bl	8001b66 <_exit>

08005eea <_malloc_usable_size_r>:
 8005eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eee:	1f18      	subs	r0, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfbc      	itt	lt
 8005ef4:	580b      	ldrlt	r3, [r1, r0]
 8005ef6:	18c0      	addlt	r0, r0, r3
 8005ef8:	4770      	bx	lr

08005efa <__sfputc_r>:
 8005efa:	6893      	ldr	r3, [r2, #8]
 8005efc:	b410      	push	{r4}
 8005efe:	3b01      	subs	r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	6093      	str	r3, [r2, #8]
 8005f04:	da07      	bge.n	8005f16 <__sfputc_r+0x1c>
 8005f06:	6994      	ldr	r4, [r2, #24]
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	db01      	blt.n	8005f10 <__sfputc_r+0x16>
 8005f0c:	290a      	cmp	r1, #10
 8005f0e:	d102      	bne.n	8005f16 <__sfputc_r+0x1c>
 8005f10:	bc10      	pop	{r4}
 8005f12:	f000 b933 	b.w	800617c <__swbuf_r>
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	1c58      	adds	r0, r3, #1
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	7019      	strb	r1, [r3, #0]
 8005f1e:	4608      	mov	r0, r1
 8005f20:	bc10      	pop	{r4}
 8005f22:	4770      	bx	lr

08005f24 <__sfputs_r>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	4614      	mov	r4, r2
 8005f2c:	18d5      	adds	r5, r2, r3
 8005f2e:	42ac      	cmp	r4, r5
 8005f30:	d101      	bne.n	8005f36 <__sfputs_r+0x12>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e007      	b.n	8005f46 <__sfputs_r+0x22>
 8005f36:	463a      	mov	r2, r7
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3e:	f7ff ffdc 	bl	8005efa <__sfputc_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d1f3      	bne.n	8005f2e <__sfputs_r+0xa>
 8005f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f48 <_vfiprintf_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	4614      	mov	r4, r2
 8005f50:	4698      	mov	r8, r3
 8005f52:	4606      	mov	r6, r0
 8005f54:	b09d      	sub	sp, #116	; 0x74
 8005f56:	b118      	cbz	r0, 8005f60 <_vfiprintf_r+0x18>
 8005f58:	6a03      	ldr	r3, [r0, #32]
 8005f5a:	b90b      	cbnz	r3, 8005f60 <_vfiprintf_r+0x18>
 8005f5c:	f7fe f8ea 	bl	8004134 <__sinit>
 8005f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f62:	07d9      	lsls	r1, r3, #31
 8005f64:	d405      	bmi.n	8005f72 <_vfiprintf_r+0x2a>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	059a      	lsls	r2, r3, #22
 8005f6a:	d402      	bmi.n	8005f72 <_vfiprintf_r+0x2a>
 8005f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f6e:	f7fe f9f8 	bl	8004362 <__retarget_lock_acquire_recursive>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	071b      	lsls	r3, r3, #28
 8005f76:	d501      	bpl.n	8005f7c <_vfiprintf_r+0x34>
 8005f78:	692b      	ldr	r3, [r5, #16]
 8005f7a:	b99b      	cbnz	r3, 8005fa4 <_vfiprintf_r+0x5c>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f93a 	bl	80061f8 <__swsetup_r>
 8005f84:	b170      	cbz	r0, 8005fa4 <_vfiprintf_r+0x5c>
 8005f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f88:	07dc      	lsls	r4, r3, #31
 8005f8a:	d504      	bpl.n	8005f96 <_vfiprintf_r+0x4e>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	b01d      	add	sp, #116	; 0x74
 8005f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f96:	89ab      	ldrh	r3, [r5, #12]
 8005f98:	0598      	lsls	r0, r3, #22
 8005f9a:	d4f7      	bmi.n	8005f8c <_vfiprintf_r+0x44>
 8005f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f9e:	f7fe f9e1 	bl	8004364 <__retarget_lock_release_recursive>
 8005fa2:	e7f3      	b.n	8005f8c <_vfiprintf_r+0x44>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fae:	2330      	movs	r3, #48	; 0x30
 8005fb0:	f04f 0901 	mov.w	r9, #1
 8005fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006168 <_vfiprintf_r+0x220>
 8005fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	469a      	mov	sl, r3
 8005fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc8:	b10a      	cbz	r2, 8005fce <_vfiprintf_r+0x86>
 8005fca:	2a25      	cmp	r2, #37	; 0x25
 8005fcc:	d1f9      	bne.n	8005fc2 <_vfiprintf_r+0x7a>
 8005fce:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd2:	d00b      	beq.n	8005fec <_vfiprintf_r+0xa4>
 8005fd4:	465b      	mov	r3, fp
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ffa2 	bl	8005f24 <__sfputs_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f000 80a9 	beq.w	8006138 <_vfiprintf_r+0x1f0>
 8005fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fe8:	445a      	add	r2, fp
 8005fea:	9209      	str	r2, [sp, #36]	; 0x24
 8005fec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80a1 	beq.w	8006138 <_vfiprintf_r+0x1f0>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006000:	f10a 0a01 	add.w	sl, sl, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	9307      	str	r3, [sp, #28]
 8006008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800600c:	931a      	str	r3, [sp, #104]	; 0x68
 800600e:	4654      	mov	r4, sl
 8006010:	2205      	movs	r2, #5
 8006012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006016:	4854      	ldr	r0, [pc, #336]	; (8006168 <_vfiprintf_r+0x220>)
 8006018:	f7fe f9a5 	bl	8004366 <memchr>
 800601c:	9a04      	ldr	r2, [sp, #16]
 800601e:	b9d8      	cbnz	r0, 8006058 <_vfiprintf_r+0x110>
 8006020:	06d1      	lsls	r1, r2, #27
 8006022:	bf44      	itt	mi
 8006024:	2320      	movmi	r3, #32
 8006026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800602a:	0713      	lsls	r3, r2, #28
 800602c:	bf44      	itt	mi
 800602e:	232b      	movmi	r3, #43	; 0x2b
 8006030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b2a      	cmp	r3, #42	; 0x2a
 800603a:	d015      	beq.n	8006068 <_vfiprintf_r+0x120>
 800603c:	4654      	mov	r4, sl
 800603e:	2000      	movs	r0, #0
 8006040:	f04f 0c0a 	mov.w	ip, #10
 8006044:	9a07      	ldr	r2, [sp, #28]
 8006046:	4621      	mov	r1, r4
 8006048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800604c:	3b30      	subs	r3, #48	; 0x30
 800604e:	2b09      	cmp	r3, #9
 8006050:	d94d      	bls.n	80060ee <_vfiprintf_r+0x1a6>
 8006052:	b1b0      	cbz	r0, 8006082 <_vfiprintf_r+0x13a>
 8006054:	9207      	str	r2, [sp, #28]
 8006056:	e014      	b.n	8006082 <_vfiprintf_r+0x13a>
 8006058:	eba0 0308 	sub.w	r3, r0, r8
 800605c:	fa09 f303 	lsl.w	r3, r9, r3
 8006060:	4313      	orrs	r3, r2
 8006062:	46a2      	mov	sl, r4
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	e7d2      	b.n	800600e <_vfiprintf_r+0xc6>
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	1d19      	adds	r1, r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	9103      	str	r1, [sp, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	bfbb      	ittet	lt
 8006074:	425b      	neglt	r3, r3
 8006076:	f042 0202 	orrlt.w	r2, r2, #2
 800607a:	9307      	strge	r3, [sp, #28]
 800607c:	9307      	strlt	r3, [sp, #28]
 800607e:	bfb8      	it	lt
 8006080:	9204      	strlt	r2, [sp, #16]
 8006082:	7823      	ldrb	r3, [r4, #0]
 8006084:	2b2e      	cmp	r3, #46	; 0x2e
 8006086:	d10c      	bne.n	80060a2 <_vfiprintf_r+0x15a>
 8006088:	7863      	ldrb	r3, [r4, #1]
 800608a:	2b2a      	cmp	r3, #42	; 0x2a
 800608c:	d134      	bne.n	80060f8 <_vfiprintf_r+0x1b0>
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	3402      	adds	r4, #2
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	9203      	str	r2, [sp, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	bfb8      	it	lt
 800609c:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800616c <_vfiprintf_r+0x224>
 80060a6:	2203      	movs	r2, #3
 80060a8:	4650      	mov	r0, sl
 80060aa:	7821      	ldrb	r1, [r4, #0]
 80060ac:	f7fe f95b 	bl	8004366 <memchr>
 80060b0:	b138      	cbz	r0, 80060c2 <_vfiprintf_r+0x17a>
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	9b04      	ldr	r3, [sp, #16]
 80060b6:	eba0 000a 	sub.w	r0, r0, sl
 80060ba:	4082      	lsls	r2, r0
 80060bc:	4313      	orrs	r3, r2
 80060be:	3401      	adds	r4, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c6:	2206      	movs	r2, #6
 80060c8:	4829      	ldr	r0, [pc, #164]	; (8006170 <_vfiprintf_r+0x228>)
 80060ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ce:	f7fe f94a 	bl	8004366 <memchr>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d03f      	beq.n	8006156 <_vfiprintf_r+0x20e>
 80060d6:	4b27      	ldr	r3, [pc, #156]	; (8006174 <_vfiprintf_r+0x22c>)
 80060d8:	bb1b      	cbnz	r3, 8006122 <_vfiprintf_r+0x1da>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	3307      	adds	r3, #7
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	3308      	adds	r3, #8
 80060e4:	9303      	str	r3, [sp, #12]
 80060e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e8:	443b      	add	r3, r7
 80060ea:	9309      	str	r3, [sp, #36]	; 0x24
 80060ec:	e768      	b.n	8005fc0 <_vfiprintf_r+0x78>
 80060ee:	460c      	mov	r4, r1
 80060f0:	2001      	movs	r0, #1
 80060f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060f6:	e7a6      	b.n	8006046 <_vfiprintf_r+0xfe>
 80060f8:	2300      	movs	r3, #0
 80060fa:	f04f 0c0a 	mov.w	ip, #10
 80060fe:	4619      	mov	r1, r3
 8006100:	3401      	adds	r4, #1
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	4620      	mov	r0, r4
 8006106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800610a:	3a30      	subs	r2, #48	; 0x30
 800610c:	2a09      	cmp	r2, #9
 800610e:	d903      	bls.n	8006118 <_vfiprintf_r+0x1d0>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0c6      	beq.n	80060a2 <_vfiprintf_r+0x15a>
 8006114:	9105      	str	r1, [sp, #20]
 8006116:	e7c4      	b.n	80060a2 <_vfiprintf_r+0x15a>
 8006118:	4604      	mov	r4, r0
 800611a:	2301      	movs	r3, #1
 800611c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006120:	e7f0      	b.n	8006104 <_vfiprintf_r+0x1bc>
 8006122:	ab03      	add	r3, sp, #12
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	462a      	mov	r2, r5
 8006128:	4630      	mov	r0, r6
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <_vfiprintf_r+0x230>)
 800612c:	a904      	add	r1, sp, #16
 800612e:	f7fd fbb3 	bl	8003898 <_printf_float>
 8006132:	4607      	mov	r7, r0
 8006134:	1c78      	adds	r0, r7, #1
 8006136:	d1d6      	bne.n	80060e6 <_vfiprintf_r+0x19e>
 8006138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800613a:	07d9      	lsls	r1, r3, #31
 800613c:	d405      	bmi.n	800614a <_vfiprintf_r+0x202>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	059a      	lsls	r2, r3, #22
 8006142:	d402      	bmi.n	800614a <_vfiprintf_r+0x202>
 8006144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006146:	f7fe f90d 	bl	8004364 <__retarget_lock_release_recursive>
 800614a:	89ab      	ldrh	r3, [r5, #12]
 800614c:	065b      	lsls	r3, r3, #25
 800614e:	f53f af1d 	bmi.w	8005f8c <_vfiprintf_r+0x44>
 8006152:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006154:	e71c      	b.n	8005f90 <_vfiprintf_r+0x48>
 8006156:	ab03      	add	r3, sp, #12
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	462a      	mov	r2, r5
 800615c:	4630      	mov	r0, r6
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <_vfiprintf_r+0x230>)
 8006160:	a904      	add	r1, sp, #16
 8006162:	f7fd fe39 	bl	8003dd8 <_printf_i>
 8006166:	e7e4      	b.n	8006132 <_vfiprintf_r+0x1ea>
 8006168:	0800670c 	.word	0x0800670c
 800616c:	08006712 	.word	0x08006712
 8006170:	08006716 	.word	0x08006716
 8006174:	08003899 	.word	0x08003899
 8006178:	08005f25 	.word	0x08005f25

0800617c <__swbuf_r>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	460e      	mov	r6, r1
 8006180:	4614      	mov	r4, r2
 8006182:	4605      	mov	r5, r0
 8006184:	b118      	cbz	r0, 800618e <__swbuf_r+0x12>
 8006186:	6a03      	ldr	r3, [r0, #32]
 8006188:	b90b      	cbnz	r3, 800618e <__swbuf_r+0x12>
 800618a:	f7fd ffd3 	bl	8004134 <__sinit>
 800618e:	69a3      	ldr	r3, [r4, #24]
 8006190:	60a3      	str	r3, [r4, #8]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	071a      	lsls	r2, r3, #28
 8006196:	d525      	bpl.n	80061e4 <__swbuf_r+0x68>
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	b31b      	cbz	r3, 80061e4 <__swbuf_r+0x68>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	6922      	ldr	r2, [r4, #16]
 80061a0:	b2f6      	uxtb	r6, r6
 80061a2:	1a98      	subs	r0, r3, r2
 80061a4:	6963      	ldr	r3, [r4, #20]
 80061a6:	4637      	mov	r7, r6
 80061a8:	4283      	cmp	r3, r0
 80061aa:	dc04      	bgt.n	80061b6 <__swbuf_r+0x3a>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	f7ff fdb0 	bl	8005d14 <_fflush_r>
 80061b4:	b9e0      	cbnz	r0, 80061f0 <__swbuf_r+0x74>
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	6022      	str	r2, [r4, #0]
 80061c2:	701e      	strb	r6, [r3, #0]
 80061c4:	6962      	ldr	r2, [r4, #20]
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d004      	beq.n	80061d6 <__swbuf_r+0x5a>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	07db      	lsls	r3, r3, #31
 80061d0:	d506      	bpl.n	80061e0 <__swbuf_r+0x64>
 80061d2:	2e0a      	cmp	r6, #10
 80061d4:	d104      	bne.n	80061e0 <__swbuf_r+0x64>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f7ff fd9b 	bl	8005d14 <_fflush_r>
 80061de:	b938      	cbnz	r0, 80061f0 <__swbuf_r+0x74>
 80061e0:	4638      	mov	r0, r7
 80061e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 f806 	bl	80061f8 <__swsetup_r>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d0d5      	beq.n	800619c <__swbuf_r+0x20>
 80061f0:	f04f 37ff 	mov.w	r7, #4294967295
 80061f4:	e7f4      	b.n	80061e0 <__swbuf_r+0x64>
	...

080061f8 <__swsetup_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <__swsetup_r+0xac>)
 80061fc:	4605      	mov	r5, r0
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	460c      	mov	r4, r1
 8006202:	b118      	cbz	r0, 800620c <__swsetup_r+0x14>
 8006204:	6a03      	ldr	r3, [r0, #32]
 8006206:	b90b      	cbnz	r3, 800620c <__swsetup_r+0x14>
 8006208:	f7fd ff94 	bl	8004134 <__sinit>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006212:	0718      	lsls	r0, r3, #28
 8006214:	d422      	bmi.n	800625c <__swsetup_r+0x64>
 8006216:	06d9      	lsls	r1, r3, #27
 8006218:	d407      	bmi.n	800622a <__swsetup_r+0x32>
 800621a:	2309      	movs	r3, #9
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006222:	f04f 30ff 	mov.w	r0, #4294967295
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	e034      	b.n	8006294 <__swsetup_r+0x9c>
 800622a:	0758      	lsls	r0, r3, #29
 800622c:	d512      	bpl.n	8006254 <__swsetup_r+0x5c>
 800622e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006230:	b141      	cbz	r1, 8006244 <__swsetup_r+0x4c>
 8006232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006236:	4299      	cmp	r1, r3
 8006238:	d002      	beq.n	8006240 <__swsetup_r+0x48>
 800623a:	4628      	mov	r0, r5
 800623c:	f7fe ff1c 	bl	8005078 <_free_r>
 8006240:	2300      	movs	r3, #0
 8006242:	6363      	str	r3, [r4, #52]	; 0x34
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	2300      	movs	r3, #0
 800624e:	6063      	str	r3, [r4, #4]
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f043 0308 	orr.w	r3, r3, #8
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	6923      	ldr	r3, [r4, #16]
 800625e:	b94b      	cbnz	r3, 8006274 <__swsetup_r+0x7c>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626a:	d003      	beq.n	8006274 <__swsetup_r+0x7c>
 800626c:	4621      	mov	r1, r4
 800626e:	4628      	mov	r0, r5
 8006270:	f000 f883 	bl	800637a <__smakebuf_r>
 8006274:	89a0      	ldrh	r0, [r4, #12]
 8006276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800627a:	f010 0301 	ands.w	r3, r0, #1
 800627e:	d00a      	beq.n	8006296 <__swsetup_r+0x9e>
 8006280:	2300      	movs	r3, #0
 8006282:	60a3      	str	r3, [r4, #8]
 8006284:	6963      	ldr	r3, [r4, #20]
 8006286:	425b      	negs	r3, r3
 8006288:	61a3      	str	r3, [r4, #24]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	b943      	cbnz	r3, 80062a0 <__swsetup_r+0xa8>
 800628e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006292:	d1c4      	bne.n	800621e <__swsetup_r+0x26>
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	0781      	lsls	r1, r0, #30
 8006298:	bf58      	it	pl
 800629a:	6963      	ldrpl	r3, [r4, #20]
 800629c:	60a3      	str	r3, [r4, #8]
 800629e:	e7f4      	b.n	800628a <__swsetup_r+0x92>
 80062a0:	2000      	movs	r0, #0
 80062a2:	e7f7      	b.n	8006294 <__swsetup_r+0x9c>
 80062a4:	20000064 	.word	0x20000064

080062a8 <_raise_r>:
 80062a8:	291f      	cmp	r1, #31
 80062aa:	b538      	push	{r3, r4, r5, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	d904      	bls.n	80062bc <_raise_r+0x14>
 80062b2:	2316      	movs	r3, #22
 80062b4:	6003      	str	r3, [r0, #0]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80062be:	b112      	cbz	r2, 80062c6 <_raise_r+0x1e>
 80062c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062c4:	b94b      	cbnz	r3, 80062da <_raise_r+0x32>
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f830 	bl	800632c <_getpid_r>
 80062cc:	462a      	mov	r2, r5
 80062ce:	4601      	mov	r1, r0
 80062d0:	4620      	mov	r0, r4
 80062d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d6:	f000 b817 	b.w	8006308 <_kill_r>
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d00a      	beq.n	80062f4 <_raise_r+0x4c>
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	d103      	bne.n	80062ea <_raise_r+0x42>
 80062e2:	2316      	movs	r3, #22
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	2001      	movs	r0, #1
 80062e8:	e7e7      	b.n	80062ba <_raise_r+0x12>
 80062ea:	2400      	movs	r4, #0
 80062ec:	4628      	mov	r0, r5
 80062ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062f2:	4798      	blx	r3
 80062f4:	2000      	movs	r0, #0
 80062f6:	e7e0      	b.n	80062ba <_raise_r+0x12>

080062f8 <raise>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <raise+0xc>)
 80062fa:	4601      	mov	r1, r0
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f7ff bfd3 	b.w	80062a8 <_raise_r>
 8006302:	bf00      	nop
 8006304:	20000064 	.word	0x20000064

08006308 <_kill_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	2300      	movs	r3, #0
 800630c:	4d06      	ldr	r5, [pc, #24]	; (8006328 <_kill_r+0x20>)
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	f7fb fc16 	bl	8001b46 <_kill>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d102      	bne.n	8006324 <_kill_r+0x1c>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	b103      	cbz	r3, 8006324 <_kill_r+0x1c>
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	2000072c 	.word	0x2000072c

0800632c <_getpid_r>:
 800632c:	f7fb bc04 	b.w	8001b38 <_getpid>

08006330 <__swhatbuf_r>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	460c      	mov	r4, r1
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	4615      	mov	r5, r2
 800633a:	2900      	cmp	r1, #0
 800633c:	461e      	mov	r6, r3
 800633e:	b096      	sub	sp, #88	; 0x58
 8006340:	da0c      	bge.n	800635c <__swhatbuf_r+0x2c>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	2100      	movs	r1, #0
 8006346:	f013 0f80 	tst.w	r3, #128	; 0x80
 800634a:	bf0c      	ite	eq
 800634c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006350:	2340      	movne	r3, #64	; 0x40
 8006352:	2000      	movs	r0, #0
 8006354:	6031      	str	r1, [r6, #0]
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	b016      	add	sp, #88	; 0x58
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	466a      	mov	r2, sp
 800635e:	f000 f849 	bl	80063f4 <_fstat_r>
 8006362:	2800      	cmp	r0, #0
 8006364:	dbed      	blt.n	8006342 <__swhatbuf_r+0x12>
 8006366:	9901      	ldr	r1, [sp, #4]
 8006368:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800636c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006370:	4259      	negs	r1, r3
 8006372:	4159      	adcs	r1, r3
 8006374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006378:	e7eb      	b.n	8006352 <__swhatbuf_r+0x22>

0800637a <__smakebuf_r>:
 800637a:	898b      	ldrh	r3, [r1, #12]
 800637c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800637e:	079d      	lsls	r5, r3, #30
 8006380:	4606      	mov	r6, r0
 8006382:	460c      	mov	r4, r1
 8006384:	d507      	bpl.n	8006396 <__smakebuf_r+0x1c>
 8006386:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	2301      	movs	r3, #1
 8006390:	6163      	str	r3, [r4, #20]
 8006392:	b002      	add	sp, #8
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	466a      	mov	r2, sp
 8006398:	ab01      	add	r3, sp, #4
 800639a:	f7ff ffc9 	bl	8006330 <__swhatbuf_r>
 800639e:	9900      	ldr	r1, [sp, #0]
 80063a0:	4605      	mov	r5, r0
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7fe fed8 	bl	8005158 <_malloc_r>
 80063a8:	b948      	cbnz	r0, 80063be <__smakebuf_r+0x44>
 80063aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ae:	059a      	lsls	r2, r3, #22
 80063b0:	d4ef      	bmi.n	8006392 <__smakebuf_r+0x18>
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	f043 0302 	orr.w	r3, r3, #2
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	e7e3      	b.n	8006386 <__smakebuf_r+0xc>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	6020      	str	r0, [r4, #0]
 80063c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	9b00      	ldr	r3, [sp, #0]
 80063ca:	6120      	str	r0, [r4, #16]
 80063cc:	6163      	str	r3, [r4, #20]
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	b15b      	cbz	r3, 80063ea <__smakebuf_r+0x70>
 80063d2:	4630      	mov	r0, r6
 80063d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d8:	f000 f81e 	bl	8006418 <_isatty_r>
 80063dc:	b128      	cbz	r0, 80063ea <__smakebuf_r+0x70>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	431d      	orrs	r5, r3
 80063ee:	81a5      	strh	r5, [r4, #12]
 80063f0:	e7cf      	b.n	8006392 <__smakebuf_r+0x18>
	...

080063f4 <_fstat_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	2300      	movs	r3, #0
 80063f8:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_fstat_r+0x20>)
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f7fb fbfe 	bl	8001c02 <_fstat>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d102      	bne.n	8006410 <_fstat_r+0x1c>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	b103      	cbz	r3, 8006410 <_fstat_r+0x1c>
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	2000072c 	.word	0x2000072c

08006418 <_isatty_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	2300      	movs	r3, #0
 800641c:	4d05      	ldr	r5, [pc, #20]	; (8006434 <_isatty_r+0x1c>)
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fb fbfc 	bl	8001c20 <_isatty>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_isatty_r+0x1a>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	b103      	cbz	r3, 8006432 <_isatty_r+0x1a>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	2000072c 	.word	0x2000072c

08006438 <_init>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr

08006444 <_fini>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr
